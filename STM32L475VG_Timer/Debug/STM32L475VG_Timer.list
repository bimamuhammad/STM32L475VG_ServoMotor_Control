
STM32L475VG_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c10  08003c10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08003c88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003c88  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000191e  00000000  00000000  0002cd71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026847  00000000  00000000  0002feb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cc2  00000000  00000000  000566ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2399  00000000  00000000  000603c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015275a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  001527d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b58 	.word	0x08003b58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b58 	.word	0x08003b58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b08f      	sub	sp, #60	; 0x3c
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fa6c 	bl	8000a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f843 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8fd 	bl	800077c <MX_GPIO_Init>
  MX_TIM16_Init();
 8000582:	f000 f8a5 	bl	80006d0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000586:	f000 f8c9 	bl	800071c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Say Something
  uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
 800058a:	463b      	mov	r3, r7
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <main+0x84>)
 800058e:	461c      	mov	r4, r3
 8000590:	4613      	mov	r3, r2
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	c407      	stmia	r4!, {r0, r1, r2}
 8000596:	7023      	strb	r3, [r4, #0]
 8000598:	230c      	movs	r3, #12
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf,uart_buf_len, 100 );
 800059c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4639      	mov	r1, r7
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	4814      	ldr	r0, [pc, #80]	; (80005f8 <main+0x88>)
 80005a6:	f002 fa1f 	bl	80029e8 <HAL_UART_Transmit>

  //Start timer
  HAL_TIM_Base_Start(&htim16);
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0x8c>)
 80005ac:	f002 f8cc 	bl	8002748 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Get current time (microseconds)
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <main+0x8c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	867b      	strh	r3, [r7, #50]	; 0x32

	  //wait  for 50 ms
	  HAL_Delay(50);
 80005b8:	2032      	movs	r0, #50	; 0x32
 80005ba:	f000 fabf 	bl	8000b3c <HAL_Delay>

	  //Get time elapsed
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16) - timer_val;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0x8c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	867b      	strh	r3, [r7, #50]	; 0x32

	  //Show elapsed time
	  uart_buf_len = sprintf(uart_buf, "%u us \r\n", timer_val);
 80005cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80005ce:	463b      	mov	r3, r7
 80005d0:	490b      	ldr	r1, [pc, #44]	; (8000600 <main+0x90>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 feba 	bl	800334c <siprintf>
 80005d8:	6378      	str	r0, [r7, #52]	; 0x34
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf,uart_buf_len, 100 );
 80005da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4639      	mov	r1, r7
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <main+0x88>)
 80005e4:	f002 fa00 	bl	80029e8 <HAL_UART_Transmit>

	  //Wait again so we don't flood the serial terminal
	  HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 faa6 	bl	8000b3c <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80005f0:	e7de      	b.n	80005b0 <main+0x40>
 80005f2:	bf00      	nop
 80005f4:	08003b70 	.word	0x08003b70
 80005f8:	20000098 	.word	0x20000098
 80005fc:	20000118 	.word	0x20000118
 8000600:	08003b80 	.word	0x08003b80

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe92 	bl	800333c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2288      	movs	r2, #136	; 0x88
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fe84 	bl	800333c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000634:	2310      	movs	r3, #16
 8000636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd84 	bl	8001164 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000662:	f000 f8a3 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f950 	bl	8001930 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 f889 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800069a:	2301      	movs	r3, #1
 800069c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fb47 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006b0:	f000 f87c 	bl	80007ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b8:	f000 fcfe 	bl	80010b8 <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f873 	bl	80007ac <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	37e0      	adds	r7, #224	; 0xe0
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_TIM16_Init+0x44>)
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_TIM16_Init+0x48>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80 - 1;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_TIM16_Init+0x44>)
 80006dc:	224f      	movs	r2, #79	; 0x4f
 80006de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_TIM16_Init+0x44>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 -1;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_TIM16_Init+0x44>)
 80006e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_TIM16_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_TIM16_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_TIM16_Init+0x44>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_TIM16_Init+0x44>)
 8000702:	f001 ffc9 	bl	8002698 <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800070c:	f000 f84e 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000118 	.word	0x20000118
 8000718:	40014400 	.word	0x40014400

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART1_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000760:	f002 f8f4 	bl	800294c <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f81f 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000098 	.word	0x20000098
 8000778:	40013800 	.word	0x40013800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x2c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	; 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_TIM_Base_MspInit+0x38>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d10b      	bne.n	800082e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6613      	str	r3, [r2, #96]	; 0x60
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40014400 	.word	0x40014400
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d127      	bne.n	80008b6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0x80>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_UART_MspInit+0x80>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_UART_MspInit+0x80>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000896:	23c0      	movs	r3, #192	; 0xc0
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <HAL_UART_MspInit+0x84>)
 80008b2:	f000 fa4b 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f8ec 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f002 fcc6 	bl	80032e8 <__errno>
 800095c:	4602      	mov	r2, r0
 800095e:	230c      	movs	r3, #12
 8000960:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20018000 	.word	0x20018000
 8000988:	00000400 	.word	0x00000400
 800098c:	2000008c 	.word	0x2000008c
 8000990:	20000170 	.word	0x20000170

08000994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <SystemInit+0x64>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <SystemInit+0x64>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <SystemInit+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <SystemInit+0x68>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <SystemInit+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <SystemInit+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <SystemInit+0x68>)
 80009c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <SystemInit+0x68>)
 80009cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <SystemInit+0x68>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <SystemInit+0x68>)
 80009d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <SystemInit+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SystemInit+0x64>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	40021000 	.word	0x40021000

08000a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a04:	f7ff ffc6 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a0a:	e003      	b.n	8000a14 <LoopCopyDataInit>

08000a0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a12:	3104      	adds	r1, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a1c:	d3f6      	bcc.n	8000a0c <CopyDataInit>
	ldr	r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a20:	e002      	b.n	8000a28 <LoopFillZerobss>

08000a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a24:	f842 3b04 	str.w	r3, [r2], #4

08000a28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <LoopForever+0x16>)
	cmp	r2, r3
 8000a2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a2c:	d3f9      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 fc61 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a32:	f7ff fd9d 	bl	8000570 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a3c:	08003c18 	.word	0x08003c18
	ldr	r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a44:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000a48:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000a4c:	2000016c 	.word	0x2000016c

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>

08000a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f941 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f80e 	bl	8000a84 <HAL_InitTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e001      	b.n	8000a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a74:	f7ff fea2 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d023      	beq.n	8000ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_InitTick+0x70>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f93f 	bl	8000d32 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d809      	bhi.n	8000ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f917 	bl	8000cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0x74>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e001      	b.n	8000ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000164 	.word	0x20000164

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000164 	.word	0x20000164

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff47 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff5c 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb0 	bl	8000ca0 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e17f      	b.n	800105c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8171 	beq.w	8001056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d00b      	beq.n	8000d94 <HAL_GPIO_Init+0x48>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d88:	2b11      	cmp	r3, #17
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 0201 	and.w	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d118      	bne.n	8000e34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x128>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	6939      	ldr	r1, [r7, #16]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80ac 	beq.w	8001056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <HAL_GPIO_Init+0x32c>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <HAL_GPIO_Init+0x32c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_GPIO_Init+0x32c>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f16:	4a59      	ldr	r2, [pc, #356]	; (800107c <HAL_GPIO_Init+0x330>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x242>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x334>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x23e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x338>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_GPIO_Init+0x33c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x236>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_GPIO_Init+0x340>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x232>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x344>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x22e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_GPIO_Init+0x348>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x22a>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa0:	4936      	ldr	r1, [pc, #216]	; (800107c <HAL_GPIO_Init+0x330>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_GPIO_Init+0x34c>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_GPIO_Init+0x34c>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	f47f ae78 	bne.w	8000d5c <HAL_GPIO_Init+0x10>
  }
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800
 8001088:	48000c00 	.word	0x48000c00
 800108c:	48001000 	.word	0x48001000
 8001090:	48001400 	.word	0x48001400
 8001094:	48001800 	.word	0x48001800
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c6:	d130      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d4:	d038      	beq.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9b      	lsrs	r3, r3, #18
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fc:	e002      	b.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3b01      	subs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d102      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f2      	bne.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001124:	d110      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e00f      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d007      	beq.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000
 800115c:	20000000 	.word	0x20000000
 8001160:	431bde83 	.word	0x431bde83

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e3d4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001180:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80e4 	beq.w	8001360 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_RCC_OscConfig+0x4a>
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	f040 808b 	bne.w	80012bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 8087 	bne.w	80012bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ae:	4b93      	ldr	r3, [pc, #588]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e3ac      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	4b8c      	ldr	r3, [pc, #560]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_RCC_OscConfig+0x7c>
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011de:	e005      	b.n	80011ec <HAL_RCC_OscConfig+0x88>
 80011e0:	4b86      	ldr	r3, [pc, #536]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d223      	bcs.n	8001238 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fd3f 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e38d      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a7c      	ldr	r2, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4977      	ldr	r1, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001222:	4b76      	ldr	r3, [pc, #472]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4972      	ldr	r1, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
 8001236:	e025      	b.n	8001284 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	496a      	ldr	r1, [pc, #424]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001256:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	4965      	ldr	r1, [pc, #404]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fcff 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e34d      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001284:	f000 fc36 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001288:	4601      	mov	r1, r0
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	4a5a      	ldr	r2, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x29c>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	fa21 f303 	lsr.w	r3, r1, r3
 80012a0:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x2a0>)
 80012a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fbeb 	bl	8000a84 <HAL_InitTick>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d052      	beq.n	800135e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	e331      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d032      	beq.n	800132a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc28 	bl	8000b24 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc24 	bl	8000b24 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e31a      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	493b      	ldr	r1, [pc, #236]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4936      	ldr	r1, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
 8001328:	e01a      	b.n	8001360 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001336:	f7ff fbf5 	bl	8000b24 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800133e:	f7ff fbf1 	bl	8000b24 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e2e7      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x1da>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d074      	beq.n	8001456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x21a>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d10e      	bne.n	8001396 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d064      	beq.n	8001454 <HAL_RCC_OscConfig+0x2f0>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d160      	bne.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e2c4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x24a>
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e01d      	b.n	80013ea <HAL_RCC_OscConfig+0x286>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x26e>
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_OscConfig+0x286>
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x298>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01c      	beq.n	800142c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb97 	bl	8000b24 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f8:	e011      	b.n	800141e <HAL_RCC_OscConfig+0x2ba>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	08003b8c 	.word	0x08003b8c
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fb8a 	bl	8000b24 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e280      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141e:	4baf      	ldr	r3, [pc, #700]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x2a8>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fb7a 	bl	8000b24 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fb76 	bl	8000b24 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001446:	4ba5      	ldr	r3, [pc, #660]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d0>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d060      	beq.n	8001524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x310>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d119      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d116      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	4b99      	ldr	r3, [pc, #612]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x328>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e249      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	4990      	ldr	r1, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	e040      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d023      	beq.n	80014f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014aa:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8b      	ldr	r2, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb35 	bl	8000b24 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fb31 	bl	8000b24 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e227      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	497c      	ldr	r1, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e018      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a79      	ldr	r2, [pc, #484]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80014f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb11 	bl	8000b24 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fb0d 	bl	8000b24 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e203      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d03c      	beq.n	80015aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01c      	beq.n	8001572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	4a67      	ldr	r2, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff faec 	bl	8000b24 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fae8 	bl	8000b24 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1de      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ef      	beq.n	8001550 <HAL_RCC_OscConfig+0x3ec>
 8001570:	e01b      	b.n	80015aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff facf 	bl	8000b24 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff facb 	bl	8000b24 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1c1      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ef      	bne.n	800158a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80a6 	beq.w	8001704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d118      	bne.n	8001622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa92 	bl	8000b24 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7ff fa8e 	bl	8000b24 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e184      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_RCC_OscConfig+0x57c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x4d8>
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163a:	e024      	b.n	8001686 <HAL_RCC_OscConfig+0x522>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d110      	bne.n	8001666 <HAL_RCC_OscConfig+0x502>
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	e00f      	b.n	8001686 <HAL_RCC_OscConfig+0x522>
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fa49 	bl	8000b24 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fa45 	bl	8000b24 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e139      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x578>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ed      	beq.n	8001696 <HAL_RCC_OscConfig+0x532>
 80016ba:	e01a      	b.n	80016f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fa32 	bl	8000b24 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff fa2e 	bl	8000b24 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d906      	bls.n	80016e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e122      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	4b90      	ldr	r3, [pc, #576]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e8      	bne.n	80016c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a8a      	ldr	r2, [pc, #552]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80016fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8108 	beq.w	800191e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2b02      	cmp	r3, #2
 8001714:	f040 80d0 	bne.w	80018b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001718:	4b83      	ldr	r3, [pc, #524]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	429a      	cmp	r2, r3
 800172a:	d130      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	3b01      	subs	r3, #1
 8001738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d127      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11f      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001758:	2a07      	cmp	r2, #7
 800175a:	bf14      	ite	ne
 800175c:	2201      	movne	r2, #1
 800175e:	2200      	moveq	r2, #0
 8001760:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001762:	4293      	cmp	r3, r2
 8001764:	d113      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	3b01      	subs	r3, #1
 8001774:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d109      	bne.n	800178e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	3b01      	subs	r3, #1
 8001788:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d06e      	beq.n	800186c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d069      	beq.n	8001868 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b7      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017b0:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017bc:	f7ff f9b2 	bl	8000b24 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f9ae 	bl	8000b24 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0a4      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_RCC_OscConfig+0x7c8>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f2:	3a01      	subs	r2, #1
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017fc:	0212      	lsls	r2, r2, #8
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	3a01      	subs	r2, #1
 8001808:	0552      	lsls	r2, r2, #21
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001810:	0852      	lsrs	r2, r2, #1
 8001812:	3a01      	subs	r2, #1
 8001814:	0652      	lsls	r2, r2, #25
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800181c:	0912      	lsrs	r2, r2, #4
 800181e:	0452      	lsls	r2, r2, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	4941      	ldr	r1, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001840:	f7ff f970 	bl	8000b24 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f96c 	bl	8000b24 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e062      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001866:	e05a      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e059      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d152      	bne.n	800191e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001890:	f7ff f948 	bl	8000b24 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f944 	bl	8000b24 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e03a      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x734>
 80018b6:	e032      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d02d      	beq.n	800191a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff f917 	bl	8000b24 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f913 	bl	8000b24 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e009      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x7c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x796>
 8001918:	e001      	b.n	800191e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	f99d808c 	.word	0xf99d808c

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0c8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4961      	ldr	r1, [pc, #388]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b0      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d04c      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d121      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e09e      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e092      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e086      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e07e      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 0203 	bic.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	493f      	ldr	r1, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ea:	f7ff f89b 	bl	8000b24 <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff f897 	bl	8000b24 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e066      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 020c 	and.w	r2, r3, #12
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d1eb      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e036      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4910      	ldr	r1, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa6:	f000 f825 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001aaa:	4601      	mov	r1, r0
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe ffda 	bl	8000a84 <HAL_InitTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	08003b8c 	.word	0x08003b8c
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b44:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b50:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e004      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d133      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0xaa>
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b9a:	617b      	str	r3, [r7, #20]
      break;
 8001b9c:	e005      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba0:	617b      	str	r3, [r7, #20]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	617b      	str	r3, [r7, #20]
      break;
 8001ba8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	fb02 f203 	mul.w	r2, r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0e5b      	lsrs	r3, r3, #25
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bea:	69bb      	ldr	r3, [r7, #24]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3724      	adds	r7, #36	; 0x24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08003ba4 	.word	0x08003ba4
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003b9c 	.word	0x08003b9c

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c50:	f7ff ffda 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c54:	4601      	mov	r1, r0
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0adb      	lsrs	r3, r3, #11
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08003b9c 	.word	0x08003b9c

08001c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c90:	f7ff fa04 	bl	800109c <HAL_PWREx_GetVoltageRange>
 8001c94:	6178      	str	r0, [r7, #20]
 8001c96:	e014      	b.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb0:	f7ff f9f4 	bl	800109c <HAL_PWREx_GetVoltageRange>
 8001cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc8:	d10b      	bne.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d919      	bls.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd4:	d902      	bls.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e013      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e010      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b80      	cmp	r3, #128	; 0x80
 8001ce6:	d902      	bls.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e00a      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d102      	bne.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e004      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b70      	cmp	r3, #112	; 0x70
 8001cfe:	d101      	bne.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 0207 	bic.w	r2, r3, #7
 8001d0c:	4909      	ldr	r1, [pc, #36]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40022000 	.word	0x40022000

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d40:	2300      	movs	r3, #0
 8001d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d44:	2300      	movs	r3, #0
 8001d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03f      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d62:	d802      	bhi.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d68:	e01f      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d6e:	d003      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d74:	d01c      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d76:	e018      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d78:	4b85      	ldr	r3, [pc, #532]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a84      	ldr	r2, [pc, #528]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d84:	e015      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fab9 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d96:	e00c      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fba0 	bl	80024e4 <RCCEx_PLLSAI2_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da8:	e003      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
      break;
 8001dae:	e000      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc6:	4972      	ldr	r1, [pc, #456]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dce:	e001      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d03f      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d01c      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dee:	d802      	bhi.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001df4:	e01f      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfa:	d003      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001dfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e00:	d01c      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001e02:	e018      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a61      	ldr	r2, [pc, #388]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e10:	e015      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fa73 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e22:	e00c      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3320      	adds	r3, #32
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fb5a 	bl	80024e4 <RCCEx_PLLSAI2_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e34:	e003      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3a:	e000      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e44:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e52:	494f      	ldr	r1, [pc, #316]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e5a:	e001      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a0 	beq.w	8001fae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	4a40      	ldr	r2, [pc, #256]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	; 0x58
 8001e94:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fe38 	bl	8000b24 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb6:	e009      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb8:	f7fe fe34 	bl	8000b24 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	74fb      	strb	r3, [r7, #19]
        break;
 8001eca:	e005      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d15c      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01f      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d019      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fdf3 	bl	8000b24 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	e00b      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fdef 	bl	8000b24 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d902      	bls.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	74fb      	strb	r3, [r7, #19]
            break;
 8001f58:	e006      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ec      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f7e:	4904      	ldr	r1, [pc, #16]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f86:	e009      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
 8001f8c:	e006      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9c:	7c7b      	ldrb	r3, [r7, #17]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b9e      	ldr	r3, [pc, #632]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a9d      	ldr	r2, [pc, #628]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4b98      	ldr	r3, [pc, #608]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	4994      	ldr	r1, [pc, #592]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 020c 	bic.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	498c      	ldr	r1, [pc, #560]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffe:	4b87      	ldr	r3, [pc, #540]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4983      	ldr	r1, [pc, #524]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002020:	4b7e      	ldr	r3, [pc, #504]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	497b      	ldr	r1, [pc, #492]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	4972      	ldr	r1, [pc, #456]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002064:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	496a      	ldr	r1, [pc, #424]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	4961      	ldr	r1, [pc, #388]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a8:	4b5c      	ldr	r3, [pc, #368]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	4959      	ldr	r1, [pc, #356]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ca:	4b54      	ldr	r3, [pc, #336]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d8:	4950      	ldr	r1, [pc, #320]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	4948      	ldr	r1, [pc, #288]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	493f      	ldr	r1, [pc, #252]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d028      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214e:	d106      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
 800215c:	e011      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002166:	d10c      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f8c8 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d028      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	491f      	ldr	r1, [pc, #124]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ac:	d106      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b8:	60d3      	str	r3, [r2, #12]
 80021ba:	e011      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2101      	movs	r1, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f899 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02b      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800220a:	d109      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a02      	ldr	r2, [pc, #8]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
 8002218:	e014      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f867 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02f      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225e:	4928      	ldr	r1, [pc, #160]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800226a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800226e:	d10d      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2102      	movs	r1, #2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f844 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d014      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	74bb      	strb	r3, [r7, #18]
 800228a:	e011      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3320      	adds	r3, #32
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f921 	bl	80024e4 <RCCEx_PLLSAI2_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000

08002304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002312:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800231e:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
       ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002336:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
       ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d044      	beq.n	80023d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e041      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d00c      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0x6e>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d013      	beq.n	8002384 <RCCEx_PLLSAI1_Config+0x80>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d120      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002360:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11d      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002370:	e01a      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002372:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002382:	e013      	b.n	80023ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10f      	bne.n	80023b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002390:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a0:	e006      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      break;
 80023a6:	e004      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023a8:	bf00      	nop
 80023aa:	e002      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023ac:	bf00      	nop
 80023ae:	e000      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10d      	bne.n	80023d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	430b      	orrs	r3, r1
 80023ce:	4944      	ldr	r1, [pc, #272]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d17d      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a40      	ldr	r2, [pc, #256]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e6:	f7fe fb9d 	bl	8000b24 <HAL_GetTick>
 80023ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ec:	e009      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ee:	f7fe fb99 	bl	8000b24 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d902      	bls.n	8002402 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	73fb      	strb	r3, [r7, #15]
        break;
 8002400:	e005      	b.n	800240e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d160      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d111      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800241a:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	0211      	lsls	r1, r2, #8
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	0912      	lsrs	r2, r2, #4
 8002432:	0452      	lsls	r2, r2, #17
 8002434:	430a      	orrs	r2, r1
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	610b      	str	r3, [r1, #16]
 800243c:	e027      	b.n	800248e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d112      	bne.n	800246a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800244c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6892      	ldr	r2, [r2, #8]
 8002454:	0211      	lsls	r1, r2, #8
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6912      	ldr	r2, [r2, #16]
 800245a:	0852      	lsrs	r2, r2, #1
 800245c:	3a01      	subs	r2, #1
 800245e:	0552      	lsls	r2, r2, #21
 8002460:	430a      	orrs	r2, r1
 8002462:	491f      	ldr	r1, [pc, #124]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	610b      	str	r3, [r1, #16]
 8002468:	e011      	b.n	800248e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002472:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6892      	ldr	r2, [r2, #8]
 800247a:	0211      	lsls	r1, r2, #8
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6952      	ldr	r2, [r2, #20]
 8002480:	0852      	lsrs	r2, r2, #1
 8002482:	3a01      	subs	r2, #1
 8002484:	0652      	lsls	r2, r2, #25
 8002486:	430a      	orrs	r2, r1
 8002488:	4915      	ldr	r1, [pc, #84]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002498:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe fb43 	bl	8000b24 <HAL_GetTick>
 800249e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a2:	f7fe fb3f 	bl	8000b24 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d902      	bls.n	80024b6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	73fb      	strb	r3, [r7, #15]
          break;
 80024b4:	e005      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0ef      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000

080024e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024f2:	4b68      	ldr	r3, [pc, #416]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d018      	beq.n	8002530 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0203 	and.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d10d      	bne.n	800252a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
       ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
       ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d044      	beq.n	80025b4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e041      	b.n	80025b4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d00c      	beq.n	8002552 <RCCEx_PLLSAI2_Config+0x6e>
 8002538:	2b03      	cmp	r3, #3
 800253a:	d013      	beq.n	8002564 <RCCEx_PLLSAI2_Config+0x80>
 800253c:	2b01      	cmp	r3, #1
 800253e:	d120      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002540:	4b54      	ldr	r3, [pc, #336]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d11d      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e01a      	b.n	8002588 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002562:	e013      	b.n	800258c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002580:	e006      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      break;
 8002586:	e004      	b.n	8002592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002588:	bf00      	nop
 800258a:	e002      	b.n	8002592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002590:	bf00      	nop
    }

    if(status == HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	430b      	orrs	r3, r1
 80025ae:	4939      	ldr	r1, [pc, #228]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d167      	bne.n	800268a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a35      	ldr	r2, [pc, #212]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c6:	f7fe faad 	bl	8000b24 <HAL_GetTick>
 80025ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025cc:	e009      	b.n	80025e2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025ce:	f7fe faa9 	bl	8000b24 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d902      	bls.n	80025e2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	73fb      	strb	r3, [r7, #15]
        break;
 80025e0:	e005      	b.n	80025ee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d14a      	bne.n	800268a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d111      	bne.n	800261e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	0211      	lsls	r1, r2, #8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68d2      	ldr	r2, [r2, #12]
 8002610:	0912      	lsrs	r2, r2, #4
 8002612:	0452      	lsls	r2, r2, #17
 8002614:	430a      	orrs	r2, r1
 8002616:	491f      	ldr	r1, [pc, #124]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	614b      	str	r3, [r1, #20]
 800261c:	e011      	b.n	8002642 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002626:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	0211      	lsls	r1, r2, #8
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6912      	ldr	r2, [r2, #16]
 8002634:	0852      	lsrs	r2, r2, #1
 8002636:	3a01      	subs	r2, #1
 8002638:	0652      	lsls	r2, r2, #25
 800263a:	430a      	orrs	r2, r1
 800263c:	4915      	ldr	r1, [pc, #84]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fa69 	bl	8000b24 <HAL_GetTick>
 8002652:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002654:	e009      	b.n	800266a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002656:	f7fe fa65 	bl	8000b24 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d902      	bls.n	800266a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	73fb      	strb	r3, [r7, #15]
          break;
 8002668:	e005      	b.n	8002676 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0ef      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e049      	b.n	800273e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe f8a0 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f000 f89e 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d001      	beq.n	8002760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e047      	b.n	80027f0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <HAL_TIM_Base_Start+0xb4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d018      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_TIM_Base_Start+0xb8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_TIM_Base_Start+0xbc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_TIM_Base_Start+0xc0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1b      	ldr	r2, [pc, #108]	; (800280c <HAL_TIM_Base_Start+0xc4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_TIM_Base_Start+0x66>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_TIM_Base_Start+0xc8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d115      	bne.n	80027da <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_TIM_Base_Start+0xcc>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b06      	cmp	r3, #6
 80027be:	d015      	beq.n	80027ec <HAL_TIM_Base_Start+0xa4>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c6:	d011      	beq.n	80027ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d8:	e008      	b.n	80027ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e000      	b.n	80027ee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40013400 	.word	0x40013400
 8002810:	40014000 	.word	0x40014000
 8002814:	00010007 	.word	0x00010007

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <TIM_Base_SetConfig+0x114>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <TIM_Base_SetConfig+0x118>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <TIM_Base_SetConfig+0x11c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <TIM_Base_SetConfig+0x120>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3a      	ldr	r2, [pc, #232]	; (800293c <TIM_Base_SetConfig+0x124>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2f      	ldr	r2, [pc, #188]	; (800292c <TIM_Base_SetConfig+0x114>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d01b      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <TIM_Base_SetConfig+0x118>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d017      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <TIM_Base_SetConfig+0x11c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <TIM_Base_SetConfig+0x120>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0x124>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <TIM_Base_SetConfig+0x128>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <TIM_Base_SetConfig+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x9a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <TIM_Base_SetConfig+0x130>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <TIM_Base_SetConfig+0x114>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00f      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <TIM_Base_SetConfig+0x124>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00b      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <TIM_Base_SetConfig+0x128>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <TIM_Base_SetConfig+0x12c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <TIM_Base_SetConfig+0xf8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <TIM_Base_SetConfig+0x130>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d103      	bne.n	8002918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	615a      	str	r2, [r3, #20]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40013400 	.word	0x40013400
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800

0800294c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e040      	b.n	80029e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd ff68 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8c0 	bl	8002b10 <UART_SetConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fb3e 	bl	8003024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fbc5 	bl	8003168 <UART_CheckIdleState>
 80029de:	4603      	mov	r3, r0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 8081 	bne.w	8002b04 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_UART_Transmit+0x26>
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e079      	b.n	8002b06 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x38>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e072      	b.n	8002b06 <HAL_UART_Transmit+0x11e>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	; 0x21
 8002a32:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe f876 	bl	8000b24 <HAL_GetTick>
 8002a38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d108      	bne.n	8002a66 <HAL_UART_Transmit+0x7e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e003      	b.n	8002a6e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002a76:	e02d      	b.n	8002ad4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fbb5 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e039      	b.n	8002b06 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e008      	b.n	8002ac2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1cb      	bne.n	8002a78 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fb81 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e005      	b.n	8002b06 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b14:	b088      	sub	sp, #32
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4bac      	ldr	r3, [pc, #688]	; (8002df0 <UART_SetConfig+0x2e0>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	69f9      	ldr	r1, [r7, #28]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4aa2      	ldr	r2, [pc, #648]	; (8002df4 <UART_SetConfig+0x2e4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a99      	ldr	r2, [pc, #612]	; (8002df8 <UART_SetConfig+0x2e8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d121      	bne.n	8002bdc <UART_SetConfig+0xcc>
 8002b98:	4b98      	ldr	r3, [pc, #608]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d816      	bhi.n	8002bd4 <UART_SetConfig+0xc4>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <UART_SetConfig+0x9c>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bc9 	.word	0x08002bc9
 8002bb4:	08002bc3 	.word	0x08002bc3
 8002bb8:	08002bcf 	.word	0x08002bcf
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	76fb      	strb	r3, [r7, #27]
 8002bc0:	e0e8      	b.n	8002d94 <UART_SetConfig+0x284>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	76fb      	strb	r3, [r7, #27]
 8002bc6:	e0e5      	b.n	8002d94 <UART_SetConfig+0x284>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	76fb      	strb	r3, [r7, #27]
 8002bcc:	e0e2      	b.n	8002d94 <UART_SetConfig+0x284>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	76fb      	strb	r3, [r7, #27]
 8002bd2:	e0df      	b.n	8002d94 <UART_SetConfig+0x284>
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	76fb      	strb	r3, [r7, #27]
 8002bd8:	bf00      	nop
 8002bda:	e0db      	b.n	8002d94 <UART_SetConfig+0x284>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a87      	ldr	r2, [pc, #540]	; (8002e00 <UART_SetConfig+0x2f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d134      	bne.n	8002c50 <UART_SetConfig+0x140>
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d829      	bhi.n	8002c48 <UART_SetConfig+0x138>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <UART_SetConfig+0xec>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c31 	.word	0x08002c31
 8002c00:	08002c49 	.word	0x08002c49
 8002c04:	08002c49 	.word	0x08002c49
 8002c08:	08002c49 	.word	0x08002c49
 8002c0c:	08002c3d 	.word	0x08002c3d
 8002c10:	08002c49 	.word	0x08002c49
 8002c14:	08002c49 	.word	0x08002c49
 8002c18:	08002c49 	.word	0x08002c49
 8002c1c:	08002c37 	.word	0x08002c37
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002c49 	.word	0x08002c49
 8002c2c:	08002c43 	.word	0x08002c43
 8002c30:	2300      	movs	r3, #0
 8002c32:	76fb      	strb	r3, [r7, #27]
 8002c34:	e0ae      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c36:	2302      	movs	r3, #2
 8002c38:	76fb      	strb	r3, [r7, #27]
 8002c3a:	e0ab      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	76fb      	strb	r3, [r7, #27]
 8002c40:	e0a8      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c42:	2308      	movs	r3, #8
 8002c44:	76fb      	strb	r3, [r7, #27]
 8002c46:	e0a5      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	76fb      	strb	r3, [r7, #27]
 8002c4c:	bf00      	nop
 8002c4e:	e0a1      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6b      	ldr	r2, [pc, #428]	; (8002e04 <UART_SetConfig+0x2f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d120      	bne.n	8002c9c <UART_SetConfig+0x18c>
 8002c5a:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d00f      	beq.n	8002c88 <UART_SetConfig+0x178>
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d802      	bhi.n	8002c72 <UART_SetConfig+0x162>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <UART_SetConfig+0x16c>
 8002c70:	e010      	b.n	8002c94 <UART_SetConfig+0x184>
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d005      	beq.n	8002c82 <UART_SetConfig+0x172>
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d009      	beq.n	8002c8e <UART_SetConfig+0x17e>
 8002c7a:	e00b      	b.n	8002c94 <UART_SetConfig+0x184>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	76fb      	strb	r3, [r7, #27]
 8002c80:	e088      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c82:	2302      	movs	r3, #2
 8002c84:	76fb      	strb	r3, [r7, #27]
 8002c86:	e085      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	76fb      	strb	r3, [r7, #27]
 8002c8c:	e082      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	76fb      	strb	r3, [r7, #27]
 8002c92:	e07f      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c94:	2310      	movs	r3, #16
 8002c96:	76fb      	strb	r3, [r7, #27]
 8002c98:	bf00      	nop
 8002c9a:	e07b      	b.n	8002d94 <UART_SetConfig+0x284>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a59      	ldr	r2, [pc, #356]	; (8002e08 <UART_SetConfig+0x2f8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d120      	bne.n	8002ce8 <UART_SetConfig+0x1d8>
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d00f      	beq.n	8002cd4 <UART_SetConfig+0x1c4>
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d802      	bhi.n	8002cbe <UART_SetConfig+0x1ae>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <UART_SetConfig+0x1b8>
 8002cbc:	e010      	b.n	8002ce0 <UART_SetConfig+0x1d0>
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d005      	beq.n	8002cce <UART_SetConfig+0x1be>
 8002cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cc4:	d009      	beq.n	8002cda <UART_SetConfig+0x1ca>
 8002cc6:	e00b      	b.n	8002ce0 <UART_SetConfig+0x1d0>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	76fb      	strb	r3, [r7, #27]
 8002ccc:	e062      	b.n	8002d94 <UART_SetConfig+0x284>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	76fb      	strb	r3, [r7, #27]
 8002cd2:	e05f      	b.n	8002d94 <UART_SetConfig+0x284>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	76fb      	strb	r3, [r7, #27]
 8002cd8:	e05c      	b.n	8002d94 <UART_SetConfig+0x284>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	76fb      	strb	r3, [r7, #27]
 8002cde:	e059      	b.n	8002d94 <UART_SetConfig+0x284>
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	76fb      	strb	r3, [r7, #27]
 8002ce4:	bf00      	nop
 8002ce6:	e055      	b.n	8002d94 <UART_SetConfig+0x284>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <UART_SetConfig+0x2fc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d124      	bne.n	8002d3c <UART_SetConfig+0x22c>
 8002cf2:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d00:	d012      	beq.n	8002d28 <UART_SetConfig+0x218>
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d802      	bhi.n	8002d0e <UART_SetConfig+0x1fe>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <UART_SetConfig+0x20c>
 8002d0c:	e012      	b.n	8002d34 <UART_SetConfig+0x224>
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	d006      	beq.n	8002d22 <UART_SetConfig+0x212>
 8002d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d18:	d009      	beq.n	8002d2e <UART_SetConfig+0x21e>
 8002d1a:	e00b      	b.n	8002d34 <UART_SetConfig+0x224>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	76fb      	strb	r3, [r7, #27]
 8002d20:	e038      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d22:	2302      	movs	r3, #2
 8002d24:	76fb      	strb	r3, [r7, #27]
 8002d26:	e035      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	76fb      	strb	r3, [r7, #27]
 8002d2c:	e032      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d2e:	2308      	movs	r3, #8
 8002d30:	76fb      	strb	r3, [r7, #27]
 8002d32:	e02f      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d34:	2310      	movs	r3, #16
 8002d36:	76fb      	strb	r3, [r7, #27]
 8002d38:	bf00      	nop
 8002d3a:	e02b      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2c      	ldr	r2, [pc, #176]	; (8002df4 <UART_SetConfig+0x2e4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d124      	bne.n	8002d90 <UART_SetConfig+0x280>
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <UART_SetConfig+0x2ec>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d012      	beq.n	8002d7c <UART_SetConfig+0x26c>
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d802      	bhi.n	8002d62 <UART_SetConfig+0x252>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <UART_SetConfig+0x260>
 8002d60:	e012      	b.n	8002d88 <UART_SetConfig+0x278>
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d006      	beq.n	8002d76 <UART_SetConfig+0x266>
 8002d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d6c:	d009      	beq.n	8002d82 <UART_SetConfig+0x272>
 8002d6e:	e00b      	b.n	8002d88 <UART_SetConfig+0x278>
 8002d70:	2300      	movs	r3, #0
 8002d72:	76fb      	strb	r3, [r7, #27]
 8002d74:	e00e      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d76:	2302      	movs	r3, #2
 8002d78:	76fb      	strb	r3, [r7, #27]
 8002d7a:	e00b      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	76fb      	strb	r3, [r7, #27]
 8002d80:	e008      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d82:	2308      	movs	r3, #8
 8002d84:	76fb      	strb	r3, [r7, #27]
 8002d86:	e005      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	76fb      	strb	r3, [r7, #27]
 8002d8c:	bf00      	nop
 8002d8e:	e001      	b.n	8002d94 <UART_SetConfig+0x284>
 8002d90:	2310      	movs	r3, #16
 8002d92:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <UART_SetConfig+0x2e4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	f040 8087 	bne.w	8002eae <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002da0:	7efb      	ldrb	r3, [r7, #27]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d836      	bhi.n	8002e14 <UART_SetConfig+0x304>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <UART_SetConfig+0x29c>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dd1 	.word	0x08002dd1
 8002db0:	08002e15 	.word	0x08002e15
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002e15 	.word	0x08002e15
 8002dbc:	08002ddf 	.word	0x08002ddf
 8002dc0:	08002e15 	.word	0x08002e15
 8002dc4:	08002e15 	.word	0x08002e15
 8002dc8:	08002e15 	.word	0x08002e15
 8002dcc:	08002de7 	.word	0x08002de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd0:	f7fe ff26 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002dd4:	6178      	str	r0, [r7, #20]
        break;
 8002dd6:	e022      	b.n	8002e1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <UART_SetConfig+0x300>)
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e01f      	b.n	8002e1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dde:	f7fe fe89 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002de2:	6178      	str	r0, [r7, #20]
        break;
 8002de4:	e01b      	b.n	8002e1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dea:	617b      	str	r3, [r7, #20]
        break;
 8002dec:	e017      	b.n	8002e1e <UART_SetConfig+0x30e>
 8002dee:	bf00      	nop
 8002df0:	efff69f3 	.word	0xefff69f3
 8002df4:	40008000 	.word	0x40008000
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40004400 	.word	0x40004400
 8002e04:	40004800 	.word	0x40004800
 8002e08:	40004c00 	.word	0x40004c00
 8002e0c:	40005000 	.word	0x40005000
 8002e10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	76bb      	strb	r3, [r7, #26]
        break;
 8002e1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80f1 	beq.w	8003008 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d305      	bcc.n	8002e42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d902      	bls.n	8002e48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	76bb      	strb	r3, [r7, #26]
 8002e46:	e0df      	b.n	8003008 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	0214      	lsls	r4, r2, #8
 8002e5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e5e:	020b      	lsls	r3, r1, #8
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	0852      	lsrs	r2, r2, #1
 8002e66:	4611      	mov	r1, r2
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	eb13 0b01 	adds.w	fp, r3, r1
 8002e70:	eb44 0c02 	adc.w	ip, r4, r2
 8002e74:	4658      	mov	r0, fp
 8002e76:	4661      	mov	r1, ip
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f04f 0400 	mov.w	r4, #0
 8002e80:	461a      	mov	r2, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	f7fd f9f4 	bl	8000270 <__aeabi_uldivmod>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e94:	d308      	bcc.n	8002ea8 <UART_SetConfig+0x398>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d204      	bcs.n	8002ea8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e0af      	b.n	8003008 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	76bb      	strb	r3, [r7, #26]
 8002eac:	e0ac      	b.n	8003008 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d15b      	bne.n	8002f70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002eb8:	7efb      	ldrb	r3, [r7, #27]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d827      	bhi.n	8002f0e <UART_SetConfig+0x3fe>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <UART_SetConfig+0x3b4>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	08002ef9 	.word	0x08002ef9
 8002ed0:	08002f0f 	.word	0x08002f0f
 8002ed4:	08002eff 	.word	0x08002eff
 8002ed8:	08002f0f 	.word	0x08002f0f
 8002edc:	08002f0f 	.word	0x08002f0f
 8002ee0:	08002f0f 	.word	0x08002f0f
 8002ee4:	08002f07 	.word	0x08002f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7fe fe9a 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002eec:	6178      	str	r0, [r7, #20]
        break;
 8002eee:	e013      	b.n	8002f18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7fe feac 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002ef4:	6178      	str	r0, [r7, #20]
        break;
 8002ef6:	e00f      	b.n	8002f18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef8:	4b49      	ldr	r3, [pc, #292]	; (8003020 <UART_SetConfig+0x510>)
 8002efa:	617b      	str	r3, [r7, #20]
        break;
 8002efc:	e00c      	b.n	8002f18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7fe fdf9 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002f02:	6178      	str	r0, [r7, #20]
        break;
 8002f04:	e008      	b.n	8002f18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	617b      	str	r3, [r7, #20]
        break;
 8002f0c:	e004      	b.n	8002f18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	76bb      	strb	r3, [r7, #26]
        break;
 8002f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d074      	beq.n	8003008 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d916      	bls.n	8002f6a <UART_SetConfig+0x45a>
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f42:	d212      	bcs.n	8002f6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f023 030f 	bic.w	r3, r3, #15
 8002f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	89fa      	ldrh	r2, [r7, #14]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	e04e      	b.n	8003008 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	76bb      	strb	r3, [r7, #26]
 8002f6e:	e04b      	b.n	8003008 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f70:	7efb      	ldrb	r3, [r7, #27]
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d827      	bhi.n	8002fc6 <UART_SetConfig+0x4b6>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x46c>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fc7 	.word	0x08002fc7
 8002f94:	08002fc7 	.word	0x08002fc7
 8002f98:	08002fc7 	.word	0x08002fc7
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe fe3e 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	6178      	str	r0, [r7, #20]
        break;
 8002fa6:	e013      	b.n	8002fd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7fe fe50 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002fac:	6178      	str	r0, [r7, #20]
        break;
 8002fae:	e00f      	b.n	8002fd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <UART_SetConfig+0x510>)
 8002fb2:	617b      	str	r3, [r7, #20]
        break;
 8002fb4:	e00c      	b.n	8002fd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7fe fd9d 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8002fba:	6178      	str	r0, [r7, #20]
        break;
 8002fbc:	e008      	b.n	8002fd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	617b      	str	r3, [r7, #20]
        break;
 8002fc4:	e004      	b.n	8002fd0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8002fce:	bf00      	nop
    }

    if (pclk != 0U)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085a      	lsrs	r2, r3, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	441a      	add	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	d908      	bls.n	8003004 <UART_SetConfig+0x4f4>
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d204      	bcs.n	8003004 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e001      	b.n	8003008 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003014:	7ebb      	ldrb	r3, [r7, #26]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003020:	00f42400 	.word	0x00f42400

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d10a      	bne.n	800313a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003176:	f7fd fcd5 	bl	8000b24 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b08      	cmp	r3, #8
 8003188:	d10e      	bne.n	80031a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f82a 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e020      	b.n	80031ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d10e      	bne.n	80031d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f814 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e00a      	b.n	80031ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003202:	e05d      	b.n	80032c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d059      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7fd fc8a 	bl	8000b24 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <UART_WaitOnFlagUntilTimeout+0x30>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11b      	bne.n	800325a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003230:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e042      	b.n	80032e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02b      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003276:	d123      	bne.n	80032c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003290:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e00f      	b.n	80032e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d092      	beq.n	8003204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <__errno>:
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <__errno+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4e0d      	ldr	r6, [pc, #52]	; (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fa:	1ba4      	subs	r4, r4, r6
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2500      	movs	r5, #0
 8003300:	42a5      	cmp	r5, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4e0b      	ldr	r6, [pc, #44]	; (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <__libc_init_array+0x44>)
 8003308:	f000 fc26 	bl	8003b58 <_init>
 800330c:	1ba4      	subs	r4, r4, r6
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2500      	movs	r5, #0
 8003312:	42a5      	cmp	r5, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800331c:	4798      	blx	r3
 800331e:	3501      	adds	r5, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003326:	4798      	blx	r3
 8003328:	3501      	adds	r5, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	08003c10 	.word	0x08003c10
 8003330:	08003c10 	.word	0x08003c10
 8003334:	08003c10 	.word	0x08003c10
 8003338:	08003c14 	.word	0x08003c14

0800333c <memset>:
 800333c:	4402      	add	r2, r0
 800333e:	4603      	mov	r3, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <siprintf>:
 800334c:	b40e      	push	{r1, r2, r3}
 800334e:	b500      	push	{lr}
 8003350:	b09c      	sub	sp, #112	; 0x70
 8003352:	ab1d      	add	r3, sp, #116	; 0x74
 8003354:	9002      	str	r0, [sp, #8]
 8003356:	9006      	str	r0, [sp, #24]
 8003358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <siprintf+0x38>)
 800335e:	9107      	str	r1, [sp, #28]
 8003360:	9104      	str	r1, [sp, #16]
 8003362:	4909      	ldr	r1, [pc, #36]	; (8003388 <siprintf+0x3c>)
 8003364:	f853 2b04 	ldr.w	r2, [r3], #4
 8003368:	9105      	str	r1, [sp, #20]
 800336a:	6800      	ldr	r0, [r0, #0]
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	a902      	add	r1, sp, #8
 8003370:	f000 f866 	bl	8003440 <_svfiprintf_r>
 8003374:	9b02      	ldr	r3, [sp, #8]
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	b01c      	add	sp, #112	; 0x70
 800337c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003380:	b003      	add	sp, #12
 8003382:	4770      	bx	lr
 8003384:	2000000c 	.word	0x2000000c
 8003388:	ffff0208 	.word	0xffff0208

0800338c <__ssputs_r>:
 800338c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003390:	688e      	ldr	r6, [r1, #8]
 8003392:	429e      	cmp	r6, r3
 8003394:	4682      	mov	sl, r0
 8003396:	460c      	mov	r4, r1
 8003398:	4690      	mov	r8, r2
 800339a:	4699      	mov	r9, r3
 800339c:	d837      	bhi.n	800340e <__ssputs_r+0x82>
 800339e:	898a      	ldrh	r2, [r1, #12]
 80033a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033a4:	d031      	beq.n	800340a <__ssputs_r+0x7e>
 80033a6:	6825      	ldr	r5, [r4, #0]
 80033a8:	6909      	ldr	r1, [r1, #16]
 80033aa:	1a6f      	subs	r7, r5, r1
 80033ac:	6965      	ldr	r5, [r4, #20]
 80033ae:	2302      	movs	r3, #2
 80033b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80033b8:	f109 0301 	add.w	r3, r9, #1
 80033bc:	443b      	add	r3, r7
 80033be:	429d      	cmp	r5, r3
 80033c0:	bf38      	it	cc
 80033c2:	461d      	movcc	r5, r3
 80033c4:	0553      	lsls	r3, r2, #21
 80033c6:	d530      	bpl.n	800342a <__ssputs_r+0x9e>
 80033c8:	4629      	mov	r1, r5
 80033ca:	f000 fb2b 	bl	8003a24 <_malloc_r>
 80033ce:	4606      	mov	r6, r0
 80033d0:	b950      	cbnz	r0, 80033e8 <__ssputs_r+0x5c>
 80033d2:	230c      	movs	r3, #12
 80033d4:	f8ca 3000 	str.w	r3, [sl]
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e8:	463a      	mov	r2, r7
 80033ea:	6921      	ldr	r1, [r4, #16]
 80033ec:	f000 faa8 	bl	8003940 <memcpy>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	6126      	str	r6, [r4, #16]
 80033fe:	6165      	str	r5, [r4, #20]
 8003400:	443e      	add	r6, r7
 8003402:	1bed      	subs	r5, r5, r7
 8003404:	6026      	str	r6, [r4, #0]
 8003406:	60a5      	str	r5, [r4, #8]
 8003408:	464e      	mov	r6, r9
 800340a:	454e      	cmp	r6, r9
 800340c:	d900      	bls.n	8003410 <__ssputs_r+0x84>
 800340e:	464e      	mov	r6, r9
 8003410:	4632      	mov	r2, r6
 8003412:	4641      	mov	r1, r8
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	f000 fa9e 	bl	8003956 <memmove>
 800341a:	68a3      	ldr	r3, [r4, #8]
 800341c:	1b9b      	subs	r3, r3, r6
 800341e:	60a3      	str	r3, [r4, #8]
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	441e      	add	r6, r3
 8003424:	6026      	str	r6, [r4, #0]
 8003426:	2000      	movs	r0, #0
 8003428:	e7dc      	b.n	80033e4 <__ssputs_r+0x58>
 800342a:	462a      	mov	r2, r5
 800342c:	f000 fb54 	bl	8003ad8 <_realloc_r>
 8003430:	4606      	mov	r6, r0
 8003432:	2800      	cmp	r0, #0
 8003434:	d1e2      	bne.n	80033fc <__ssputs_r+0x70>
 8003436:	6921      	ldr	r1, [r4, #16]
 8003438:	4650      	mov	r0, sl
 800343a:	f000 faa5 	bl	8003988 <_free_r>
 800343e:	e7c8      	b.n	80033d2 <__ssputs_r+0x46>

08003440 <_svfiprintf_r>:
 8003440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003444:	461d      	mov	r5, r3
 8003446:	898b      	ldrh	r3, [r1, #12]
 8003448:	061f      	lsls	r7, r3, #24
 800344a:	b09d      	sub	sp, #116	; 0x74
 800344c:	4680      	mov	r8, r0
 800344e:	460c      	mov	r4, r1
 8003450:	4616      	mov	r6, r2
 8003452:	d50f      	bpl.n	8003474 <_svfiprintf_r+0x34>
 8003454:	690b      	ldr	r3, [r1, #16]
 8003456:	b96b      	cbnz	r3, 8003474 <_svfiprintf_r+0x34>
 8003458:	2140      	movs	r1, #64	; 0x40
 800345a:	f000 fae3 	bl	8003a24 <_malloc_r>
 800345e:	6020      	str	r0, [r4, #0]
 8003460:	6120      	str	r0, [r4, #16]
 8003462:	b928      	cbnz	r0, 8003470 <_svfiprintf_r+0x30>
 8003464:	230c      	movs	r3, #12
 8003466:	f8c8 3000 	str.w	r3, [r8]
 800346a:	f04f 30ff 	mov.w	r0, #4294967295
 800346e:	e0c8      	b.n	8003602 <_svfiprintf_r+0x1c2>
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	6163      	str	r3, [r4, #20]
 8003474:	2300      	movs	r3, #0
 8003476:	9309      	str	r3, [sp, #36]	; 0x24
 8003478:	2320      	movs	r3, #32
 800347a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800347e:	2330      	movs	r3, #48	; 0x30
 8003480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003484:	9503      	str	r5, [sp, #12]
 8003486:	f04f 0b01 	mov.w	fp, #1
 800348a:	4637      	mov	r7, r6
 800348c:	463d      	mov	r5, r7
 800348e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003492:	b10b      	cbz	r3, 8003498 <_svfiprintf_r+0x58>
 8003494:	2b25      	cmp	r3, #37	; 0x25
 8003496:	d13e      	bne.n	8003516 <_svfiprintf_r+0xd6>
 8003498:	ebb7 0a06 	subs.w	sl, r7, r6
 800349c:	d00b      	beq.n	80034b6 <_svfiprintf_r+0x76>
 800349e:	4653      	mov	r3, sl
 80034a0:	4632      	mov	r2, r6
 80034a2:	4621      	mov	r1, r4
 80034a4:	4640      	mov	r0, r8
 80034a6:	f7ff ff71 	bl	800338c <__ssputs_r>
 80034aa:	3001      	adds	r0, #1
 80034ac:	f000 80a4 	beq.w	80035f8 <_svfiprintf_r+0x1b8>
 80034b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b2:	4453      	add	r3, sl
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	783b      	ldrb	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 809d 	beq.w	80035f8 <_svfiprintf_r+0x1b8>
 80034be:	2300      	movs	r3, #0
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	9307      	str	r3, [sp, #28]
 80034cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034d0:	931a      	str	r3, [sp, #104]	; 0x68
 80034d2:	462f      	mov	r7, r5
 80034d4:	2205      	movs	r2, #5
 80034d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034da:	4850      	ldr	r0, [pc, #320]	; (800361c <_svfiprintf_r+0x1dc>)
 80034dc:	f7fc fe78 	bl	80001d0 <memchr>
 80034e0:	9b04      	ldr	r3, [sp, #16]
 80034e2:	b9d0      	cbnz	r0, 800351a <_svfiprintf_r+0xda>
 80034e4:	06d9      	lsls	r1, r3, #27
 80034e6:	bf44      	itt	mi
 80034e8:	2220      	movmi	r2, #32
 80034ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034ee:	071a      	lsls	r2, r3, #28
 80034f0:	bf44      	itt	mi
 80034f2:	222b      	movmi	r2, #43	; 0x2b
 80034f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034f8:	782a      	ldrb	r2, [r5, #0]
 80034fa:	2a2a      	cmp	r2, #42	; 0x2a
 80034fc:	d015      	beq.n	800352a <_svfiprintf_r+0xea>
 80034fe:	9a07      	ldr	r2, [sp, #28]
 8003500:	462f      	mov	r7, r5
 8003502:	2000      	movs	r0, #0
 8003504:	250a      	movs	r5, #10
 8003506:	4639      	mov	r1, r7
 8003508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800350c:	3b30      	subs	r3, #48	; 0x30
 800350e:	2b09      	cmp	r3, #9
 8003510:	d94d      	bls.n	80035ae <_svfiprintf_r+0x16e>
 8003512:	b1b8      	cbz	r0, 8003544 <_svfiprintf_r+0x104>
 8003514:	e00f      	b.n	8003536 <_svfiprintf_r+0xf6>
 8003516:	462f      	mov	r7, r5
 8003518:	e7b8      	b.n	800348c <_svfiprintf_r+0x4c>
 800351a:	4a40      	ldr	r2, [pc, #256]	; (800361c <_svfiprintf_r+0x1dc>)
 800351c:	1a80      	subs	r0, r0, r2
 800351e:	fa0b f000 	lsl.w	r0, fp, r0
 8003522:	4318      	orrs	r0, r3
 8003524:	9004      	str	r0, [sp, #16]
 8003526:	463d      	mov	r5, r7
 8003528:	e7d3      	b.n	80034d2 <_svfiprintf_r+0x92>
 800352a:	9a03      	ldr	r2, [sp, #12]
 800352c:	1d11      	adds	r1, r2, #4
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	9103      	str	r1, [sp, #12]
 8003532:	2a00      	cmp	r2, #0
 8003534:	db01      	blt.n	800353a <_svfiprintf_r+0xfa>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e004      	b.n	8003544 <_svfiprintf_r+0x104>
 800353a:	4252      	negs	r2, r2
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	9207      	str	r2, [sp, #28]
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	783b      	ldrb	r3, [r7, #0]
 8003546:	2b2e      	cmp	r3, #46	; 0x2e
 8003548:	d10c      	bne.n	8003564 <_svfiprintf_r+0x124>
 800354a:	787b      	ldrb	r3, [r7, #1]
 800354c:	2b2a      	cmp	r3, #42	; 0x2a
 800354e:	d133      	bne.n	80035b8 <_svfiprintf_r+0x178>
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	1d1a      	adds	r2, r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	9203      	str	r2, [sp, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	bfb8      	it	lt
 800355c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003560:	3702      	adds	r7, #2
 8003562:	9305      	str	r3, [sp, #20]
 8003564:	4d2e      	ldr	r5, [pc, #184]	; (8003620 <_svfiprintf_r+0x1e0>)
 8003566:	7839      	ldrb	r1, [r7, #0]
 8003568:	2203      	movs	r2, #3
 800356a:	4628      	mov	r0, r5
 800356c:	f7fc fe30 	bl	80001d0 <memchr>
 8003570:	b138      	cbz	r0, 8003582 <_svfiprintf_r+0x142>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	1b40      	subs	r0, r0, r5
 8003576:	fa03 f000 	lsl.w	r0, r3, r0
 800357a:	9b04      	ldr	r3, [sp, #16]
 800357c:	4303      	orrs	r3, r0
 800357e:	3701      	adds	r7, #1
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	7839      	ldrb	r1, [r7, #0]
 8003584:	4827      	ldr	r0, [pc, #156]	; (8003624 <_svfiprintf_r+0x1e4>)
 8003586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800358a:	2206      	movs	r2, #6
 800358c:	1c7e      	adds	r6, r7, #1
 800358e:	f7fc fe1f 	bl	80001d0 <memchr>
 8003592:	2800      	cmp	r0, #0
 8003594:	d038      	beq.n	8003608 <_svfiprintf_r+0x1c8>
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <_svfiprintf_r+0x1e8>)
 8003598:	bb13      	cbnz	r3, 80035e0 <_svfiprintf_r+0x1a0>
 800359a:	9b03      	ldr	r3, [sp, #12]
 800359c:	3307      	adds	r3, #7
 800359e:	f023 0307 	bic.w	r3, r3, #7
 80035a2:	3308      	adds	r3, #8
 80035a4:	9303      	str	r3, [sp, #12]
 80035a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a8:	444b      	add	r3, r9
 80035aa:	9309      	str	r3, [sp, #36]	; 0x24
 80035ac:	e76d      	b.n	800348a <_svfiprintf_r+0x4a>
 80035ae:	fb05 3202 	mla	r2, r5, r2, r3
 80035b2:	2001      	movs	r0, #1
 80035b4:	460f      	mov	r7, r1
 80035b6:	e7a6      	b.n	8003506 <_svfiprintf_r+0xc6>
 80035b8:	2300      	movs	r3, #0
 80035ba:	3701      	adds	r7, #1
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	4619      	mov	r1, r3
 80035c0:	250a      	movs	r5, #10
 80035c2:	4638      	mov	r0, r7
 80035c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035c8:	3a30      	subs	r2, #48	; 0x30
 80035ca:	2a09      	cmp	r2, #9
 80035cc:	d903      	bls.n	80035d6 <_svfiprintf_r+0x196>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0c8      	beq.n	8003564 <_svfiprintf_r+0x124>
 80035d2:	9105      	str	r1, [sp, #20]
 80035d4:	e7c6      	b.n	8003564 <_svfiprintf_r+0x124>
 80035d6:	fb05 2101 	mla	r1, r5, r1, r2
 80035da:	2301      	movs	r3, #1
 80035dc:	4607      	mov	r7, r0
 80035de:	e7f0      	b.n	80035c2 <_svfiprintf_r+0x182>
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4622      	mov	r2, r4
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <_svfiprintf_r+0x1ec>)
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	4640      	mov	r0, r8
 80035ec:	f3af 8000 	nop.w
 80035f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035f4:	4681      	mov	r9, r0
 80035f6:	d1d6      	bne.n	80035a6 <_svfiprintf_r+0x166>
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	065b      	lsls	r3, r3, #25
 80035fc:	f53f af35 	bmi.w	800346a <_svfiprintf_r+0x2a>
 8003600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003602:	b01d      	add	sp, #116	; 0x74
 8003604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003608:	ab03      	add	r3, sp, #12
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4622      	mov	r2, r4
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_svfiprintf_r+0x1ec>)
 8003610:	a904      	add	r1, sp, #16
 8003612:	4640      	mov	r0, r8
 8003614:	f000 f882 	bl	800371c <_printf_i>
 8003618:	e7ea      	b.n	80035f0 <_svfiprintf_r+0x1b0>
 800361a:	bf00      	nop
 800361c:	08003bd4 	.word	0x08003bd4
 8003620:	08003bda 	.word	0x08003bda
 8003624:	08003bde 	.word	0x08003bde
 8003628:	00000000 	.word	0x00000000
 800362c:	0800338d 	.word	0x0800338d

08003630 <_printf_common>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	4691      	mov	r9, r2
 8003636:	461f      	mov	r7, r3
 8003638:	688a      	ldr	r2, [r1, #8]
 800363a:	690b      	ldr	r3, [r1, #16]
 800363c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003640:	4293      	cmp	r3, r2
 8003642:	bfb8      	it	lt
 8003644:	4613      	movlt	r3, r2
 8003646:	f8c9 3000 	str.w	r3, [r9]
 800364a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800364e:	4606      	mov	r6, r0
 8003650:	460c      	mov	r4, r1
 8003652:	b112      	cbz	r2, 800365a <_printf_common+0x2a>
 8003654:	3301      	adds	r3, #1
 8003656:	f8c9 3000 	str.w	r3, [r9]
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	0699      	lsls	r1, r3, #26
 800365e:	bf42      	ittt	mi
 8003660:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003664:	3302      	addmi	r3, #2
 8003666:	f8c9 3000 	strmi.w	r3, [r9]
 800366a:	6825      	ldr	r5, [r4, #0]
 800366c:	f015 0506 	ands.w	r5, r5, #6
 8003670:	d107      	bne.n	8003682 <_printf_common+0x52>
 8003672:	f104 0a19 	add.w	sl, r4, #25
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	f8d9 2000 	ldr.w	r2, [r9]
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	42ab      	cmp	r3, r5
 8003680:	dc28      	bgt.n	80036d4 <_printf_common+0xa4>
 8003682:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	3300      	adds	r3, #0
 800368a:	bf18      	it	ne
 800368c:	2301      	movne	r3, #1
 800368e:	0692      	lsls	r2, r2, #26
 8003690:	d42d      	bmi.n	80036ee <_printf_common+0xbe>
 8003692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003696:	4639      	mov	r1, r7
 8003698:	4630      	mov	r0, r6
 800369a:	47c0      	blx	r8
 800369c:	3001      	adds	r0, #1
 800369e:	d020      	beq.n	80036e2 <_printf_common+0xb2>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	68e5      	ldr	r5, [r4, #12]
 80036a4:	f8d9 2000 	ldr.w	r2, [r9]
 80036a8:	f003 0306 	and.w	r3, r3, #6
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	bf08      	it	eq
 80036b0:	1aad      	subeq	r5, r5, r2
 80036b2:	68a3      	ldr	r3, [r4, #8]
 80036b4:	6922      	ldr	r2, [r4, #16]
 80036b6:	bf0c      	ite	eq
 80036b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036bc:	2500      	movne	r5, #0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfc4      	itt	gt
 80036c2:	1a9b      	subgt	r3, r3, r2
 80036c4:	18ed      	addgt	r5, r5, r3
 80036c6:	f04f 0900 	mov.w	r9, #0
 80036ca:	341a      	adds	r4, #26
 80036cc:	454d      	cmp	r5, r9
 80036ce:	d11a      	bne.n	8003706 <_printf_common+0xd6>
 80036d0:	2000      	movs	r0, #0
 80036d2:	e008      	b.n	80036e6 <_printf_common+0xb6>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4652      	mov	r2, sl
 80036d8:	4639      	mov	r1, r7
 80036da:	4630      	mov	r0, r6
 80036dc:	47c0      	blx	r8
 80036de:	3001      	adds	r0, #1
 80036e0:	d103      	bne.n	80036ea <_printf_common+0xba>
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ea:	3501      	adds	r5, #1
 80036ec:	e7c3      	b.n	8003676 <_printf_common+0x46>
 80036ee:	18e1      	adds	r1, r4, r3
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	2030      	movs	r0, #48	; 0x30
 80036f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036f8:	4422      	add	r2, r4
 80036fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003702:	3302      	adds	r3, #2
 8003704:	e7c5      	b.n	8003692 <_printf_common+0x62>
 8003706:	2301      	movs	r3, #1
 8003708:	4622      	mov	r2, r4
 800370a:	4639      	mov	r1, r7
 800370c:	4630      	mov	r0, r6
 800370e:	47c0      	blx	r8
 8003710:	3001      	adds	r0, #1
 8003712:	d0e6      	beq.n	80036e2 <_printf_common+0xb2>
 8003714:	f109 0901 	add.w	r9, r9, #1
 8003718:	e7d8      	b.n	80036cc <_printf_common+0x9c>
	...

0800371c <_printf_i>:
 800371c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003720:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003724:	460c      	mov	r4, r1
 8003726:	7e09      	ldrb	r1, [r1, #24]
 8003728:	b085      	sub	sp, #20
 800372a:	296e      	cmp	r1, #110	; 0x6e
 800372c:	4617      	mov	r7, r2
 800372e:	4606      	mov	r6, r0
 8003730:	4698      	mov	r8, r3
 8003732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003734:	f000 80b3 	beq.w	800389e <_printf_i+0x182>
 8003738:	d822      	bhi.n	8003780 <_printf_i+0x64>
 800373a:	2963      	cmp	r1, #99	; 0x63
 800373c:	d036      	beq.n	80037ac <_printf_i+0x90>
 800373e:	d80a      	bhi.n	8003756 <_printf_i+0x3a>
 8003740:	2900      	cmp	r1, #0
 8003742:	f000 80b9 	beq.w	80038b8 <_printf_i+0x19c>
 8003746:	2958      	cmp	r1, #88	; 0x58
 8003748:	f000 8083 	beq.w	8003852 <_printf_i+0x136>
 800374c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003750:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003754:	e032      	b.n	80037bc <_printf_i+0xa0>
 8003756:	2964      	cmp	r1, #100	; 0x64
 8003758:	d001      	beq.n	800375e <_printf_i+0x42>
 800375a:	2969      	cmp	r1, #105	; 0x69
 800375c:	d1f6      	bne.n	800374c <_printf_i+0x30>
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	0605      	lsls	r5, r0, #24
 8003764:	f103 0104 	add.w	r1, r3, #4
 8003768:	d52a      	bpl.n	80037c0 <_printf_i+0xa4>
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da03      	bge.n	800377a <_printf_i+0x5e>
 8003772:	222d      	movs	r2, #45	; 0x2d
 8003774:	425b      	negs	r3, r3
 8003776:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800377a:	486f      	ldr	r0, [pc, #444]	; (8003938 <_printf_i+0x21c>)
 800377c:	220a      	movs	r2, #10
 800377e:	e039      	b.n	80037f4 <_printf_i+0xd8>
 8003780:	2973      	cmp	r1, #115	; 0x73
 8003782:	f000 809d 	beq.w	80038c0 <_printf_i+0x1a4>
 8003786:	d808      	bhi.n	800379a <_printf_i+0x7e>
 8003788:	296f      	cmp	r1, #111	; 0x6f
 800378a:	d020      	beq.n	80037ce <_printf_i+0xb2>
 800378c:	2970      	cmp	r1, #112	; 0x70
 800378e:	d1dd      	bne.n	800374c <_printf_i+0x30>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	f043 0320 	orr.w	r3, r3, #32
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	e003      	b.n	80037a2 <_printf_i+0x86>
 800379a:	2975      	cmp	r1, #117	; 0x75
 800379c:	d017      	beq.n	80037ce <_printf_i+0xb2>
 800379e:	2978      	cmp	r1, #120	; 0x78
 80037a0:	d1d4      	bne.n	800374c <_printf_i+0x30>
 80037a2:	2378      	movs	r3, #120	; 0x78
 80037a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037a8:	4864      	ldr	r0, [pc, #400]	; (800393c <_printf_i+0x220>)
 80037aa:	e055      	b.n	8003858 <_printf_i+0x13c>
 80037ac:	6813      	ldr	r3, [r2, #0]
 80037ae:	1d19      	adds	r1, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6011      	str	r1, [r2, #0]
 80037b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037bc:	2301      	movs	r3, #1
 80037be:	e08c      	b.n	80038da <_printf_i+0x1be>
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6011      	str	r1, [r2, #0]
 80037c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c8:	bf18      	it	ne
 80037ca:	b21b      	sxthne	r3, r3
 80037cc:	e7cf      	b.n	800376e <_printf_i+0x52>
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	6825      	ldr	r5, [r4, #0]
 80037d2:	1d18      	adds	r0, r3, #4
 80037d4:	6010      	str	r0, [r2, #0]
 80037d6:	0628      	lsls	r0, r5, #24
 80037d8:	d501      	bpl.n	80037de <_printf_i+0xc2>
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	e002      	b.n	80037e4 <_printf_i+0xc8>
 80037de:	0668      	lsls	r0, r5, #25
 80037e0:	d5fb      	bpl.n	80037da <_printf_i+0xbe>
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	4854      	ldr	r0, [pc, #336]	; (8003938 <_printf_i+0x21c>)
 80037e6:	296f      	cmp	r1, #111	; 0x6f
 80037e8:	bf14      	ite	ne
 80037ea:	220a      	movne	r2, #10
 80037ec:	2208      	moveq	r2, #8
 80037ee:	2100      	movs	r1, #0
 80037f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f4:	6865      	ldr	r5, [r4, #4]
 80037f6:	60a5      	str	r5, [r4, #8]
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	f2c0 8095 	blt.w	8003928 <_printf_i+0x20c>
 80037fe:	6821      	ldr	r1, [r4, #0]
 8003800:	f021 0104 	bic.w	r1, r1, #4
 8003804:	6021      	str	r1, [r4, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d13d      	bne.n	8003886 <_printf_i+0x16a>
 800380a:	2d00      	cmp	r5, #0
 800380c:	f040 808e 	bne.w	800392c <_printf_i+0x210>
 8003810:	4665      	mov	r5, ip
 8003812:	2a08      	cmp	r2, #8
 8003814:	d10b      	bne.n	800382e <_printf_i+0x112>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	07db      	lsls	r3, r3, #31
 800381a:	d508      	bpl.n	800382e <_printf_i+0x112>
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	6862      	ldr	r2, [r4, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	bfde      	ittt	le
 8003824:	2330      	movle	r3, #48	; 0x30
 8003826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800382a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800382e:	ebac 0305 	sub.w	r3, ip, r5
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	f8cd 8000 	str.w	r8, [sp]
 8003838:	463b      	mov	r3, r7
 800383a:	aa03      	add	r2, sp, #12
 800383c:	4621      	mov	r1, r4
 800383e:	4630      	mov	r0, r6
 8003840:	f7ff fef6 	bl	8003630 <_printf_common>
 8003844:	3001      	adds	r0, #1
 8003846:	d14d      	bne.n	80038e4 <_printf_i+0x1c8>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	b005      	add	sp, #20
 800384e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003852:	4839      	ldr	r0, [pc, #228]	; (8003938 <_printf_i+0x21c>)
 8003854:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	6821      	ldr	r1, [r4, #0]
 800385c:	1d1d      	adds	r5, r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6015      	str	r5, [r2, #0]
 8003862:	060a      	lsls	r2, r1, #24
 8003864:	d50b      	bpl.n	800387e <_printf_i+0x162>
 8003866:	07ca      	lsls	r2, r1, #31
 8003868:	bf44      	itt	mi
 800386a:	f041 0120 	orrmi.w	r1, r1, #32
 800386e:	6021      	strmi	r1, [r4, #0]
 8003870:	b91b      	cbnz	r3, 800387a <_printf_i+0x15e>
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	f022 0220 	bic.w	r2, r2, #32
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	2210      	movs	r2, #16
 800387c:	e7b7      	b.n	80037ee <_printf_i+0xd2>
 800387e:	064d      	lsls	r5, r1, #25
 8003880:	bf48      	it	mi
 8003882:	b29b      	uxthmi	r3, r3
 8003884:	e7ef      	b.n	8003866 <_printf_i+0x14a>
 8003886:	4665      	mov	r5, ip
 8003888:	fbb3 f1f2 	udiv	r1, r3, r2
 800388c:	fb02 3311 	mls	r3, r2, r1, r3
 8003890:	5cc3      	ldrb	r3, [r0, r3]
 8003892:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003896:	460b      	mov	r3, r1
 8003898:	2900      	cmp	r1, #0
 800389a:	d1f5      	bne.n	8003888 <_printf_i+0x16c>
 800389c:	e7b9      	b.n	8003812 <_printf_i+0xf6>
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	6825      	ldr	r5, [r4, #0]
 80038a2:	6961      	ldr	r1, [r4, #20]
 80038a4:	1d18      	adds	r0, r3, #4
 80038a6:	6010      	str	r0, [r2, #0]
 80038a8:	0628      	lsls	r0, r5, #24
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	d501      	bpl.n	80038b2 <_printf_i+0x196>
 80038ae:	6019      	str	r1, [r3, #0]
 80038b0:	e002      	b.n	80038b8 <_printf_i+0x19c>
 80038b2:	066a      	lsls	r2, r5, #25
 80038b4:	d5fb      	bpl.n	80038ae <_printf_i+0x192>
 80038b6:	8019      	strh	r1, [r3, #0]
 80038b8:	2300      	movs	r3, #0
 80038ba:	6123      	str	r3, [r4, #16]
 80038bc:	4665      	mov	r5, ip
 80038be:	e7b9      	b.n	8003834 <_printf_i+0x118>
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	1d19      	adds	r1, r3, #4
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	681d      	ldr	r5, [r3, #0]
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	2100      	movs	r1, #0
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7fc fc7f 	bl	80001d0 <memchr>
 80038d2:	b108      	cbz	r0, 80038d8 <_printf_i+0x1bc>
 80038d4:	1b40      	subs	r0, r0, r5
 80038d6:	6060      	str	r0, [r4, #4]
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	6123      	str	r3, [r4, #16]
 80038dc:	2300      	movs	r3, #0
 80038de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e2:	e7a7      	b.n	8003834 <_printf_i+0x118>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	462a      	mov	r2, r5
 80038e8:	4639      	mov	r1, r7
 80038ea:	4630      	mov	r0, r6
 80038ec:	47c0      	blx	r8
 80038ee:	3001      	adds	r0, #1
 80038f0:	d0aa      	beq.n	8003848 <_printf_i+0x12c>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	079b      	lsls	r3, r3, #30
 80038f6:	d413      	bmi.n	8003920 <_printf_i+0x204>
 80038f8:	68e0      	ldr	r0, [r4, #12]
 80038fa:	9b03      	ldr	r3, [sp, #12]
 80038fc:	4298      	cmp	r0, r3
 80038fe:	bfb8      	it	lt
 8003900:	4618      	movlt	r0, r3
 8003902:	e7a3      	b.n	800384c <_printf_i+0x130>
 8003904:	2301      	movs	r3, #1
 8003906:	464a      	mov	r2, r9
 8003908:	4639      	mov	r1, r7
 800390a:	4630      	mov	r0, r6
 800390c:	47c0      	blx	r8
 800390e:	3001      	adds	r0, #1
 8003910:	d09a      	beq.n	8003848 <_printf_i+0x12c>
 8003912:	3501      	adds	r5, #1
 8003914:	68e3      	ldr	r3, [r4, #12]
 8003916:	9a03      	ldr	r2, [sp, #12]
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	42ab      	cmp	r3, r5
 800391c:	dcf2      	bgt.n	8003904 <_printf_i+0x1e8>
 800391e:	e7eb      	b.n	80038f8 <_printf_i+0x1dc>
 8003920:	2500      	movs	r5, #0
 8003922:	f104 0919 	add.w	r9, r4, #25
 8003926:	e7f5      	b.n	8003914 <_printf_i+0x1f8>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ac      	bne.n	8003886 <_printf_i+0x16a>
 800392c:	7803      	ldrb	r3, [r0, #0]
 800392e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003932:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003936:	e76c      	b.n	8003812 <_printf_i+0xf6>
 8003938:	08003be5 	.word	0x08003be5
 800393c:	08003bf6 	.word	0x08003bf6

08003940 <memcpy>:
 8003940:	b510      	push	{r4, lr}
 8003942:	1e43      	subs	r3, r0, #1
 8003944:	440a      	add	r2, r1
 8003946:	4291      	cmp	r1, r2
 8003948:	d100      	bne.n	800394c <memcpy+0xc>
 800394a:	bd10      	pop	{r4, pc}
 800394c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003954:	e7f7      	b.n	8003946 <memcpy+0x6>

08003956 <memmove>:
 8003956:	4288      	cmp	r0, r1
 8003958:	b510      	push	{r4, lr}
 800395a:	eb01 0302 	add.w	r3, r1, r2
 800395e:	d807      	bhi.n	8003970 <memmove+0x1a>
 8003960:	1e42      	subs	r2, r0, #1
 8003962:	4299      	cmp	r1, r3
 8003964:	d00a      	beq.n	800397c <memmove+0x26>
 8003966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800396a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800396e:	e7f8      	b.n	8003962 <memmove+0xc>
 8003970:	4283      	cmp	r3, r0
 8003972:	d9f5      	bls.n	8003960 <memmove+0xa>
 8003974:	1881      	adds	r1, r0, r2
 8003976:	1ad2      	subs	r2, r2, r3
 8003978:	42d3      	cmn	r3, r2
 800397a:	d100      	bne.n	800397e <memmove+0x28>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003982:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003986:	e7f7      	b.n	8003978 <memmove+0x22>

08003988 <_free_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	2900      	cmp	r1, #0
 800398e:	d045      	beq.n	8003a1c <_free_r+0x94>
 8003990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003994:	1f0c      	subs	r4, r1, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	bfb8      	it	lt
 800399a:	18e4      	addlt	r4, r4, r3
 800399c:	f000 f8d2 	bl	8003b44 <__malloc_lock>
 80039a0:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <_free_r+0x98>)
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	4610      	mov	r0, r2
 80039a6:	b933      	cbnz	r3, 80039b6 <_free_r+0x2e>
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	6014      	str	r4, [r2, #0]
 80039ac:	4628      	mov	r0, r5
 80039ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039b2:	f000 b8c8 	b.w	8003b46 <__malloc_unlock>
 80039b6:	42a3      	cmp	r3, r4
 80039b8:	d90c      	bls.n	80039d4 <_free_r+0x4c>
 80039ba:	6821      	ldr	r1, [r4, #0]
 80039bc:	1862      	adds	r2, r4, r1
 80039be:	4293      	cmp	r3, r2
 80039c0:	bf04      	itt	eq
 80039c2:	681a      	ldreq	r2, [r3, #0]
 80039c4:	685b      	ldreq	r3, [r3, #4]
 80039c6:	6063      	str	r3, [r4, #4]
 80039c8:	bf04      	itt	eq
 80039ca:	1852      	addeq	r2, r2, r1
 80039cc:	6022      	streq	r2, [r4, #0]
 80039ce:	6004      	str	r4, [r0, #0]
 80039d0:	e7ec      	b.n	80039ac <_free_r+0x24>
 80039d2:	4613      	mov	r3, r2
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	b10a      	cbz	r2, 80039dc <_free_r+0x54>
 80039d8:	42a2      	cmp	r2, r4
 80039da:	d9fa      	bls.n	80039d2 <_free_r+0x4a>
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	1858      	adds	r0, r3, r1
 80039e0:	42a0      	cmp	r0, r4
 80039e2:	d10b      	bne.n	80039fc <_free_r+0x74>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	4401      	add	r1, r0
 80039e8:	1858      	adds	r0, r3, r1
 80039ea:	4282      	cmp	r2, r0
 80039ec:	6019      	str	r1, [r3, #0]
 80039ee:	d1dd      	bne.n	80039ac <_free_r+0x24>
 80039f0:	6810      	ldr	r0, [r2, #0]
 80039f2:	6852      	ldr	r2, [r2, #4]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	4401      	add	r1, r0
 80039f8:	6019      	str	r1, [r3, #0]
 80039fa:	e7d7      	b.n	80039ac <_free_r+0x24>
 80039fc:	d902      	bls.n	8003a04 <_free_r+0x7c>
 80039fe:	230c      	movs	r3, #12
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	e7d3      	b.n	80039ac <_free_r+0x24>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	1821      	adds	r1, r4, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	bf04      	itt	eq
 8003a0c:	6811      	ldreq	r1, [r2, #0]
 8003a0e:	6852      	ldreq	r2, [r2, #4]
 8003a10:	6062      	str	r2, [r4, #4]
 8003a12:	bf04      	itt	eq
 8003a14:	1809      	addeq	r1, r1, r0
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	605c      	str	r4, [r3, #4]
 8003a1a:	e7c7      	b.n	80039ac <_free_r+0x24>
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000090 	.word	0x20000090

08003a24 <_malloc_r>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	1ccd      	adds	r5, r1, #3
 8003a28:	f025 0503 	bic.w	r5, r5, #3
 8003a2c:	3508      	adds	r5, #8
 8003a2e:	2d0c      	cmp	r5, #12
 8003a30:	bf38      	it	cc
 8003a32:	250c      	movcc	r5, #12
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	4606      	mov	r6, r0
 8003a38:	db01      	blt.n	8003a3e <_malloc_r+0x1a>
 8003a3a:	42a9      	cmp	r1, r5
 8003a3c:	d903      	bls.n	8003a46 <_malloc_r+0x22>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	6033      	str	r3, [r6, #0]
 8003a42:	2000      	movs	r0, #0
 8003a44:	bd70      	pop	{r4, r5, r6, pc}
 8003a46:	f000 f87d 	bl	8003b44 <__malloc_lock>
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <_malloc_r+0xac>)
 8003a4c:	6814      	ldr	r4, [r2, #0]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	b991      	cbnz	r1, 8003a78 <_malloc_r+0x54>
 8003a52:	4c20      	ldr	r4, [pc, #128]	; (8003ad4 <_malloc_r+0xb0>)
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	b91b      	cbnz	r3, 8003a60 <_malloc_r+0x3c>
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 f863 	bl	8003b24 <_sbrk_r>
 8003a5e:	6020      	str	r0, [r4, #0]
 8003a60:	4629      	mov	r1, r5
 8003a62:	4630      	mov	r0, r6
 8003a64:	f000 f85e 	bl	8003b24 <_sbrk_r>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d124      	bne.n	8003ab6 <_malloc_r+0x92>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	6033      	str	r3, [r6, #0]
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 f868 	bl	8003b46 <__malloc_unlock>
 8003a76:	e7e4      	b.n	8003a42 <_malloc_r+0x1e>
 8003a78:	680b      	ldr	r3, [r1, #0]
 8003a7a:	1b5b      	subs	r3, r3, r5
 8003a7c:	d418      	bmi.n	8003ab0 <_malloc_r+0x8c>
 8003a7e:	2b0b      	cmp	r3, #11
 8003a80:	d90f      	bls.n	8003aa2 <_malloc_r+0x7e>
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	50cd      	str	r5, [r1, r3]
 8003a86:	18cc      	adds	r4, r1, r3
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f000 f85c 	bl	8003b46 <__malloc_unlock>
 8003a8e:	f104 000b 	add.w	r0, r4, #11
 8003a92:	1d23      	adds	r3, r4, #4
 8003a94:	f020 0007 	bic.w	r0, r0, #7
 8003a98:	1ac3      	subs	r3, r0, r3
 8003a9a:	d0d3      	beq.n	8003a44 <_malloc_r+0x20>
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	50e2      	str	r2, [r4, r3]
 8003aa0:	e7d0      	b.n	8003a44 <_malloc_r+0x20>
 8003aa2:	428c      	cmp	r4, r1
 8003aa4:	684b      	ldr	r3, [r1, #4]
 8003aa6:	bf16      	itet	ne
 8003aa8:	6063      	strne	r3, [r4, #4]
 8003aaa:	6013      	streq	r3, [r2, #0]
 8003aac:	460c      	movne	r4, r1
 8003aae:	e7eb      	b.n	8003a88 <_malloc_r+0x64>
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	6849      	ldr	r1, [r1, #4]
 8003ab4:	e7cc      	b.n	8003a50 <_malloc_r+0x2c>
 8003ab6:	1cc4      	adds	r4, r0, #3
 8003ab8:	f024 0403 	bic.w	r4, r4, #3
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d005      	beq.n	8003acc <_malloc_r+0xa8>
 8003ac0:	1a21      	subs	r1, r4, r0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 f82e 	bl	8003b24 <_sbrk_r>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d0cf      	beq.n	8003a6c <_malloc_r+0x48>
 8003acc:	6025      	str	r5, [r4, #0]
 8003ace:	e7db      	b.n	8003a88 <_malloc_r+0x64>
 8003ad0:	20000090 	.word	0x20000090
 8003ad4:	20000094 	.word	0x20000094

08003ad8 <_realloc_r>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	4607      	mov	r7, r0
 8003adc:	4614      	mov	r4, r2
 8003ade:	460e      	mov	r6, r1
 8003ae0:	b921      	cbnz	r1, 8003aec <_realloc_r+0x14>
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ae8:	f7ff bf9c 	b.w	8003a24 <_malloc_r>
 8003aec:	b922      	cbnz	r2, 8003af8 <_realloc_r+0x20>
 8003aee:	f7ff ff4b 	bl	8003988 <_free_r>
 8003af2:	4625      	mov	r5, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af8:	f000 f826 	bl	8003b48 <_malloc_usable_size_r>
 8003afc:	42a0      	cmp	r0, r4
 8003afe:	d20f      	bcs.n	8003b20 <_realloc_r+0x48>
 8003b00:	4621      	mov	r1, r4
 8003b02:	4638      	mov	r0, r7
 8003b04:	f7ff ff8e 	bl	8003a24 <_malloc_r>
 8003b08:	4605      	mov	r5, r0
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0f2      	beq.n	8003af4 <_realloc_r+0x1c>
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4622      	mov	r2, r4
 8003b12:	f7ff ff15 	bl	8003940 <memcpy>
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f7ff ff35 	bl	8003988 <_free_r>
 8003b1e:	e7e9      	b.n	8003af4 <_realloc_r+0x1c>
 8003b20:	4635      	mov	r5, r6
 8003b22:	e7e7      	b.n	8003af4 <_realloc_r+0x1c>

08003b24 <_sbrk_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4c06      	ldr	r4, [pc, #24]	; (8003b40 <_sbrk_r+0x1c>)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	f7fc fefa 	bl	8000928 <_sbrk>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_sbrk_r+0x1a>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_sbrk_r+0x1a>
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	20000168 	.word	0x20000168

08003b44 <__malloc_lock>:
 8003b44:	4770      	bx	lr

08003b46 <__malloc_unlock>:
 8003b46:	4770      	bx	lr

08003b48 <_malloc_usable_size_r>:
 8003b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4c:	1f18      	subs	r0, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bfbc      	itt	lt
 8003b52:	580b      	ldrlt	r3, [r1, r0]
 8003b54:	18c0      	addlt	r0, r0, r3
 8003b56:	4770      	bx	lr

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
