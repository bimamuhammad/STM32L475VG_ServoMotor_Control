
STM32L475VG_BlinkyTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ac4  08001ac4  00011ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b04  08001b04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b04  08001b04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b04  08001b04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001b18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001b18  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008afb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012a3  00000000  00000000  00028b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  00029de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d0  00000000  00000000  0002a758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ea2  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007473  00000000  00000000  0004feca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8864  00000000  00000000  0005733d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013fba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  0013fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001aac 	.word	0x08001aac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001aac 	.word	0x08001aac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 f99c 	bl	800050a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f821 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f88d 	bl	80002f4 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001da:	f000 f863 	bl	80002a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //Start Timer
  HAL_TIM_Base_Start(&htim16);
 80001de:	480c      	ldr	r0, [pc, #48]	; (8000210 <main+0x48>)
 80001e0:	f001 fb36 	bl	8001850 <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0x48>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ea:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //if enough time has passed (1 second), toggle LED and get new time stamp
	  if(__HAL_TIM_GET_COUNTER(&htim16) -timer_val >= 1000)
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <main+0x48>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	1ad3      	subs	r3, r2, r3
 80001f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001fa:	d3f7      	bcc.n	80001ec <main+0x24>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80001fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x4c>)
 8000202:	f000 fc9d 	bl	8000b40 <HAL_GPIO_TogglePin>
		  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8000206:	4b02      	ldr	r3, [pc, #8]	; (8000210 <main+0x48>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800020c:	80fb      	strh	r3, [r7, #6]
	  if(__HAL_TIM_GET_COUNTER(&htim16) -timer_val >= 1000)
 800020e:	e7ed      	b.n	80001ec <main+0x24>
 8000210:	20000028 	.word	0x20000028
 8000214:	48000400 	.word	0x48000400

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	; 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fc38 	bl	8001a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023a:	2310      	movs	r3, #16
 800023c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000246:	2360      	movs	r3, #96	; 0x60
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fcf2 	bl	8000c3c <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800025e:	f000 f87b 	bl	8000358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f8c4 	bl	8001408 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000286:	f000 f867 	bl	8000358 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800028a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800028e:	f000 fc7f 	bl	8000b90 <HAL_PWREx_ControlVoltageScaling>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000298:	f000 f85e 	bl	8000358 <Error_Handler>
  }
}
 800029c:	bf00      	nop
 800029e:	3758      	adds	r7, #88	; 0x58
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MX_TIM16_Init+0x48>)
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <MX_TIM16_Init+0x4c>)
 80002ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000 - 1;
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_TIM16_Init+0x48>)
 80002b0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002b4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <MX_TIM16_Init+0x48>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_TIM16_Init+0x48>)
 80002be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_TIM16_Init+0x48>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_TIM16_Init+0x48>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_TIM16_Init+0x48>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_TIM16_Init+0x48>)
 80002d8:	f001 fa62 	bl	80017a0 <HAL_TIM_Base_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80002e2:	f000 f839 	bl	8000358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40014400 	.word	0x40014400

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_GPIO_Init+0x5c>)
 800030a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <MX_GPIO_Init+0x5c>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_GPIO_Init+0x5c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000318:	f003 0302 	and.w	r3, r3, #2
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <MX_GPIO_Init+0x60>)
 8000328:	f000 fbf2 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800032c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000330:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_GPIO_Init+0x60>)
 8000344:	f000 fa3c 	bl	80007c0 <HAL_GPIO_Init>

}
 8000348:	bf00      	nop
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	48000400 	.word	0x48000400

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x44>)
 8000370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x44>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6613      	str	r3, [r2, #96]	; 0x60
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x44>)
 800037c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <HAL_MspInit+0x44>)
 8000388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <HAL_MspInit+0x44>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	6593      	str	r3, [r2, #88]	; 0x58
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_MspInit+0x44>)
 8000394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <HAL_TIM_Base_MspInit+0x38>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d10b      	bne.n	80003da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_TIM_Base_MspInit+0x3c>)
 80003c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c6:	4a09      	ldr	r2, [pc, #36]	; (80003ec <HAL_TIM_Base_MspInit+0x3c>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6613      	str	r3, [r2, #96]	; 0x60
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <HAL_TIM_Base_MspInit+0x3c>)
 80003d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40014400 	.word	0x40014400
 80003ec:	40021000 	.word	0x40021000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <MemManage_Handler+0x4>

0800040a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <BusFault_Handler+0x4>

08000410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <UsageFault_Handler+0x4>

08000416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000444:	f000 f8b6 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000450:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <SystemInit+0x64>)
 8000452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <SystemInit+0x64>)
 8000458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800045c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <SystemInit+0x68>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <SystemInit+0x68>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <SystemInit+0x68>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <SystemInit+0x68>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <SystemInit+0x68>)
 8000478:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800047c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <SystemInit+0x68>)
 8000484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000488:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <SystemInit+0x68>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <SystemInit+0x68>)
 8000490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <SystemInit+0x68>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <SystemInit+0x64>)
 800049e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004a2:	609a      	str	r2, [r3, #8]
#endif
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00
 80004b4:	40021000 	.word	0x40021000

080004b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004bc:	f7ff ffc6 	bl	800044c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004c2:	e003      	b.n	80004cc <LoopCopyDataInit>

080004c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004ca:	3104      	adds	r1, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004cc:	480a      	ldr	r0, [pc, #40]	; (80004f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80004d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004d4:	d3f6      	bcc.n	80004c4 <CopyDataInit>
	ldr	r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004d8:	e002      	b.n	80004e0 <LoopFillZerobss>

080004da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004dc:	f842 3b04 	str.w	r3, [r2], #4

080004e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <LoopForever+0x16>)
	cmp	r2, r3
 80004e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004e4:	d3f9      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e6:	f001 fab5 	bl	8001a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ea:	f7ff fe6d 	bl	80001c8 <main>

080004ee <LoopForever>:

LoopForever:
    b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004f4:	08001b0c 	.word	0x08001b0c
	ldr	r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004fc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000500:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000504:	20000078 	.word	0x20000078

08000508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_2_IRQHandler>

0800050a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f91f 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f80e 	bl	800053c <HAL_InitTick>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e001      	b.n	8000530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800052c:	f7ff ff1c 	bl	8000368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000530:	79fb      	ldrb	r3, [r7, #7]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d023      	beq.n	8000598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_InitTick+0x70>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <HAL_InitTick+0x6c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f91d 	bl	80007a6 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10f      	bne.n	8000592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d809      	bhi.n	800058c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f000 f8f5 	bl	800076e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_InitTick+0x74>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	e007      	b.n	800059c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e004      	b.n	800059c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e001      	b.n	800059c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000074 	.word	0x20000074

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000074 	.word	0x20000074

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ce:	e17f      	b.n	8000ad0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 8171 	beq.w	8000aca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d00b      	beq.n	8000808 <HAL_GPIO_Init+0x48>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d007      	beq.n	8000808 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fc:	2b11      	cmp	r3, #17
 80007fe:	d003      	beq.n	8000808 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b12      	cmp	r3, #18
 8000806:	d130      	bne.n	800086a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	2203      	movs	r2, #3
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68da      	ldr	r2, [r3, #12]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4313      	orrs	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800083e:	2201      	movs	r2, #1
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	f003 0201 	and.w	r2, r3, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	4313      	orrs	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	2b03      	cmp	r3, #3
 8000874:	d118      	bne.n	80008a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800087c:	2201      	movs	r2, #1
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4013      	ands	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	08db      	lsrs	r3, r3, #3
 8000892:	f003 0201 	and.w	r2, r3, #1
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x128>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b12      	cmp	r3, #18
 80008e6:	d123      	bne.n	8000930 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	220f      	movs	r2, #15
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	6939      	ldr	r1, [r7, #16]
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0203 	and.w	r2, r3, #3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80ac 	beq.w	8000aca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a5d      	ldr	r2, [pc, #372]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b5b      	ldr	r3, [pc, #364]	; (8000aec <HAL_GPIO_Init+0x32c>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800098a:	4a59      	ldr	r2, [pc, #356]	; (8000af0 <HAL_GPIO_Init+0x330>)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	3302      	adds	r3, #2
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009b4:	d025      	beq.n	8000a02 <HAL_GPIO_Init+0x242>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <HAL_GPIO_Init+0x334>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d01f      	beq.n	80009fe <HAL_GPIO_Init+0x23e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4d      	ldr	r2, [pc, #308]	; (8000af8 <HAL_GPIO_Init+0x338>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d019      	beq.n	80009fa <HAL_GPIO_Init+0x23a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <HAL_GPIO_Init+0x33c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0x236>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4b      	ldr	r2, [pc, #300]	; (8000b00 <HAL_GPIO_Init+0x340>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00d      	beq.n	80009f2 <HAL_GPIO_Init+0x232>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x344>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d007      	beq.n	80009ee <HAL_GPIO_Init+0x22e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <HAL_GPIO_Init+0x348>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_GPIO_Init+0x22a>
 80009e6:	2306      	movs	r3, #6
 80009e8:	e00c      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009ea:	2307      	movs	r3, #7
 80009ec:	e00a      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e008      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009f2:	2304      	movs	r3, #4
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x244>
 8000a02:	2300      	movs	r3, #0
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	f002 0203 	and.w	r2, r2, #3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a14:	4936      	ldr	r1, [pc, #216]	; (8000af0 <HAL_GPIO_Init+0x330>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_GPIO_Init+0x34c>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f47f ae78 	bne.w	80007d0 <HAL_GPIO_Init+0x10>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	371c      	adds	r7, #28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	48001000 	.word	0x48001000
 8000b04:	48001400 	.word	0x48001400
 8000b08:	48001800 	.word	0x48001800
 8000b0c:	40010400 	.word	0x40010400

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4013      	ands	r3, r2
 8000b58:	041a      	lsls	r2, r3, #16
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43d9      	mvns	r1, r3
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	400b      	ands	r3, r1
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40007000 	.word	0x40007000

08000b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9e:	d130      	bne.n	8000c02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bac:	d038      	beq.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2232      	movs	r2, #50	; 0x32
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd4:	e002      	b.n	8000bdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be8:	d102      	bne.n	8000bf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f2      	bne.n	8000bd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfc:	d110      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e00f      	b.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d007      	beq.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c18:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40007000 	.word	0x40007000
 8000c34:	20000000 	.word	0x20000000
 8000c38:	431bde83 	.word	0x431bde83

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e3d4      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4e:	4ba1      	ldr	r3, [pc, #644]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c58:	4b9e      	ldr	r3, [pc, #632]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80e4 	beq.w	8000e38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d007      	beq.n	8000c86 <HAL_RCC_OscConfig+0x4a>
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b0c      	cmp	r3, #12
 8000c7a:	f040 808b 	bne.w	8000d94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	f040 8087 	bne.w	8000d94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c86:	4b93      	ldr	r3, [pc, #588]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <HAL_RCC_OscConfig+0x62>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e3ac      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	4b8c      	ldr	r3, [pc, #560]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x7c>
 8000cae:	4b89      	ldr	r3, [pc, #548]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb6:	e005      	b.n	8000cc4 <HAL_RCC_OscConfig+0x88>
 8000cb8:	4b86      	ldr	r3, [pc, #536]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d223      	bcs.n	8000d10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fd07 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e38d      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cdc:	4b7d      	ldr	r3, [pc, #500]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7c      	ldr	r2, [pc, #496]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b7a      	ldr	r3, [pc, #488]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	4977      	ldr	r1, [pc, #476]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cfa:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4972      	ldr	r1, [pc, #456]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
 8000d0e:	e025      	b.n	8000d5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a6f      	ldr	r2, [pc, #444]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	496a      	ldr	r1, [pc, #424]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2e:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	4965      	ldr	r1, [pc, #404]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fcc7 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e34d      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d5c:	f000 fc36 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 8000d60:	4601      	mov	r1, r0
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4a5a      	ldr	r2, [pc, #360]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa21 f303 	lsr.w	r3, r1, r3
 8000d78:	4a58      	ldr	r2, [pc, #352]	; (8000edc <HAL_RCC_OscConfig+0x2a0>)
 8000d7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_RCC_OscConfig+0x2a4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbdb 	bl	800053c <HAL_InitTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d052      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	e331      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d032      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc18 	bl	80005dc <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc14 	bl	80005dc <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e31a      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc2:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	493b      	ldr	r1, [pc, #236]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	4936      	ldr	r1, [pc, #216]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
 8000e00:	e01a      	b.n	8000e38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fbe5 	bl	80005dc <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e16:	f7ff fbe1 	bl	80005dc <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e2e7      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f0      	bne.n	8000e16 <HAL_RCC_OscConfig+0x1da>
 8000e34:	e000      	b.n	8000e38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d074      	beq.n	8000f2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x21a>
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d10e      	bne.n	8000e6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d10b      	bne.n	8000e6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d064      	beq.n	8000f2c <HAL_RCC_OscConfig+0x2f0>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d160      	bne.n	8000f2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e2c4      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e76:	d106      	bne.n	8000e86 <HAL_RCC_OscConfig+0x24a>
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e01d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x286>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x26e>
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e00b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x286>
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_RCC_OscConfig+0x298>)
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d01c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eca:	f7ff fb87 	bl	80005dc <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed0:	e011      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2ba>
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	08001ac4 	.word	0x08001ac4
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fb7a 	bl	80005dc <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e280      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef6:	4baf      	ldr	r3, [pc, #700]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x2a8>
 8000f02:	e014      	b.n	8000f2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f04:	f7ff fb6a 	bl	80005dc <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fb66 	bl	80005dc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e26c      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1e:	4ba5      	ldr	r3, [pc, #660]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x2d0>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d060      	beq.n	8000ffc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_OscConfig+0x310>
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d119      	bne.n	8000f7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d116      	bne.n	8000f7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f4c:	4b99      	ldr	r3, [pc, #612]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x328>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e249      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f64:	4b93      	ldr	r3, [pc, #588]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	4990      	ldr	r1, [pc, #576]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f78:	e040      	b.n	8000ffc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d023      	beq.n	8000fca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f82:	4b8c      	ldr	r3, [pc, #560]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a8b      	ldr	r2, [pc, #556]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb25 	bl	80005dc <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f96:	f7ff fb21 	bl	80005dc <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e227      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa8:	4b82      	ldr	r3, [pc, #520]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b7f      	ldr	r3, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	497c      	ldr	r1, [pc, #496]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
 8000fc8:	e018      	b.n	8000ffc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fca:	4b7a      	ldr	r3, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a79      	ldr	r2, [pc, #484]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fb01 	bl	80005dc <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fafd 	bl	80005dc <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e203      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff0:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b00      	cmp	r3, #0
 8001006:	d03c      	beq.n	8001082 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01c      	beq.n	800104a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001016:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001020:	f7ff fadc 	bl	80005dc <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001028:	f7ff fad8 	bl	80005dc <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1de      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103a:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0ef      	beq.n	8001028 <HAL_RCC_OscConfig+0x3ec>
 8001048:	e01b      	b.n	8001082 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104a:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105a:	f7ff fabf 	bl	80005dc <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001062:	f7ff fabb 	bl	80005dc <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1c1      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1ef      	bne.n	8001062 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80a6 	beq.w	80011dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10d      	bne.n	80010bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6593      	str	r3, [r2, #88]	; 0x58
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b8:	2301      	movs	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010bc:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <HAL_RCC_OscConfig+0x57c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d118      	bne.n	80010fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x57c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a3a      	ldr	r2, [pc, #232]	; (80011b8 <HAL_RCC_OscConfig+0x57c>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d4:	f7ff fa82 	bl	80005dc <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010dc:	f7ff fa7e 	bl	80005dc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e184      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_RCC_OscConfig+0x57c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x4d8>
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001112:	e024      	b.n	800115e <HAL_RCC_OscConfig+0x522>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d110      	bne.n	800113e <HAL_RCC_OscConfig+0x502>
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800113c:	e00f      	b.n	800115e <HAL_RCC_OscConfig+0x522>
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001154:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001156:	f023 0304 	bic.w	r3, r3, #4
 800115a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff fa39 	bl	80005dc <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800116c:	e00a      	b.n	8001184 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff fa35 	bl	80005dc <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f241 3288 	movw	r2, #5000	; 0x1388
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e139      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x578>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0ed      	beq.n	800116e <HAL_RCC_OscConfig+0x532>
 8001192:	e01a      	b.n	80011ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fa22 	bl	80005dc <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800119a:	e00f      	b.n	80011bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fa1e 	bl	80005dc <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d906      	bls.n	80011bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e122      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011bc:	4b90      	ldr	r3, [pc, #576]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80011be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1e8      	bne.n	800119c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d0:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	4a8a      	ldr	r2, [pc, #552]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80011d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 8108 	beq.w	80013f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	f040 80d0 	bne.w	8001390 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011f0:	4b83      	ldr	r3, [pc, #524]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	429a      	cmp	r2, r3
 8001202:	d130      	bne.n	8001266 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	3b01      	subs	r3, #1
 8001210:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d127      	bne.n	8001266 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d11f      	bne.n	8001266 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001230:	2a07      	cmp	r2, #7
 8001232:	bf14      	ite	ne
 8001234:	2201      	movne	r2, #1
 8001236:	2200      	moveq	r2, #0
 8001238:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800123a:	4293      	cmp	r3, r2
 800123c:	d113      	bne.n	8001266 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	085b      	lsrs	r3, r3, #1
 800124a:	3b01      	subs	r3, #1
 800124c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d109      	bne.n	8001266 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	3b01      	subs	r3, #1
 8001260:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d06e      	beq.n	8001344 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d069      	beq.n	8001340 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800126c:	4b64      	ldr	r3, [pc, #400]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b7      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001288:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a5c      	ldr	r2, [pc, #368]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800128e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001292:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001294:	f7ff f9a2 	bl	80005dc <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff f99e 	bl	80005dc <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0a4      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ae:	4b54      	ldr	r3, [pc, #336]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_RCC_OscConfig+0x7c8>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012ca:	3a01      	subs	r2, #1
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	4311      	orrs	r1, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012d4:	0212      	lsls	r2, r2, #8
 80012d6:	4311      	orrs	r1, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012dc:	0852      	lsrs	r2, r2, #1
 80012de:	3a01      	subs	r2, #1
 80012e0:	0552      	lsls	r2, r2, #21
 80012e2:	4311      	orrs	r1, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012e8:	0852      	lsrs	r2, r2, #1
 80012ea:	3a01      	subs	r2, #1
 80012ec:	0652      	lsls	r2, r2, #25
 80012ee:	4311      	orrs	r1, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012f4:	0912      	lsrs	r2, r2, #4
 80012f6:	0452      	lsls	r2, r2, #17
 80012f8:	430a      	orrs	r2, r1
 80012fa:	4941      	ldr	r1, [pc, #260]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3e      	ldr	r2, [pc, #248]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001318:	f7ff f960 	bl	80005dc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff f95c 	bl	80005dc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e062      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133e:	e05a      	b.n	80013f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e059      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d152      	bne.n	80013f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001368:	f7ff f938 	bl	80005dc <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff f934 	bl	80005dc <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e03a      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x734>
 800138e:	e032      	b.n	80013f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d02d      	beq.n	80013f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 800139c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013b4:	f023 0303 	bic.w	r3, r3, #3
 80013b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff f907 	bl	80005dc <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff f903 	bl	80005dc <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_OscConfig+0x7c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x796>
 80013f0:	e001      	b.n	80013f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	f99d808c 	.word	0xf99d808c

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0c8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d910      	bls.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	4961      	ldr	r1, [pc, #388]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b0      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d04c      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d121      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e09e      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d107      	bne.n	8001488 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d115      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e092      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e086      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a0:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e07e      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 0203 	bic.w	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	493f      	ldr	r1, [pc, #252]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014c2:	f7ff f88b 	bl	80005dc <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ca:	f7ff f887 	bl	80005dc <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e066      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 020c 	and.w	r2, r3, #12
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d1eb      	bne.n	80014ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	492c      	ldr	r1, [pc, #176]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d210      	bcs.n	8001540 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 0207 	bic.w	r2, r3, #7
 8001526:	4924      	ldr	r1, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e036      	b.n	80015ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4918      	ldr	r1, [pc, #96]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4910      	ldr	r1, [pc, #64]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800157e:	f000 f825 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 8001582:	4601      	mov	r1, r0
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_ClockConfig+0x1b4>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	fa21 f303 	lsr.w	r3, r1, r3
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffca 	bl	800053c <HAL_InitTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80015ac:	7afb      	ldrb	r3, [r7, #11]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08001ac4 	.word	0x08001ac4
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x34>
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d121      	bne.n	800163e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d11e      	bne.n	800163e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e005      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001628:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d102      	bne.n	800164a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	e004      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d101      	bne.n	8001654 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001652:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d133      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d002      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0xa4>
 800166a:	2b03      	cmp	r3, #3
 800166c:	d003      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0xaa>
 800166e:	e005      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001672:	617b      	str	r3, [r7, #20]
      break;
 8001674:	e005      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001678:	617b      	str	r3, [r7, #20]
      break;
 800167a:	e002      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	617b      	str	r3, [r7, #20]
      break;
 8001680:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	fb02 f203 	mul.w	r2, r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0e5b      	lsrs	r3, r3, #25
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	3301      	adds	r3, #1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016c2:	69bb      	ldr	r3, [r7, #24]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08001ad4 	.word	0x08001ad4
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	007a1200 	.word	0x007a1200

080016e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f8:	f7ff fa3c 	bl	8000b74 <HAL_PWREx_GetVoltageRange>
 80016fc:	6178      	str	r0, [r7, #20]
 80016fe:	e014      	b.n	800172a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001718:	f7ff fa2c 	bl	8000b74 <HAL_PWREx_GetVoltageRange>
 800171c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d10b      	bne.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d919      	bls.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2ba0      	cmp	r3, #160	; 0xa0
 800173c:	d902      	bls.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800173e:	2302      	movs	r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e013      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e010      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b80      	cmp	r3, #128	; 0x80
 800174e:	d902      	bls.n	8001756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e00a      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d102      	bne.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e004      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b70      	cmp	r3, #112	; 0x70
 8001766:	d101      	bne.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 0207 	bic.w	r2, r3, #7
 8001774:	4909      	ldr	r1, [pc, #36]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e049      	b.n	8001846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fdf2 	bl	80003b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f000 f89e 	bl	8001920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d001      	beq.n	8001868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e047      	b.n	80018f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <HAL_TIM_Base_Start+0xb4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01d      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001882:	d018      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_TIM_Base_Start+0xb8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_TIM_Base_Start+0xbc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00e      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <HAL_TIM_Base_Start+0xc0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d009      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <HAL_TIM_Base_Start+0xc4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d004      	beq.n	80018b6 <HAL_TIM_Base_Start+0x66>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_TIM_Base_Start+0xc8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d115      	bne.n	80018e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_TIM_Base_Start+0xcc>)
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d015      	beq.n	80018f4 <HAL_TIM_Base_Start+0xa4>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d011      	beq.n	80018f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e0:	e008      	b.n	80018f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800
 8001910:	40000c00 	.word	0x40000c00
 8001914:	40013400 	.word	0x40013400
 8001918:	40014000 	.word	0x40014000
 800191c:	00010007 	.word	0x00010007

08001920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <TIM_Base_SetConfig+0x114>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <TIM_Base_SetConfig+0x40>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193e:	d00f      	beq.n	8001960 <TIM_Base_SetConfig+0x40>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3d      	ldr	r2, [pc, #244]	; (8001a38 <TIM_Base_SetConfig+0x118>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00b      	beq.n	8001960 <TIM_Base_SetConfig+0x40>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3c      	ldr	r2, [pc, #240]	; (8001a3c <TIM_Base_SetConfig+0x11c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <TIM_Base_SetConfig+0x40>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3b      	ldr	r2, [pc, #236]	; (8001a40 <TIM_Base_SetConfig+0x120>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d003      	beq.n	8001960 <TIM_Base_SetConfig+0x40>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <TIM_Base_SetConfig+0x124>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d108      	bne.n	8001972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <TIM_Base_SetConfig+0x114>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01f      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d01b      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <TIM_Base_SetConfig+0x118>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d017      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <TIM_Base_SetConfig+0x11c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <TIM_Base_SetConfig+0x120>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00f      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <TIM_Base_SetConfig+0x124>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00b      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <TIM_Base_SetConfig+0x128>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <TIM_Base_SetConfig+0x12c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <TIM_Base_SetConfig+0x9a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <TIM_Base_SetConfig+0x130>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d108      	bne.n	80019cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <TIM_Base_SetConfig+0x114>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00f      	beq.n	8001a18 <TIM_Base_SetConfig+0xf8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <TIM_Base_SetConfig+0x124>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00b      	beq.n	8001a18 <TIM_Base_SetConfig+0xf8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <TIM_Base_SetConfig+0x128>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <TIM_Base_SetConfig+0xf8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <TIM_Base_SetConfig+0x12c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <TIM_Base_SetConfig+0xf8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <TIM_Base_SetConfig+0x130>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d103      	bne.n	8001a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	615a      	str	r2, [r3, #20]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	40013400 	.word	0x40013400
 8001a48:	40014000 	.word	0x40014000
 8001a4c:	40014400 	.word	0x40014400
 8001a50:	40014800 	.word	0x40014800

08001a54 <__libc_init_array>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4e0d      	ldr	r6, [pc, #52]	; (8001a8c <__libc_init_array+0x38>)
 8001a58:	4c0d      	ldr	r4, [pc, #52]	; (8001a90 <__libc_init_array+0x3c>)
 8001a5a:	1ba4      	subs	r4, r4, r6
 8001a5c:	10a4      	asrs	r4, r4, #2
 8001a5e:	2500      	movs	r5, #0
 8001a60:	42a5      	cmp	r5, r4
 8001a62:	d109      	bne.n	8001a78 <__libc_init_array+0x24>
 8001a64:	4e0b      	ldr	r6, [pc, #44]	; (8001a94 <__libc_init_array+0x40>)
 8001a66:	4c0c      	ldr	r4, [pc, #48]	; (8001a98 <__libc_init_array+0x44>)
 8001a68:	f000 f820 	bl	8001aac <_init>
 8001a6c:	1ba4      	subs	r4, r4, r6
 8001a6e:	10a4      	asrs	r4, r4, #2
 8001a70:	2500      	movs	r5, #0
 8001a72:	42a5      	cmp	r5, r4
 8001a74:	d105      	bne.n	8001a82 <__libc_init_array+0x2e>
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7c:	4798      	blx	r3
 8001a7e:	3501      	adds	r5, #1
 8001a80:	e7ee      	b.n	8001a60 <__libc_init_array+0xc>
 8001a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a86:	4798      	blx	r3
 8001a88:	3501      	adds	r5, #1
 8001a8a:	e7f2      	b.n	8001a72 <__libc_init_array+0x1e>
 8001a8c:	08001b04 	.word	0x08001b04
 8001a90:	08001b04 	.word	0x08001b04
 8001a94:	08001b04 	.word	0x08001b04
 8001a98:	08001b08 	.word	0x08001b08

08001a9c <memset>:
 8001a9c:	4402      	add	r2, r0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <memset+0xa>
 8001aa4:	4770      	bx	lr
 8001aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8001aaa:	e7f9      	b.n	8001aa0 <memset+0x4>

08001aac <_init>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	bf00      	nop
 8001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ab2:	bc08      	pop	{r3}
 8001ab4:	469e      	mov	lr, r3
 8001ab6:	4770      	bx	lr

08001ab8 <_fini>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	bf00      	nop
 8001abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001abe:	bc08      	pop	{r3}
 8001ac0:	469e      	mov	lr, r3
 8001ac2:	4770      	bx	lr
