
STM32L475VGTx_State_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000074  08004cf0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004cf0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d121  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ad4  00000000  00000000  0002d1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002eca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025de4  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009669  00000000  00000000  0005609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e912e  00000000  00000000  0005f705  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  001488b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ac8 	.word	0x08004ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004ac8 	.word	0x08004ac8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0ac      	sub	sp, #176	; 0xb0
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fe84 	bl	8001292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 fb8d 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fc93 	bl	8000eb8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000592:	f000 fbf3 	bl	8000d7c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000596:	f000 fc5f 	bl	8000e58 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800059a:	f000 fc2d 	bl	8000df8 <MX_USART1_UART_Init>
  while (1)
  {
	  //*****************Introduce yourself******************************
	  //buf[0] = {T0_degC_x8};
	 // uint8_t buf[12] = {T0_degC_x8,T1_degC_x8, T0_degC, T0_OUT_1, T0_OUT_2, T1_OUT_1, T1_OUT_2 };
	  buf[0]=register_address;
 800059e:	4bcf      	ldr	r3, [pc, #828]	; (80008dc <main+0x35c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80005a8:	23be      	movs	r3, #190	; 0xbe
 80005aa:	b299      	uxth	r1, r3
 80005ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	48c9      	ldr	r0, [pc, #804]	; (80008e0 <main+0x360>)
 80005ba:	f001 fa1f 	bl	80019fc <HAL_I2C_Master_Transmit>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  if(ret != HAL_OK){
 80005c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d006      	beq.n	80005da <main+0x5a>
		  strcpy((char*)buf, "Error Tx \r\n");
 80005cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d0:	4ac4      	ldr	r2, [pc, #784]	; (80008e4 <main+0x364>)
 80005d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80005d8:	e017      	b.n	800060a <main+0x8a>
	  }else{
		  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 80005da:	23be      	movs	r3, #190	; 0xbe
 80005dc:	b299      	uxth	r1, r3
 80005de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	48bd      	ldr	r0, [pc, #756]	; (80008e0 <main+0x360>)
 80005ec:	f001 fafa 	bl	8001be4 <HAL_I2C_Master_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		  //Read 2 bytes from the Temperature Register
		  if(ret !=HAL_OK){
 80005f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d005      	beq.n	800060a <main+0x8a>
			  strcpy((char*)buf, "Error Rx \r\n");
 80005fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000602:	4ab9      	ldr	r2, [pc, #740]	; (80008e8 <main+0x368>)
 8000604:	ca07      	ldmia	r2, {r0, r1, r2}
 8000606:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  }
	  }
	  //strcpy((char *)buf, data)
	  sprintf((char*)buf, "Name is: %d\r\n", buf[0]);
 800060a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800060e:	461a      	mov	r2, r3
 8000610:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000614:	49b5      	ldr	r1, [pc, #724]	; (80008ec <main+0x36c>)
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fe50 	bl	80042bc <siprintf>
	  //Send out buffer (Temperature or error message)
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), 500);
 800061c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800062e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000632:	48af      	ldr	r0, [pc, #700]	; (80008f0 <main+0x370>)
 8000634:	f003 f990 	bl	8003958 <HAL_UART_Transmit>
	  //Wait

	  //******************Read the temperature High************************
	  buf[0]=T_OUT_2;
 8000638:	232b      	movs	r3, #43	; 0x2b
 800063a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	  	  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800063e:	23be      	movs	r3, #190	; 0xbe
 8000640:	b299      	uxth	r1, r3
 8000642:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	48a4      	ldr	r0, [pc, #656]	; (80008e0 <main+0x360>)
 8000650:	f001 f9d4 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  	  if(ret != HAL_OK){
 800065a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <main+0xf0>
	  		  strcpy((char*)buf, "Error Tx \r\n");
 8000662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000666:	4a9f      	ldr	r2, [pc, #636]	; (80008e4 <main+0x364>)
 8000668:	ca07      	ldmia	r2, {r0, r1, r2}
 800066a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800066e:	e017      	b.n	80006a0 <main+0x120>
	  	  }else{
	  		  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000670:	23be      	movs	r3, #190	; 0xbe
 8000672:	b299      	uxth	r1, r3
 8000674:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	4897      	ldr	r0, [pc, #604]	; (80008e0 <main+0x360>)
 8000682:	f001 faaf 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  		  //Read 2 bytes from the Temperature Register
	  		  if(ret !=HAL_OK){
 800068c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000690:	2b00      	cmp	r3, #0
 8000692:	d005      	beq.n	80006a0 <main+0x120>
	  			  strcpy((char*)buf, "Error Rx \r\n");
 8000694:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000698:	4a93      	ldr	r2, [pc, #588]	; (80008e8 <main+0x368>)
 800069a:	ca07      	ldmia	r2, {r0, r1, r2}
 800069c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  		  }
	  	  }
	  	T_out = ((int16_t) buf[0]);
 80006a0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80006a4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  	  //strcpy((char *)buf, data)
	  	  sprintf((char*)buf, "Temperature is: %d H \r\n", T_out<< 8);
 80006a8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006b2:	4990      	ldr	r1, [pc, #576]	; (80008f4 <main+0x374>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fe01 	bl	80042bc <siprintf>
	  	  //Send out buffer (Temperature or error message)
	  	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), 500);
 80006ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80006cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d0:	4887      	ldr	r0, [pc, #540]	; (80008f0 <main+0x370>)
 80006d2:	f003 f941 	bl	8003958 <HAL_UART_Transmit>
	  	//******************Read the temperature Low************************
	  		  buf[0]=T_OUT_1;
 80006d6:	232a      	movs	r3, #42	; 0x2a
 80006d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	  		  	  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80006dc:	23be      	movs	r3, #190	; 0xbe
 80006de:	b299      	uxth	r1, r3
 80006e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	487c      	ldr	r0, [pc, #496]	; (80008e0 <main+0x360>)
 80006ee:	f001 f985 	bl	80019fc <HAL_I2C_Master_Transmit>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  		  	  if(ret != HAL_OK){
 80006f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <main+0x18e>
	  		  		  strcpy((char*)buf, "Error Tx \r\n");
 8000700:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000704:	4a77      	ldr	r2, [pc, #476]	; (80008e4 <main+0x364>)
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800070c:	e017      	b.n	800073e <main+0x1be>
	  		  	  }else{
	  		  		  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 800070e:	23be      	movs	r3, #190	; 0xbe
 8000710:	b299      	uxth	r1, r3
 8000712:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	4870      	ldr	r0, [pc, #448]	; (80008e0 <main+0x360>)
 8000720:	f001 fa60 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000724:	4603      	mov	r3, r0
 8000726:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  		  		  //Read 2 bytes from the Temperature Register
	  		  		  if(ret !=HAL_OK){
 800072a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800072e:	2b00      	cmp	r3, #0
 8000730:	d005      	beq.n	800073e <main+0x1be>
	  		  			  strcpy((char*)buf, "Error Rx \r\n");
 8000732:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000736:	4a6c      	ldr	r2, [pc, #432]	; (80008e8 <main+0x368>)
 8000738:	ca07      	ldmia	r2, {r0, r1, r2}
 800073a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  		  		  }
	  		  	  }
	  		  	  //strcpy((char *)buf, data)
	  		  	  T_out = (T_out<<8) | buf[0];
 800073e:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  		  	  sprintf((char*)data, "Temperature is: %d **\r\n", T_out);
 8000752:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4967      	ldr	r1, [pc, #412]	; (80008f8 <main+0x378>)
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fdae 	bl	80042bc <siprintf>

	  		  	  //Send out buffer (Temperature or error message)
	  		  	  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd34 	bl	80001d0 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	1d39      	adds	r1, r7, #4
 800076e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000772:	485f      	ldr	r0, [pc, #380]	; (80008f0 <main+0x370>)
 8000774:	f003 f8f0 	bl	8003958 <HAL_UART_Transmit>
	//******************Read the T0_degC_x8 Low************************
		  buf[0]=T0_degC_x8;
 8000778:	2332      	movs	r3, #50	; 0x32
 800077a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800077e:	23be      	movs	r3, #190	; 0xbe
 8000780:	b299      	uxth	r1, r3
 8000782:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	4854      	ldr	r0, [pc, #336]	; (80008e0 <main+0x360>)
 8000790:	f001 f934 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			  if(ret != HAL_OK){
 800079a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d006      	beq.n	80007b0 <main+0x230>
				  strcpy((char*)buf, "Error Tx \r\n");
 80007a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007a6:	4a4f      	ldr	r2, [pc, #316]	; (80008e4 <main+0x364>)
 80007a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80007ae:	e017      	b.n	80007e0 <main+0x260>
			  }else{
				  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 80007b0:	23be      	movs	r3, #190	; 0xbe
 80007b2:	b299      	uxth	r1, r3
 80007b4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	4847      	ldr	r0, [pc, #284]	; (80008e0 <main+0x360>)
 80007c2:	f001 fa0f 	bl	8001be4 <HAL_I2C_Master_Receive>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				  //Read 2 bytes from the Temperature Register
				  if(ret !=HAL_OK){
 80007cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d005      	beq.n	80007e0 <main+0x260>
					  strcpy((char*)buf, "Error Rx \r\n");
 80007d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <main+0x368>)
 80007da:	ca07      	ldmia	r2, {r0, r1, r2}
 80007dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  }
			  }
			  T0_degC_x8_u16 = ((uint16_t) buf[0]); //Convert to 16 bits awaiting the MSB
 80007e0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80007e4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			  //strcpy((char *)buf, data)
			  sprintf((char*)data, "T0_degC_x8 is: %u  L\r\n", T0_degC_x8_u16);
 80007e8:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4943      	ldr	r1, [pc, #268]	; (80008fc <main+0x37c>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fd63 	bl	80042bc <siprintf>
			  //Send out buffer (Temperature or error message)
			  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fce9 	bl	80001d0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	1d39      	adds	r1, r7, #4
 8000804:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000808:	4839      	ldr	r0, [pc, #228]	; (80008f0 <main+0x370>)
 800080a:	f003 f8a5 	bl	8003958 <HAL_UART_Transmit>
	  //******************Read the T1_degC_x8 High************************
			  buf[0]=T1_degC_x8;
 800080e:	2333      	movs	r3, #51	; 0x33
 8000810:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
				  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000814:	23be      	movs	r3, #190	; 0xbe
 8000816:	b299      	uxth	r1, r3
 8000818:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <main+0x360>)
 8000826:	f001 f8e9 	bl	80019fc <HAL_I2C_Master_Transmit>
 800082a:	4603      	mov	r3, r0
 800082c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				  if(ret != HAL_OK){
 8000830:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <main+0x2c6>
					  strcpy((char*)buf, "Error Tx \r\n");
 8000838:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <main+0x364>)
 800083e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000844:	e017      	b.n	8000876 <main+0x2f6>
				  }else{
					  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000846:	23be      	movs	r3, #190	; 0xbe
 8000848:	b299      	uxth	r1, r3
 800084a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	4822      	ldr	r0, [pc, #136]	; (80008e0 <main+0x360>)
 8000858:	f001 f9c4 	bl	8001be4 <HAL_I2C_Master_Receive>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					  //Read 2 bytes from the Temperature Register
					  if(ret !=HAL_OK){
 8000862:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000866:	2b00      	cmp	r3, #0
 8000868:	d005      	beq.n	8000876 <main+0x2f6>
						  strcpy((char*)buf, "Error Rx \r\n");
 800086a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <main+0x368>)
 8000870:	ca07      	ldmia	r2, {r0, r1, r2}
 8000872:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  }
				  }
				  T1_degC_x8_u16 = (uint16_t) buf[0];//Convert to 16 bits awaiting the MSB
 8000876:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800087a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
				  //strcpy((char *)buf, data)
				  sprintf((char*)data, "T1_degC_x8 is: %u  H\r\n", T1_degC_x8_u16);
 800087e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	491e      	ldr	r1, [pc, #120]	; (8000900 <main+0x380>)
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fd18 	bl	80042bc <siprintf>
				  //Send out buffer (Temperature or error message)
				HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc9e 	bl	80001d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	1d39      	adds	r1, r7, #4
 800089a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <main+0x370>)
 80008a0:	f003 f85a 	bl	8003958 <HAL_UART_Transmit>
	  //******************Read the MSB************************
				  buf[0]=T_MSB;
 80008a4:	2335      	movs	r3, #53	; 0x35
 80008a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
					  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80008aa:	23be      	movs	r3, #190	; 0xbe
 80008ac:	b299      	uxth	r1, r3
 80008ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <main+0x360>)
 80008bc:	f001 f89e 	bl	80019fc <HAL_I2C_Master_Transmit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					  if(ret != HAL_OK){
 80008c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d01a      	beq.n	8000904 <main+0x384>
						  strcpy((char*)buf, "Error Tx \r\n");
 80008ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <main+0x364>)
 80008d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80008da:	e02b      	b.n	8000934 <main+0x3b4>
 80008dc:	20000000 	.word	0x20000000
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	08004ae0 	.word	0x08004ae0
 80008e8:	08004aec 	.word	0x08004aec
 80008ec:	08004af8 	.word	0x08004af8
 80008f0:	200000e8 	.word	0x200000e8
 80008f4:	08004b08 	.word	0x08004b08
 80008f8:	08004b20 	.word	0x08004b20
 80008fc:	08004b38 	.word	0x08004b38
 8000900:	08004b50 	.word	0x08004b50
					  }else{
						  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000904:	23be      	movs	r3, #190	; 0xbe
 8000906:	b299      	uxth	r1, r3
 8000908:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800090c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	48b9      	ldr	r0, [pc, #740]	; (8000bfc <main+0x67c>)
 8000916:	f001 f965 	bl	8001be4 <HAL_I2C_Master_Receive>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						  //Read 2 bytes from the Temperature Register
						  if(ret !=HAL_OK){
 8000920:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <main+0x3b4>
							  strcpy((char*)buf, "Error Rx \r\n");
 8000928:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800092c:	4ab4      	ldr	r2, [pc, #720]	; (8000c00 <main+0x680>)
 800092e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						  }
					  }

					  T__MSB = ((uint8_t) buf[0]);//Convert to 16 bits awaiting the MSB
 8000934:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000938:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					  //strcpy((char *)buf, data)
					  sprintf((char*)data, "MSB is: %u  \r\n", T__MSB<<8);
 800093c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000940:	021a      	lsls	r2, r3, #8
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	49af      	ldr	r1, [pc, #700]	; (8000c04 <main+0x684>)
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fcb8 	bl	80042bc <siprintf>
					  //Send out buffer (Temperature or error message)
					  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc3e 	bl	80001d0 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	1d39      	adds	r1, r7, #4
 800095a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800095e:	48aa      	ldr	r0, [pc, #680]	; (8000c08 <main+0x688>)
 8000960:	f002 fffa 	bl	8003958 <HAL_UART_Transmit>

	// ******** LOW MSB *******************
					  T0_degC_x8_u16 = (T__MSB<<8 & 0x300)|T0_degC_x8_u16; //Convert to 16 bits awaiting the MSB
 8000964:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b21b      	sxth	r3, r3
 800096c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000970:	b21a      	sxth	r2, r3
 8000972:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
					  //strcpy((char *)buf, data)
					  sprintf((char*)data, "T0_degC_x16 is: %u  L\r\n", T0_degC_x8_u16);
 800097e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	49a1      	ldr	r1, [pc, #644]	; (8000c0c <main+0x68c>)
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fc98 	bl	80042bc <siprintf>
					  //Send out buffer (Temperature or error message)
					  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc1e 	bl	80001d0 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29a      	uxth	r2, r3
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800099e:	489a      	ldr	r0, [pc, #616]	; (8000c08 <main+0x688>)
 80009a0:	f002 ffda 	bl	8003958 <HAL_UART_Transmit>
  // ******** HIgh MSB *******************
					  T1_degC_x8_u16 = (T__MSB<<6 & 0x300)|T1_degC_x8_u16; //Convert to 16 bits awaiting the MSB
 80009a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					  //strcpy((char *)buf, data)
					  sprintf((char*)data, "T1_degC_x16 is: %u  L\r\n", T1_degC_x8_u16);
 80009be:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4992      	ldr	r1, [pc, #584]	; (8000c10 <main+0x690>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fc78 	bl	80042bc <siprintf>
					  //Send out buffer (Temperature or error message)
					  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fbfe 	bl	80001d0 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	1d39      	adds	r1, r7, #4
 80009da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009de:	488a      	ldr	r0, [pc, #552]	; (8000c08 <main+0x688>)
 80009e0:	f002 ffba 	bl	8003958 <HAL_UART_Transmit>

  //******************Read the T0_OUT_2************************
	  buf[0]=T0_OUT_2;
 80009e4:	233d      	movs	r3, #61	; 0x3d
 80009e6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80009ea:	23be      	movs	r3, #190	; 0xbe
 80009ec:	b299      	uxth	r1, r3
 80009ee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	4880      	ldr	r0, [pc, #512]	; (8000bfc <main+0x67c>)
 80009fc:	f000 fffe 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		  if(ret != HAL_OK){
 8000a06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <main+0x49c>
			  strcpy((char*)buf, "Error Tx \r\n");
 8000a0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a12:	4a80      	ldr	r2, [pc, #512]	; (8000c14 <main+0x694>)
 8000a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a1a:	e017      	b.n	8000a4c <main+0x4cc>
		  }else{
			  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000a1c:	23be      	movs	r3, #190	; 0xbe
 8000a1e:	b299      	uxth	r1, r3
 8000a20:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	4873      	ldr	r0, [pc, #460]	; (8000bfc <main+0x67c>)
 8000a2e:	f001 f8d9 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			  //Read 2 bytes from the Temperature Register
			  if(ret !=HAL_OK){
 8000a38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <main+0x4cc>
				  strcpy((char*)buf, "Error Rx \r\n");
 8000a40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a44:	4a6e      	ldr	r2, [pc, #440]	; (8000c00 <main+0x680>)
 8000a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  }
		  }
		  T0_out = ((int16_t) buf[0]);
 8000a4c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000a50:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		  //strcpy((char *)buf, data)
		  sprintf((char*)buf, "T0_OUT_2: %u H \r\n", T0_out<<8);
 8000a54:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8000a58:	021a      	lsls	r2, r3, #8
 8000a5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a5e:	496e      	ldr	r1, [pc, #440]	; (8000c18 <main+0x698>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fc2b 	bl	80042bc <siprintf>
		  //Send out buffer (Temperature or error message)
		  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), 500);
 8000a66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fbb0 	bl	80001d0 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000a78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a7c:	4862      	ldr	r0, [pc, #392]	; (8000c08 <main+0x688>)
 8000a7e:	f002 ff6b 	bl	8003958 <HAL_UART_Transmit>
	//******************Read the T0_OUT_1************************
		  buf[0]=T0_OUT_1;
 8000a82:	233c      	movs	r3, #60	; 0x3c
 8000a84:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000a88:	23be      	movs	r3, #190	; 0xbe
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4858      	ldr	r0, [pc, #352]	; (8000bfc <main+0x67c>)
 8000a9a:	f000 ffaf 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			  if(ret != HAL_OK){
 8000aa4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <main+0x53a>
				  strcpy((char*)buf, "Error Tx \r\n");
 8000aac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ab0:	4a58      	ldr	r2, [pc, #352]	; (8000c14 <main+0x694>)
 8000ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ab8:	e017      	b.n	8000aea <main+0x56a>
			  }else{
				  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000aba:	23be      	movs	r3, #190	; 0xbe
 8000abc:	b299      	uxth	r1, r3
 8000abe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	484c      	ldr	r0, [pc, #304]	; (8000bfc <main+0x67c>)
 8000acc:	f001 f88a 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				  //Read 2 bytes from the Temperature Register
				  if(ret !=HAL_OK){
 8000ad6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <main+0x56a>
					  strcpy((char*)buf, "Error Rx \r\n");
 8000ade:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <main+0x680>)
 8000ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  }
			  }
			  //strcpy((char *)buf, data)
			  T0_out = (T0_out<<8)| buf[0];
 8000aea:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			  //T_out = (T_out<<8) | buf[0];
			  sprintf((char*)data, "T0_OUT: %u **\r\n", T0_out);
 8000afe:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4945      	ldr	r1, [pc, #276]	; (8000c1c <main+0x69c>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fbd8 	bl	80042bc <siprintf>

			  //Send out buffer (Temperature or error message)
			  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb5e 	bl	80001d0 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	1d39      	adds	r1, r7, #4
 8000b1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1e:	483a      	ldr	r0, [pc, #232]	; (8000c08 <main+0x688>)
 8000b20:	f002 ff1a 	bl	8003958 <HAL_UART_Transmit>
	  //******************Read the T1_OUT_2************************
		  buf[0]=T1_OUT_2;
 8000b24:	233f      	movs	r3, #63	; 0x3f
 8000b26:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000b2a:	23be      	movs	r3, #190	; 0xbe
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	4830      	ldr	r0, [pc, #192]	; (8000bfc <main+0x67c>)
 8000b3c:	f000 ff5e 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			  if(ret != HAL_OK){
 8000b46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <main+0x5dc>
				  strcpy((char*)buf, "Error Tx \r\n");
 8000b4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b52:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <main+0x694>)
 8000b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b5a:	e017      	b.n	8000b8c <main+0x60c>
			  }else{
				  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000b5c:	23be      	movs	r3, #190	; 0xbe
 8000b5e:	b299      	uxth	r1, r3
 8000b60:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	4823      	ldr	r0, [pc, #140]	; (8000bfc <main+0x67c>)
 8000b6e:	f001 f839 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				  //Read 2 bytes from the Temperature Register
				  if(ret !=HAL_OK){
 8000b78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <main+0x60c>
					  strcpy((char*)buf, "Error Rx \r\n");
 8000b80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b84:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <main+0x680>)
 8000b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  }
			  }
			  T1_out = ((int16_t) buf[0]);
 8000b8c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000b90:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			  //strcpy((char *)buf, data)
			  sprintf((char*)buf, "T1_OUT_2: %u H \r\n", T1_out<<8);
 8000b94:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8000b98:	021a      	lsls	r2, r3, #8
 8000b9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b9e:	4920      	ldr	r1, [pc, #128]	; (8000c20 <main+0x6a0>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fb8b 	bl	80042bc <siprintf>
			  //Send out buffer (Temperature or error message)
			  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), 500);
 8000ba6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb10 	bl	80001d0 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000bb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <main+0x688>)
 8000bbe:	f002 fecb 	bl	8003958 <HAL_UART_Transmit>
		//******************Read the T1_OUT_1************************
			  buf[0]=T1_OUT_1;
 8000bc2:	233e      	movs	r3, #62	; 0x3e
 8000bc4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
				  ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000bc8:	23be      	movs	r3, #190	; 0xbe
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <main+0x67c>)
 8000bda:	f000 ff0f 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				  if(ret != HAL_OK){
 8000be4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01b      	beq.n	8000c24 <main+0x6a4>
					  strcpy((char*)buf, "Error Tx \r\n");
 8000bec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <main+0x694>)
 8000bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000bf8:	e02c      	b.n	8000c54 <main+0x6d4>
 8000bfa:	bf00      	nop
 8000bfc:	2000009c 	.word	0x2000009c
 8000c00:	08004aec 	.word	0x08004aec
 8000c04:	08004b68 	.word	0x08004b68
 8000c08:	200000e8 	.word	0x200000e8
 8000c0c:	08004b78 	.word	0x08004b78
 8000c10:	08004b90 	.word	0x08004b90
 8000c14:	08004ae0 	.word	0x08004ae0
 8000c18:	08004ba8 	.word	0x08004ba8
 8000c1c:	08004bbc 	.word	0x08004bbc
 8000c20:	08004bcc 	.word	0x08004bcc
				  }else{
					  ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 1, 1000);
 8000c24:	23be      	movs	r3, #190	; 0xbe
 8000c26:	b299      	uxth	r1, r3
 8000c28:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <main+0x718>)
 8000c36:	f000 ffd5 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					  //Read 2 bytes from the Temperature Register
					  if(ret !=HAL_OK){
 8000c40:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <main+0x6d4>
						  strcpy((char*)buf, "Error Rx \r\n");
 8000c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <main+0x71c>)
 8000c4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					  }
				  }
				  //strcpy((char *)buf, data)
				  T1_out = (T1_out<<8)| buf[0];
 8000c54:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
				  //T_out = (T_out<<8) | buf[0];
				  sprintf((char*)data, "T1_OUT: %u **\r\n", T1_out);
 8000c68:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <main+0x720>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fb23 	bl	80042bc <siprintf>

				  //Send out buffer (Temperature or error message)
				  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen((char*)data), 500);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff faa9 	bl	80001d0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	1d39      	adds	r1, r7, #4
 8000c84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <main+0x724>)
 8000c8a:	f002 fe65 	bl	8003958 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f000 fb73 	bl	800137c <HAL_Delay>
	  buf[0]=register_address;
 8000c96:	e482      	b.n	800059e <main+0x1e>
 8000c98:	2000009c 	.word	0x2000009c
 8000c9c:	08004aec 	.word	0x08004aec
 8000ca0:	08004be0 	.word	0x08004be0
 8000ca4:	200000e8 	.word	0x200000e8

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0b8      	sub	sp, #224	; 0xe0
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 faf8 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2288      	movs	r2, #136	; 0x88
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 faea 	bl	80042ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cea:	2360      	movs	r3, #96	; 0x60
 8000cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fb44 	bl	8002388 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d06:	f000 f91d 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 ff10 	bl	8002b54 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d3a:	f000 f903 	bl	8000f44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d3e:	2383      	movs	r3, #131	; 0x83
 8000d40:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 f903 	bl	8002f5c <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d5c:	f000 f8f2 	bl	8000f44 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d64:	f001 faba 	bl	80022dc <HAL_PWREx_ControlVoltageScaling>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d6e:	f000 f8e9 	bl	8000f44 <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	37e0      	adds	r7, #224	; 0xe0
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_I2C2_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000d88:	f640 6214 	movw	r2, #3604	; 0xe14
 8000d8c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000dba:	f000 fd8f 	bl	80018dc <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 f8be 	bl	8000f44 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000dcc:	f001 f9e0 	bl	8002190 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000dd6:	f000 f8b5 	bl	8000f44 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C2_Init+0x74>)
 8000dde:	f001 fa22 	bl	8002226 <HAL_I2CEx_ConfigDigitalFilter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000de8:	f000 f8ac 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000009c 	.word	0x2000009c
 8000df4:	40005800 	.word	0x40005800

08000df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART1_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART1_UART_Init+0x58>)
 8000e3c:	f002 fd3e 	bl	80038bc <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 f87d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000e8 	.word	0x200000e8
 8000e54:	40013800 	.word	0x40013800

08000e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	f002 fd0e 	bl	80038bc <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f84d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000168 	.word	0x20000168
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_GPIO_Init+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_GPIO_Init+0x88>)
 8000f2c:	f000 fb2e 	bl	800158c <HAL_GPIO_Init>

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	48000c00 	.word	0x48000c00

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	; 0x60
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_I2C_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d128      	bne.n	8001010 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_I2C_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_I2C_MspInit+0x80>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_I2C_MspInit+0x80>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fdc:	2312      	movs	r3, #18
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_I2C_MspInit+0x84>)
 8000ff4:	f000 faca 	bl	800158c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_I2C_MspInit+0x80>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_I2C_MspInit+0x80>)
 8000ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001002:	6593      	str	r3, [r2, #88]	; 0x58
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_I2C_MspInit+0x80>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40005800 	.word	0x40005800
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <HAL_UART_MspInit+0xd8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <HAL_UART_MspInit+0xdc>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <HAL_UART_MspInit+0xdc>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_UART_MspInit+0xdc>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_UART_MspInit+0xdc>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a27      	ldr	r2, [pc, #156]	; (8001100 <HAL_UART_MspInit+0xdc>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_UART_MspInit+0xdc>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001086:	2307      	movs	r3, #7
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <HAL_UART_MspInit+0xe0>)
 8001092:	f000 fa7b 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001096:	e02d      	b.n	80010f4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_UART_MspInit+0xe4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d128      	bne.n	80010f4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_UART_MspInit+0xdc>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d2:	230c      	movs	r3, #12
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e2:	2307      	movs	r3, #7
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f000 fa4c 	bl	800158c <HAL_GPIO_Init>
}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	; 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40013800 	.word	0x40013800
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400
 8001108:	40004400 	.word	0x40004400

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f8ec 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f003 f85e 	bl	8004258 <__errno>
 800119c:	4602      	mov	r2, r0
 800119e:	230c      	movs	r3, #12
 80011a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20018000 	.word	0x20018000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	20000090 	.word	0x20000090
 80011d0:	200001f0 	.word	0x200001f0

080011d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <SystemInit+0x64>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <SystemInit+0x64>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SystemInit+0x68>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <SystemInit+0x68>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <SystemInit+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <SystemInit+0x68>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <SystemInit+0x68>)
 8001200:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001204:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <SystemInit+0x68>)
 800120c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001210:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <SystemInit+0x68>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <SystemInit+0x68>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <SystemInit+0x68>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SystemInit+0x64>)
 8001226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122a:	609a      	str	r2, [r3, #8]
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	40021000 	.word	0x40021000

08001240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001244:	f7ff ffc6 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800124a:	e003      	b.n	8001254 <LoopCopyDataInit>

0800124c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800124e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001252:	3104      	adds	r1, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800125a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800125c:	d3f6      	bcc.n	800124c <CopyDataInit>
	ldr	r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001260:	e002      	b.n	8001268 <LoopFillZerobss>

08001262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001264:	f842 3b04 	str.w	r3, [r2], #4

08001268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LoopForever+0x16>)
	cmp	r2, r3
 800126a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800126c:	d3f9      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f002 fff9 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001272:	f7ff f985 	bl	8000580 <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800127c:	08004c7c 	.word	0x08004c7c
	ldr	r0, =_sdata
 8001280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001284:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001288:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800128c:	200001f0 	.word	0x200001f0

08001290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC1_2_IRQHandler>

08001292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f941 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f80e 	bl	80012c4 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b4:	f7ff fe4e 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_InitTick+0x70>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_InitTick+0x6c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f93f 	bl	8001572 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f917 	bl	800153a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_InitTick+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e007      	b.n	8001324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e001      	b.n	8001324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000000c 	.word	0x2000000c
 8001334:	20000004 	.word	0x20000004
 8001338:	20000008 	.word	0x20000008

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c
 8001360:	200001e8 	.word	0x200001e8

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001e8 	.word	0x200001e8

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_Delay+0x40>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000000c 	.word	0x2000000c

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff47 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff5c 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffb0 	bl	80014e0 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e17f      	b.n	800189c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8171 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d00b      	beq.n	80015d4 <HAL_GPIO_Init+0x48>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c8:	2b11      	cmp	r3, #17
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b12      	cmp	r3, #18
 80015d2:	d130      	bne.n	8001636 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160a:	2201      	movs	r2, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0201 	and.w	r2, r3, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d118      	bne.n	8001674 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x128>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80ac 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001756:	4a59      	ldr	r2, [pc, #356]	; (80018bc <HAL_GPIO_Init+0x330>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x242>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4e      	ldr	r2, [pc, #312]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x23e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <HAL_GPIO_Init+0x338>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x23a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_GPIO_Init+0x33c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x236>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <HAL_GPIO_Init+0x340>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x232>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <HAL_GPIO_Init+0x344>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x348>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x22a>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ce:	2300      	movs	r3, #0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e0:	4936      	ldr	r1, [pc, #216]	; (80018bc <HAL_GPIO_Init+0x330>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001812:	4a31      	ldr	r2, [pc, #196]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001818:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae78 	bne.w	800159c <HAL_GPIO_Init+0x10>
  }
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	48001800 	.word	0x48001800
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e081      	b.n	80019f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fb4a 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800192c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800193c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e006      	b.n	8001964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d104      	bne.n	8001976 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	ea42 0103 	orr.w	r1, r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	021a      	lsls	r2, r3, #8
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69d9      	ldr	r1, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	f040 80da 	bne.w	8001bd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0x30>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0d3      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff fc96 	bl	8001364 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2319      	movs	r3, #25
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9e6 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0be      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2210      	movs	r2, #16
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	d90e      	bls.n	8001aa6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fb48 	bl	8002134 <I2C_TransferConfig>
 8001aa4:	e06c      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fb37 	bl	8002134 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ac6:	e05b      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6a39      	ldr	r1, [r7, #32]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f9e3 	bl	8001e98 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e07b      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d034      	beq.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d130      	bne.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f975 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04d      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d90e      	bls.n	8001b60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	22ff      	movs	r2, #255	; 0xff
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	8979      	ldrh	r1, [r7, #10]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 faeb 	bl	8002134 <I2C_TransferConfig>
 8001b5e:	e00f      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	8979      	ldrh	r1, [r7, #10]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fada 	bl	8002134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d19e      	bne.n	8001ac8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f9c2 	bl	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e01a      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	80002000 	.word	0x80002000
 8001be0:	fe00e800 	.word	0xfe00e800

08001be4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	f040 80db 	bne.w	8001dbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_Master_Receive+0x30>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0d4      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c1c:	f7ff fba2 	bl	8001364 <HAL_GetTick>
 8001c20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2319      	movs	r3, #25
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f8f2 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0bf      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2222      	movs	r2, #34	; 0x22
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2bff      	cmp	r3, #255	; 0xff
 8001c6e:	d90e      	bls.n	8001c8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	22ff      	movs	r2, #255	; 0xff
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa54 	bl	8002134 <I2C_TransferConfig>
 8001c8c:	e06d      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	8979      	ldrh	r1, [r7, #10]
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fa43 	bl	8002134 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001cae:	e05c      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f96b 	bl	8001f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e07c      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d034      	beq.n	8001d6a <HAL_I2C_Master_Receive+0x186>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d130      	bne.n	8001d6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f880 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e04d      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d90e      	bls.n	8001d4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f9f6 	bl	8002134 <I2C_TransferConfig>
 8001d48:	e00f      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f9e5 	bl	8002134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d19d      	bne.n	8001cb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	6a39      	ldr	r1, [r7, #32]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f8cd 	bl	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e01a      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_I2C_Master_Receive+0x1e8>)
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	80002400 	.word	0x80002400
 8001dcc:	fe00e800 	.word	0xfe00e800

08001dd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d103      	bne.n	8001dee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d007      	beq.n	8001e0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	619a      	str	r2, [r3, #24]
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e28:	e022      	b.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d01e      	beq.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7ff fa97 	bl	8001364 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e00f      	b.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d0cd      	beq.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ea4:	e02c      	b.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f8dc 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e02a      	b.n	8001f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d01e      	beq.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec2:	f7ff fa4f 	bl	8001364 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d113      	bne.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e007      	b.n	8001f10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d1cb      	bne.n	8001ea6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f24:	e028      	b.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f89c 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e026      	b.n	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff fa13 	bl	8001364 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d113      	bne.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e007      	b.n	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d1cf      	bne.n	8001f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f9c:	e055      	b.n	800204a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f860 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e053      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d129      	bne.n	8002014 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d105      	bne.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e03f      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001fee:	400b      	ands	r3, r1
 8001ff0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e022      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002014:	f7ff f9a6 	bl	8001364 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	d302      	bcc.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d1a2      	bne.n	8001f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b10      	cmp	r3, #16
 8002080:	d151      	bne.n	8002126 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002082:	e022      	b.n	80020ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d01e      	beq.n	80020ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208c:	f7ff f96a 	bl	8001364 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	429a      	cmp	r2, r3
 800209a:	d302      	bcc.n	80020a2 <I2C_IsAcknowledgeFailed+0x3a>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d113      	bne.n	80020ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e02e      	b.n	8002128 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d1d5      	bne.n	8002084 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff fe71 	bl	8001dd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <I2C_IsAcknowledgeFailed+0xc8>)
 80020fa:	400b      	ands	r3, r1
 80020fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fe00e800 	.word	0xfe00e800

08002134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	4613      	mov	r3, r2
 8002144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	0d5b      	lsrs	r3, r3, #21
 8002150:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <I2C_TransferConfig+0x58>)
 8002156:	430b      	orrs	r3, r1
 8002158:	43db      	mvns	r3, r3
 800215a:	ea02 0103 	and.w	r1, r2, r3
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002164:	7a7b      	ldrb	r3, [r7, #9]
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	03ff63ff 	.word	0x03ff63ff

08002190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d138      	bne.n	8002218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e032      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b20      	cmp	r3, #32
 800223a:	d139      	bne.n	80022b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002246:	2302      	movs	r3, #2
 8002248:	e033      	b.n	80022b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40007000 	.word	0x40007000

080022dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d130      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f8:	d038      	beq.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2232      	movs	r2, #50	; 0x32
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0c9b      	lsrs	r3, r3, #18
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002320:	e002      	b.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3b01      	subs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d102      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f2      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002348:	d110      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e00f      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d007      	beq.n	800236c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000
 8002380:	20000004 	.word	0x20000004
 8002384:	431bde83 	.word	0x431bde83

08002388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e3d4      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4ba1      	ldr	r3, [pc, #644]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b9e      	ldr	r3, [pc, #632]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80e4 	beq.w	8002584 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4a>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	f040 808b 	bne.w	80024e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 8087 	bne.w	80024e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023d2:	4b93      	ldr	r3, [pc, #588]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e3ac      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4b8c      	ldr	r3, [pc, #560]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_RCC_OscConfig+0x7c>
 80023fa:	4b89      	ldr	r3, [pc, #548]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	e005      	b.n	8002410 <HAL_RCC_OscConfig+0x88>
 8002404:	4b86      	ldr	r3, [pc, #536]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	4293      	cmp	r3, r2
 8002412:	d223      	bcs.n	800245c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fd3f 	bl	8002e9c <RCC_SetFlashLatencyFromMSIRange>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e38d      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002428:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7c      	ldr	r2, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4977      	ldr	r1, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4972      	ldr	r1, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	e025      	b.n	80024a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245c:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247a:	4b69      	ldr	r3, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4965      	ldr	r1, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fcff 	bl	8002e9c <RCC_SetFlashLatencyFromMSIRange>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e34d      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a8:	f000 fc36 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	4a5a      	ldr	r2, [pc, #360]	; (8002624 <HAL_RCC_OscConfig+0x29c>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa21 f303 	lsr.w	r3, r1, r3
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x2a0>)
 80024c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <HAL_RCC_OscConfig+0x2a4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fef9 	bl	80012c4 <HAL_InitTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d052      	beq.n	8002582 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	e331      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d032      	beq.n	800254e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f4:	f7fe ff36 	bl	8001364 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fc:	f7fe ff32 	bl	8001364 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e31a      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	493b      	ldr	r1, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	4936      	ldr	r1, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e01a      	b.n	8002584 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800255a:	f7fe ff03 	bl	8001364 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002562:	f7fe feff 	bl	8001364 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e2e7      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x1da>
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d074      	beq.n	800267a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x21a>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d10e      	bne.n	80025ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d064      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2c4      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x24a>
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e01d      	b.n	800260e <HAL_RCC_OscConfig+0x286>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x26e>
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x286>
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a06      	ldr	r2, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x298>)
 8002608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01c      	beq.n	8002650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fea5 	bl	8001364 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261c:	e011      	b.n	8002642 <HAL_RCC_OscConfig+0x2ba>
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	08004bf0 	.word	0x08004bf0
 8002628:	20000004 	.word	0x20000004
 800262c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fe98 	bl	8001364 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e280      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002642:	4baf      	ldr	r3, [pc, #700]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2a8>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fe88 	bl	8001364 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fe84 	bl	8001364 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e26c      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266a:	4ba5      	ldr	r3, [pc, #660]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x2d0>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d060      	beq.n	8002748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x310>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	4b99      	ldr	r3, [pc, #612]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x328>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e249      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b93      	ldr	r3, [pc, #588]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4990      	ldr	r1, [pc, #576]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c4:	e040      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d023      	beq.n	8002716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ce:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a8b      	ldr	r2, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fe43 	bl	8001364 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe fe3f 	bl	8001364 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e227      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f4:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	497c      	ldr	r1, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fe1f 	bl	8001364 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272a:	f7fe fe1b 	bl	8001364 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e203      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273c:	4b70      	ldr	r3, [pc, #448]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	4a67      	ldr	r2, [pc, #412]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fdfa 	bl	8001364 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fdf6 	bl	8001364 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1de      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002786:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x3ec>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fddd 	bl	8001364 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fdd9 	bl	8001364 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1c1      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c0:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a6 	beq.w	8002928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027e0:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	; 0x58
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002808:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x57c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x57c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_RCC_OscConfig+0x57c>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7fe fda0 	bl	8001364 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fd9c 	bl	8001364 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e184      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283a:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCC_OscConfig+0x57c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d8>
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285e:	e024      	b.n	80028aa <HAL_RCC_OscConfig+0x522>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d110      	bne.n	800288a <HAL_RCC_OscConfig+0x502>
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002888:	e00f      	b.n	80028aa <HAL_RCC_OscConfig+0x522>
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe fd57 	bl	8001364 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fd53 	bl	8001364 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e139      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x578>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ed      	beq.n	80028ba <HAL_RCC_OscConfig+0x532>
 80028de:	e01a      	b.n	8002916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd40 	bl	8001364 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e6:	e00f      	b.n	8002908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe fd3c 	bl	8001364 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d906      	bls.n	8002908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e122      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	4b90      	ldr	r3, [pc, #576]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e8      	bne.n	80028e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b8b      	ldr	r3, [pc, #556]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a8a      	ldr	r2, [pc, #552]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8108 	beq.w	8002b42 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80d0 	bne.w	8002adc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800293c:	4b83      	ldr	r3, [pc, #524]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	429a      	cmp	r2, r3
 800294e:	d130      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	3b01      	subs	r3, #1
 800295c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d127      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11f      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800297c:	2a07      	cmp	r2, #7
 800297e:	bf14      	ite	ne
 8002980:	2201      	movne	r2, #1
 8002982:	2200      	moveq	r2, #0
 8002984:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	4293      	cmp	r3, r2
 8002988:	d113      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d06e      	beq.n	8002a90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d069      	beq.n	8002a8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029c4:	4b61      	ldr	r3, [pc, #388]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b7      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d4:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5c      	ldr	r2, [pc, #368]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e0:	f7fe fcc0 	bl	8001364 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fcbc 	bl	8001364 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0a4      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x7c8>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a20:	0212      	lsls	r2, r2, #8
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a28:	0852      	lsrs	r2, r2, #1
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	0552      	lsls	r2, r2, #21
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a34:	0852      	lsrs	r2, r2, #1
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0652      	lsls	r2, r2, #25
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a40:	0912      	lsrs	r2, r2, #4
 8002a42:	0452      	lsls	r2, r2, #17
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4941      	ldr	r1, [pc, #260]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3e      	ldr	r2, [pc, #248]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a64:	f7fe fc7e 	bl	8001364 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fc7a 	bl	8001364 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e062      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8a:	e05a      	b.n	8002b42 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e059      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a90:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d152      	bne.n	8002b42 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab4:	f7fe fc56 	bl	8001364 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fc52 	bl	8001364 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e03a      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x734>
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d02d      	beq.n	8002b3e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002b00:	f023 0303 	bic.w	r3, r3, #3
 8002b04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002b0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fc25 	bl	8001364 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fc21 	bl	8001364 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e009      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x7c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x796>
 8002b3c:	e001      	b.n	8002b42 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	f99d808c 	.word	0xf99d808c

08002b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0c8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4961      	ldr	r1, [pc, #388]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b0      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d04c      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d121      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e09e      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d115      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e092      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e086      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e07e      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bfc:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 0203 	bic.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	493f      	ldr	r1, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fba9 	bl	8001364 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c16:	f7fe fba5 	bl	8001364 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e066      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 020c 	and.w	r2, r3, #12
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d1eb      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	492c      	ldr	r1, [pc, #176]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d210      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4924      	ldr	r1, [pc, #144]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e036      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4918      	ldr	r1, [pc, #96]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4910      	ldr	r1, [pc, #64]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cca:	f000 f825 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fae8 	bl	80012c4 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08004bf0 	.word	0x08004bf0
 8002d10:	20000004 	.word	0x20000004
 8002d14:	20000008 	.word	0x20000008

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d121      	bne.n	8002d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d11e      	bne.n	8002d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10d      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d102      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d133      	bne.n	8002e0e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xa4>
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xaa>
 8002dba:	e005      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dbe:	617b      	str	r3, [r7, #20]
      break;
 8002dc0:	e005      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc4:	617b      	str	r3, [r7, #20]
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	617b      	str	r3, [r7, #20]
      break;
 8002dcc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	3301      	adds	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	fb02 f203 	mul.w	r2, r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0e5b      	lsrs	r3, r3, #25
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3724      	adds	r7, #36	; 0x24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	08004c08 	.word	0x08004c08
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e48:	f7ff fff0 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08004c00 	.word	0x08004c00

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e74:	f7ff ffda 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08004c00 	.word	0x08004c00

08002e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb4:	f7ff fa04 	bl	80022c0 <HAL_PWREx_GetVoltageRange>
 8002eb8:	6178      	str	r0, [r7, #20]
 8002eba:	e014      	b.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed4:	f7ff f9f4 	bl	80022c0 <HAL_PWREx_GetVoltageRange>
 8002ed8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eda:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d10b      	bne.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d919      	bls.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ef8:	d902      	bls.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002efa:	2302      	movs	r3, #2
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	e013      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f00:	2301      	movs	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e010      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d902      	bls.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e00a      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d102      	bne.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f18:	2302      	movs	r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e004      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b70      	cmp	r3, #112	; 0x70
 8002f22:	d101      	bne.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 0207 	bic.w	r2, r3, #7
 8002f30:	4909      	ldr	r1, [pc, #36]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40022000 	.word	0x40022000

08002f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03f      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f80:	d01c      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f86:	d802      	bhi.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f8c:	e01f      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f92:	d003      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f98:	d01c      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b85      	ldr	r3, [pc, #532]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a84      	ldr	r2, [pc, #528]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fab9 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fba0 	bl	8003708 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	4972      	ldr	r1, [pc, #456]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d03f      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800300c:	d01c      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800300e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003012:	d802      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003018:	e01f      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800301a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800301e:	d003      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003020:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003024:	d01c      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003026:	e018      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003028:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e015      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fa73 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003046:	e00c      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3320      	adds	r3, #32
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fb5a 	bl	8003708 <RCCEx_PLLSAI2_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003058:	e003      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	74fb      	strb	r3, [r7, #19]
      break;
 800305e:	e000      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003068:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003076:	494f      	ldr	r1, [pc, #316]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800307e:	e001      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a0 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	4a40      	ldr	r2, [pc, #256]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6593      	str	r3, [r2, #88]	; 0x58
 80030b8:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d4:	f7fe f946 	bl	8001364 <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030da:	e009      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030dc:	f7fe f942 	bl	8001364 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	74fb      	strb	r3, [r7, #19]
        break;
 80030ee:	e005      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ef      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d15c      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003102:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01f      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	d019      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003120:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe f901 	bl	8001364 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003164:	e00b      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe f8fd 	bl	8001364 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d902      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	74fb      	strb	r3, [r7, #19]
            break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ec      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a2:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031aa:	e009      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c0:	7c7b      	ldrb	r3, [r7, #17]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b9e      	ldr	r3, [pc, #632]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	4a9d      	ldr	r2, [pc, #628]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031de:	4b98      	ldr	r3, [pc, #608]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f023 0203 	bic.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	4994      	ldr	r1, [pc, #592]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003200:	4b8f      	ldr	r3, [pc, #572]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f023 020c 	bic.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	498c      	ldr	r1, [pc, #560]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003222:	4b87      	ldr	r3, [pc, #540]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4983      	ldr	r1, [pc, #524]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003244:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	497b      	ldr	r1, [pc, #492]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	4972      	ldr	r1, [pc, #456]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003288:	4b6d      	ldr	r3, [pc, #436]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	496a      	ldr	r1, [pc, #424]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	4961      	ldr	r1, [pc, #388]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032cc:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	4959      	ldr	r1, [pc, #356]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	4950      	ldr	r1, [pc, #320]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	4948      	ldr	r1, [pc, #288]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	493f      	ldr	r1, [pc, #252]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d028      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003354:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	4937      	ldr	r1, [pc, #220]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003372:	d106      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a31      	ldr	r2, [pc, #196]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	e011      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338a:	d10c      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f8c8 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	491f      	ldr	r1, [pc, #124]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d0:	d106      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d2:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033dc:	60d3      	str	r3, [r2, #12]
 80033de:	e011      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f899 	bl	8003528 <RCCEx_PLLSAI1_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02b      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	4908      	ldr	r1, [pc, #32]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800342e:	d109      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a02      	ldr	r2, [pc, #8]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
 800343c:	e014      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800344c:	d10c      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f867 	bl	8003528 <RCCEx_PLLSAI1_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02f      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003482:	4928      	ldr	r1, [pc, #160]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003492:	d10d      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f844 	bl	8003528 <RCCEx_PLLSAI1_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	74bb      	strb	r3, [r7, #18]
 80034ae:	e011      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3320      	adds	r3, #32
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f921 	bl	8003708 <RCCEx_PLLSAI2_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ee:	490d      	ldr	r1, [pc, #52]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003512:	4904      	ldr	r1, [pc, #16]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800351a:	7cbb      	ldrb	r3, [r7, #18]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000

08003528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003542:	4b70      	ldr	r3, [pc, #448]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0203 	and.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
       ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800355a:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
       ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d044      	beq.n	80035f8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e041      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d00c      	beq.n	8003596 <RCCEx_PLLSAI1_Config+0x6e>
 800357c:	2b03      	cmp	r3, #3
 800357e:	d013      	beq.n	80035a8 <RCCEx_PLLSAI1_Config+0x80>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d120      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003584:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11d      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003594:	e01a      	b.n	80035cc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a6:	e013      	b.n	80035d0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10f      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c4:	e006      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ca:	e004      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035dc:	4b49      	ldr	r3, [pc, #292]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	430b      	orrs	r3, r1
 80035f2:	4944      	ldr	r1, [pc, #272]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d17d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360a:	f7fd feab 	bl	8001364 <HAL_GetTick>
 800360e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003610:	e009      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003612:	f7fd fea7 	bl	8001364 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d902      	bls.n	8003626 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	73fb      	strb	r3, [r7, #15]
        break;
 8003624:	e005      	b.n	8003632 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ef      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d160      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d111      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	0211      	lsls	r1, r2, #8
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68d2      	ldr	r2, [r2, #12]
 8003654:	0912      	lsrs	r2, r2, #4
 8003656:	0452      	lsls	r2, r2, #17
 8003658:	430a      	orrs	r2, r1
 800365a:	492a      	ldr	r1, [pc, #168]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
 8003660:	e027      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d112      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6912      	ldr	r2, [r2, #16]
 800367e:	0852      	lsrs	r2, r2, #1
 8003680:	3a01      	subs	r2, #1
 8003682:	0552      	lsls	r2, r2, #21
 8003684:	430a      	orrs	r2, r1
 8003686:	491f      	ldr	r1, [pc, #124]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	610b      	str	r3, [r1, #16]
 800368c:	e011      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003696:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6892      	ldr	r2, [r2, #8]
 800369e:	0211      	lsls	r1, r2, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6952      	ldr	r2, [r2, #20]
 80036a4:	0852      	lsrs	r2, r2, #1
 80036a6:	3a01      	subs	r2, #1
 80036a8:	0652      	lsls	r2, r2, #25
 80036aa:	430a      	orrs	r2, r1
 80036ac:	4915      	ldr	r1, [pc, #84]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fd fe51 	bl	8001364 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fd fe4d 	bl	8001364 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
          break;
 80036d8:	e005      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ef      	beq.n	80036c6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000

08003708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003716:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d10d      	bne.n	800374e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
       ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
       ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d044      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e041      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d00c      	beq.n	8003776 <RCCEx_PLLSAI2_Config+0x6e>
 800375c:	2b03      	cmp	r3, #3
 800375e:	d013      	beq.n	8003788 <RCCEx_PLLSAI2_Config+0x80>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d120      	bne.n	80037a6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003764:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11d      	bne.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003774:	e01a      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003776:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003786:	e013      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003794:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a4:	e006      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      break;
 80037aa:	e004      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	430b      	orrs	r3, r1
 80037d2:	4939      	ldr	r1, [pc, #228]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d167      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a35      	ldr	r2, [pc, #212]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fd fdbb 	bl	8001364 <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f0:	e009      	b.n	8003806 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f2:	f7fd fdb7 	bl	8001364 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d902      	bls.n	8003806 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	73fb      	strb	r3, [r7, #15]
        break;
 8003804:	e005      	b.n	8003812 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ef      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d14a      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d111      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	0912      	lsrs	r2, r2, #4
 8003836:	0452      	lsls	r2, r2, #17
 8003838:	430a      	orrs	r2, r1
 800383a:	491f      	ldr	r1, [pc, #124]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	614b      	str	r3, [r1, #20]
 8003840:	e011      	b.n	8003866 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800384a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0652      	lsls	r2, r2, #25
 800385e:	430a      	orrs	r2, r1
 8003860:	4915      	ldr	r1, [pc, #84]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fd fd77 	bl	8001364 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003878:	e009      	b.n	800388e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800387a:	f7fd fd73 	bl	8001364 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d902      	bls.n	800388e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	73fb      	strb	r3, [r7, #15]
          break;
 800388c:	e005      	b.n	800389a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ef      	beq.n	800387a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e040      	b.n	8003950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fba0 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8c0 	bl	8003a80 <UART_SetConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fb3e 	bl	8003f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fbc5 	bl	80040d8 <UART_CheckIdleState>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	2b20      	cmp	r3, #32
 800396e:	f040 8081 	bne.w	8003a74 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_UART_Transmit+0x26>
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e079      	b.n	8003a76 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit+0x38>
 800398c:	2302      	movs	r3, #2
 800398e:	e072      	b.n	8003a76 <HAL_UART_Transmit+0x11e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2221      	movs	r2, #33	; 0x21
 80039a2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039a4:	f7fd fcde 	bl	8001364 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d108      	bne.n	80039d6 <HAL_UART_Transmit+0x7e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	e003      	b.n	80039de <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80039e6:	e02d      	b.n	8003a44 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fbb5 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e039      	b.n	8003a76 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a14:	b292      	uxth	r2, r2
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e008      	b.n	8003a32 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1cb      	bne.n	80039e8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb81 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e005      	b.n	8003a76 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a84:	b088      	sub	sp, #32
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4bac      	ldr	r3, [pc, #688]	; (8003d60 <UART_SetConfig+0x2e0>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	69f9      	ldr	r1, [r7, #28]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4aa2      	ldr	r2, [pc, #648]	; (8003d64 <UART_SetConfig+0x2e4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a99      	ldr	r2, [pc, #612]	; (8003d68 <UART_SetConfig+0x2e8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d121      	bne.n	8003b4c <UART_SetConfig+0xcc>
 8003b08:	4b98      	ldr	r3, [pc, #608]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d816      	bhi.n	8003b44 <UART_SetConfig+0xc4>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x9c>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b33 	.word	0x08003b33
 8003b28:	08003b3f 	.word	0x08003b3f
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	76fb      	strb	r3, [r7, #27]
 8003b30:	e0e8      	b.n	8003d04 <UART_SetConfig+0x284>
 8003b32:	2302      	movs	r3, #2
 8003b34:	76fb      	strb	r3, [r7, #27]
 8003b36:	e0e5      	b.n	8003d04 <UART_SetConfig+0x284>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	76fb      	strb	r3, [r7, #27]
 8003b3c:	e0e2      	b.n	8003d04 <UART_SetConfig+0x284>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	76fb      	strb	r3, [r7, #27]
 8003b42:	e0df      	b.n	8003d04 <UART_SetConfig+0x284>
 8003b44:	2310      	movs	r3, #16
 8003b46:	76fb      	strb	r3, [r7, #27]
 8003b48:	bf00      	nop
 8003b4a:	e0db      	b.n	8003d04 <UART_SetConfig+0x284>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a87      	ldr	r2, [pc, #540]	; (8003d70 <UART_SetConfig+0x2f0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d134      	bne.n	8003bc0 <UART_SetConfig+0x140>
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d829      	bhi.n	8003bb8 <UART_SetConfig+0x138>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0xec>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bb9 	.word	0x08003bb9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bad 	.word	0x08003bad
 8003b80:	08003bb9 	.word	0x08003bb9
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bb9 	.word	0x08003bb9
 8003b9c:	08003bb3 	.word	0x08003bb3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	76fb      	strb	r3, [r7, #27]
 8003ba4:	e0ae      	b.n	8003d04 <UART_SetConfig+0x284>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	76fb      	strb	r3, [r7, #27]
 8003baa:	e0ab      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bac:	2304      	movs	r3, #4
 8003bae:	76fb      	strb	r3, [r7, #27]
 8003bb0:	e0a8      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	76fb      	strb	r3, [r7, #27]
 8003bb6:	e0a5      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	76fb      	strb	r3, [r7, #27]
 8003bbc:	bf00      	nop
 8003bbe:	e0a1      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6b      	ldr	r2, [pc, #428]	; (8003d74 <UART_SetConfig+0x2f4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d120      	bne.n	8003c0c <UART_SetConfig+0x18c>
 8003bca:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d00f      	beq.n	8003bf8 <UART_SetConfig+0x178>
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d802      	bhi.n	8003be2 <UART_SetConfig+0x162>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <UART_SetConfig+0x16c>
 8003be0:	e010      	b.n	8003c04 <UART_SetConfig+0x184>
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d005      	beq.n	8003bf2 <UART_SetConfig+0x172>
 8003be6:	2b30      	cmp	r3, #48	; 0x30
 8003be8:	d009      	beq.n	8003bfe <UART_SetConfig+0x17e>
 8003bea:	e00b      	b.n	8003c04 <UART_SetConfig+0x184>
 8003bec:	2300      	movs	r3, #0
 8003bee:	76fb      	strb	r3, [r7, #27]
 8003bf0:	e088      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	76fb      	strb	r3, [r7, #27]
 8003bf6:	e085      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	76fb      	strb	r3, [r7, #27]
 8003bfc:	e082      	b.n	8003d04 <UART_SetConfig+0x284>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	76fb      	strb	r3, [r7, #27]
 8003c02:	e07f      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c04:	2310      	movs	r3, #16
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	bf00      	nop
 8003c0a:	e07b      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <UART_SetConfig+0x2f8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d120      	bne.n	8003c58 <UART_SetConfig+0x1d8>
 8003c16:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d00f      	beq.n	8003c44 <UART_SetConfig+0x1c4>
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d802      	bhi.n	8003c2e <UART_SetConfig+0x1ae>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <UART_SetConfig+0x1b8>
 8003c2c:	e010      	b.n	8003c50 <UART_SetConfig+0x1d0>
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d005      	beq.n	8003c3e <UART_SetConfig+0x1be>
 8003c32:	2bc0      	cmp	r3, #192	; 0xc0
 8003c34:	d009      	beq.n	8003c4a <UART_SetConfig+0x1ca>
 8003c36:	e00b      	b.n	8003c50 <UART_SetConfig+0x1d0>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	e062      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	76fb      	strb	r3, [r7, #27]
 8003c42:	e05f      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c44:	2304      	movs	r3, #4
 8003c46:	76fb      	strb	r3, [r7, #27]
 8003c48:	e05c      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	e059      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c50:	2310      	movs	r3, #16
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	bf00      	nop
 8003c56:	e055      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a47      	ldr	r2, [pc, #284]	; (8003d7c <UART_SetConfig+0x2fc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d124      	bne.n	8003cac <UART_SetConfig+0x22c>
 8003c62:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c70:	d012      	beq.n	8003c98 <UART_SetConfig+0x218>
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d802      	bhi.n	8003c7e <UART_SetConfig+0x1fe>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <UART_SetConfig+0x20c>
 8003c7c:	e012      	b.n	8003ca4 <UART_SetConfig+0x224>
 8003c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c82:	d006      	beq.n	8003c92 <UART_SetConfig+0x212>
 8003c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c88:	d009      	beq.n	8003c9e <UART_SetConfig+0x21e>
 8003c8a:	e00b      	b.n	8003ca4 <UART_SetConfig+0x224>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	76fb      	strb	r3, [r7, #27]
 8003c90:	e038      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c92:	2302      	movs	r3, #2
 8003c94:	76fb      	strb	r3, [r7, #27]
 8003c96:	e035      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e032      	b.n	8003d04 <UART_SetConfig+0x284>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	76fb      	strb	r3, [r7, #27]
 8003ca2:	e02f      	b.n	8003d04 <UART_SetConfig+0x284>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	bf00      	nop
 8003caa:	e02b      	b.n	8003d04 <UART_SetConfig+0x284>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <UART_SetConfig+0x2e4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d124      	bne.n	8003d00 <UART_SetConfig+0x280>
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <UART_SetConfig+0x2ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d012      	beq.n	8003cec <UART_SetConfig+0x26c>
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d802      	bhi.n	8003cd2 <UART_SetConfig+0x252>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <UART_SetConfig+0x260>
 8003cd0:	e012      	b.n	8003cf8 <UART_SetConfig+0x278>
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d006      	beq.n	8003ce6 <UART_SetConfig+0x266>
 8003cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cdc:	d009      	beq.n	8003cf2 <UART_SetConfig+0x272>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x278>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	76fb      	strb	r3, [r7, #27]
 8003ce4:	e00e      	b.n	8003d04 <UART_SetConfig+0x284>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	76fb      	strb	r3, [r7, #27]
 8003cea:	e00b      	b.n	8003d04 <UART_SetConfig+0x284>
 8003cec:	2304      	movs	r3, #4
 8003cee:	76fb      	strb	r3, [r7, #27]
 8003cf0:	e008      	b.n	8003d04 <UART_SetConfig+0x284>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	76fb      	strb	r3, [r7, #27]
 8003cf6:	e005      	b.n	8003d04 <UART_SetConfig+0x284>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	76fb      	strb	r3, [r7, #27]
 8003cfc:	bf00      	nop
 8003cfe:	e001      	b.n	8003d04 <UART_SetConfig+0x284>
 8003d00:	2310      	movs	r3, #16
 8003d02:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <UART_SetConfig+0x2e4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	f040 8087 	bne.w	8003e1e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d10:	7efb      	ldrb	r3, [r7, #27]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d836      	bhi.n	8003d84 <UART_SetConfig+0x304>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0x29c>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d85 	.word	0x08003d85
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d85 	.word	0x08003d85
 8003d2c:	08003d4f 	.word	0x08003d4f
 8003d30:	08003d85 	.word	0x08003d85
 8003d34:	08003d85 	.word	0x08003d85
 8003d38:	08003d85 	.word	0x08003d85
 8003d3c:	08003d57 	.word	0x08003d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7ff f880 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8003d44:	6178      	str	r0, [r7, #20]
        break;
 8003d46:	e022      	b.n	8003d8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <UART_SetConfig+0x300>)
 8003d4a:	617b      	str	r3, [r7, #20]
        break;
 8003d4c:	e01f      	b.n	8003d8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7fe ffe3 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003d52:	6178      	str	r0, [r7, #20]
        break;
 8003d54:	e01b      	b.n	8003d8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5a:	617b      	str	r3, [r7, #20]
        break;
 8003d5c:	e017      	b.n	8003d8e <UART_SetConfig+0x30e>
 8003d5e:	bf00      	nop
 8003d60:	efff69f3 	.word	0xefff69f3
 8003d64:	40008000 	.word	0x40008000
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40004400 	.word	0x40004400
 8003d74:	40004800 	.word	0x40004800
 8003d78:	40004c00 	.word	0x40004c00
 8003d7c:	40005000 	.word	0x40005000
 8003d80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	76bb      	strb	r3, [r7, #26]
        break;
 8003d8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80f1 	beq.w	8003f78 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d305      	bcc.n	8003db2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d902      	bls.n	8003db8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	76bb      	strb	r3, [r7, #26]
 8003db6:	e0df      	b.n	8003f78 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	0214      	lsls	r4, r2, #8
 8003dca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003dce:	020b      	lsls	r3, r1, #8
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	0852      	lsrs	r2, r2, #1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	eb13 0b01 	adds.w	fp, r3, r1
 8003de0:	eb44 0c02 	adc.w	ip, r4, r2
 8003de4:	4658      	mov	r0, fp
 8003de6:	4661      	mov	r1, ip
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f04f 0400 	mov.w	r4, #0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	f7fc fa44 	bl	8000280 <__aeabi_uldivmod>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d308      	bcc.n	8003e18 <UART_SetConfig+0x398>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0c:	d204      	bcs.n	8003e18 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e0af      	b.n	8003f78 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	76bb      	strb	r3, [r7, #26]
 8003e1c:	e0ac      	b.n	8003f78 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d15b      	bne.n	8003ee0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003e28:	7efb      	ldrb	r3, [r7, #27]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d827      	bhi.n	8003e7e <UART_SetConfig+0x3fe>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0x3b4>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe fff4 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	6178      	str	r0, [r7, #20]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff f806 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003e64:	6178      	str	r0, [r7, #20]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <UART_SetConfig+0x510>)
 8003e6a:	617b      	str	r3, [r7, #20]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe ff53 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003e72:	6178      	str	r0, [r7, #20]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	76bb      	strb	r3, [r7, #26]
        break;
 8003e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d074      	beq.n	8003f78 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005a      	lsls	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d916      	bls.n	8003eda <UART_SetConfig+0x45a>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb2:	d212      	bcs.n	8003eda <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f023 030f 	bic.w	r3, r3, #15
 8003ebc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	89fa      	ldrh	r2, [r7, #14]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e04e      	b.n	8003f78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	76bb      	strb	r3, [r7, #26]
 8003ede:	e04b      	b.n	8003f78 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee0:	7efb      	ldrb	r3, [r7, #27]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d827      	bhi.n	8003f36 <UART_SetConfig+0x4b6>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x46c>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe ff98 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8003f14:	6178      	str	r0, [r7, #20]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe ffaa 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	6178      	str	r0, [r7, #20]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <UART_SetConfig+0x510>)
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fef7 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003f2a:	6178      	str	r0, [r7, #20]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085a      	lsrs	r2, r3, #1
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	d908      	bls.n	8003f74 <UART_SetConfig+0x4f4>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d204      	bcs.n	8003f74 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e001      	b.n	8003f78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f84:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004092:	d10a      	bne.n	80040aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040e6:	f7fd f93d 	bl	8001364 <HAL_GetTick>
 80040ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10e      	bne.n	8004118 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f82a 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e020      	b.n	800415a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d10e      	bne.n	8004144 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004126:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f814 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e00a      	b.n	800415a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e05d      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d059      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fd f8f2 	bl	8001364 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <UART_WaitOnFlagUntilTimeout+0x30>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11b      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e042      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02b      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d123      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004200:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e00f      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d092      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000010 	.word	0x20000010

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4e0d      	ldr	r6, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1ba4      	subs	r4, r4, r6
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2500      	movs	r5, #0
 8004270:	42a5      	cmp	r5, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4e0b      	ldr	r6, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 fc26 	bl	8004ac8 <_init>
 800427c:	1ba4      	subs	r4, r4, r6
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2500      	movs	r5, #0
 8004282:	42a5      	cmp	r5, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428c:	4798      	blx	r3
 800428e:	3501      	adds	r5, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004296:	4798      	blx	r3
 8004298:	3501      	adds	r5, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004c74 	.word	0x08004c74
 80042a0:	08004c74 	.word	0x08004c74
 80042a4:	08004c74 	.word	0x08004c74
 80042a8:	08004c78 	.word	0x08004c78

080042ac <memset>:
 80042ac:	4402      	add	r2, r0
 80042ae:	4603      	mov	r3, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <siprintf>:
 80042bc:	b40e      	push	{r1, r2, r3}
 80042be:	b500      	push	{lr}
 80042c0:	b09c      	sub	sp, #112	; 0x70
 80042c2:	ab1d      	add	r3, sp, #116	; 0x74
 80042c4:	9002      	str	r0, [sp, #8]
 80042c6:	9006      	str	r0, [sp, #24]
 80042c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042cc:	4809      	ldr	r0, [pc, #36]	; (80042f4 <siprintf+0x38>)
 80042ce:	9107      	str	r1, [sp, #28]
 80042d0:	9104      	str	r1, [sp, #16]
 80042d2:	4909      	ldr	r1, [pc, #36]	; (80042f8 <siprintf+0x3c>)
 80042d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d8:	9105      	str	r1, [sp, #20]
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	a902      	add	r1, sp, #8
 80042e0:	f000 f866 	bl	80043b0 <_svfiprintf_r>
 80042e4:	9b02      	ldr	r3, [sp, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	b01c      	add	sp, #112	; 0x70
 80042ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80042f0:	b003      	add	sp, #12
 80042f2:	4770      	bx	lr
 80042f4:	20000010 	.word	0x20000010
 80042f8:	ffff0208 	.word	0xffff0208

080042fc <__ssputs_r>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	688e      	ldr	r6, [r1, #8]
 8004302:	429e      	cmp	r6, r3
 8004304:	4682      	mov	sl, r0
 8004306:	460c      	mov	r4, r1
 8004308:	4690      	mov	r8, r2
 800430a:	4699      	mov	r9, r3
 800430c:	d837      	bhi.n	800437e <__ssputs_r+0x82>
 800430e:	898a      	ldrh	r2, [r1, #12]
 8004310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004314:	d031      	beq.n	800437a <__ssputs_r+0x7e>
 8004316:	6825      	ldr	r5, [r4, #0]
 8004318:	6909      	ldr	r1, [r1, #16]
 800431a:	1a6f      	subs	r7, r5, r1
 800431c:	6965      	ldr	r5, [r4, #20]
 800431e:	2302      	movs	r3, #2
 8004320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004324:	fb95 f5f3 	sdiv	r5, r5, r3
 8004328:	f109 0301 	add.w	r3, r9, #1
 800432c:	443b      	add	r3, r7
 800432e:	429d      	cmp	r5, r3
 8004330:	bf38      	it	cc
 8004332:	461d      	movcc	r5, r3
 8004334:	0553      	lsls	r3, r2, #21
 8004336:	d530      	bpl.n	800439a <__ssputs_r+0x9e>
 8004338:	4629      	mov	r1, r5
 800433a:	f000 fb2b 	bl	8004994 <_malloc_r>
 800433e:	4606      	mov	r6, r0
 8004340:	b950      	cbnz	r0, 8004358 <__ssputs_r+0x5c>
 8004342:	230c      	movs	r3, #12
 8004344:	f8ca 3000 	str.w	r3, [sl]
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	463a      	mov	r2, r7
 800435a:	6921      	ldr	r1, [r4, #16]
 800435c:	f000 faa8 	bl	80048b0 <memcpy>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	6126      	str	r6, [r4, #16]
 800436e:	6165      	str	r5, [r4, #20]
 8004370:	443e      	add	r6, r7
 8004372:	1bed      	subs	r5, r5, r7
 8004374:	6026      	str	r6, [r4, #0]
 8004376:	60a5      	str	r5, [r4, #8]
 8004378:	464e      	mov	r6, r9
 800437a:	454e      	cmp	r6, r9
 800437c:	d900      	bls.n	8004380 <__ssputs_r+0x84>
 800437e:	464e      	mov	r6, r9
 8004380:	4632      	mov	r2, r6
 8004382:	4641      	mov	r1, r8
 8004384:	6820      	ldr	r0, [r4, #0]
 8004386:	f000 fa9e 	bl	80048c6 <memmove>
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	1b9b      	subs	r3, r3, r6
 800438e:	60a3      	str	r3, [r4, #8]
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	441e      	add	r6, r3
 8004394:	6026      	str	r6, [r4, #0]
 8004396:	2000      	movs	r0, #0
 8004398:	e7dc      	b.n	8004354 <__ssputs_r+0x58>
 800439a:	462a      	mov	r2, r5
 800439c:	f000 fb54 	bl	8004a48 <_realloc_r>
 80043a0:	4606      	mov	r6, r0
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d1e2      	bne.n	800436c <__ssputs_r+0x70>
 80043a6:	6921      	ldr	r1, [r4, #16]
 80043a8:	4650      	mov	r0, sl
 80043aa:	f000 faa5 	bl	80048f8 <_free_r>
 80043ae:	e7c8      	b.n	8004342 <__ssputs_r+0x46>

080043b0 <_svfiprintf_r>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	461d      	mov	r5, r3
 80043b6:	898b      	ldrh	r3, [r1, #12]
 80043b8:	061f      	lsls	r7, r3, #24
 80043ba:	b09d      	sub	sp, #116	; 0x74
 80043bc:	4680      	mov	r8, r0
 80043be:	460c      	mov	r4, r1
 80043c0:	4616      	mov	r6, r2
 80043c2:	d50f      	bpl.n	80043e4 <_svfiprintf_r+0x34>
 80043c4:	690b      	ldr	r3, [r1, #16]
 80043c6:	b96b      	cbnz	r3, 80043e4 <_svfiprintf_r+0x34>
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	f000 fae3 	bl	8004994 <_malloc_r>
 80043ce:	6020      	str	r0, [r4, #0]
 80043d0:	6120      	str	r0, [r4, #16]
 80043d2:	b928      	cbnz	r0, 80043e0 <_svfiprintf_r+0x30>
 80043d4:	230c      	movs	r3, #12
 80043d6:	f8c8 3000 	str.w	r3, [r8]
 80043da:	f04f 30ff 	mov.w	r0, #4294967295
 80043de:	e0c8      	b.n	8004572 <_svfiprintf_r+0x1c2>
 80043e0:	2340      	movs	r3, #64	; 0x40
 80043e2:	6163      	str	r3, [r4, #20]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9309      	str	r3, [sp, #36]	; 0x24
 80043e8:	2320      	movs	r3, #32
 80043ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ee:	2330      	movs	r3, #48	; 0x30
 80043f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043f4:	9503      	str	r5, [sp, #12]
 80043f6:	f04f 0b01 	mov.w	fp, #1
 80043fa:	4637      	mov	r7, r6
 80043fc:	463d      	mov	r5, r7
 80043fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004402:	b10b      	cbz	r3, 8004408 <_svfiprintf_r+0x58>
 8004404:	2b25      	cmp	r3, #37	; 0x25
 8004406:	d13e      	bne.n	8004486 <_svfiprintf_r+0xd6>
 8004408:	ebb7 0a06 	subs.w	sl, r7, r6
 800440c:	d00b      	beq.n	8004426 <_svfiprintf_r+0x76>
 800440e:	4653      	mov	r3, sl
 8004410:	4632      	mov	r2, r6
 8004412:	4621      	mov	r1, r4
 8004414:	4640      	mov	r0, r8
 8004416:	f7ff ff71 	bl	80042fc <__ssputs_r>
 800441a:	3001      	adds	r0, #1
 800441c:	f000 80a4 	beq.w	8004568 <_svfiprintf_r+0x1b8>
 8004420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004422:	4453      	add	r3, sl
 8004424:	9309      	str	r3, [sp, #36]	; 0x24
 8004426:	783b      	ldrb	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 809d 	beq.w	8004568 <_svfiprintf_r+0x1b8>
 800442e:	2300      	movs	r3, #0
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	9307      	str	r3, [sp, #28]
 800443c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004440:	931a      	str	r3, [sp, #104]	; 0x68
 8004442:	462f      	mov	r7, r5
 8004444:	2205      	movs	r2, #5
 8004446:	f817 1b01 	ldrb.w	r1, [r7], #1
 800444a:	4850      	ldr	r0, [pc, #320]	; (800458c <_svfiprintf_r+0x1dc>)
 800444c:	f7fb fec8 	bl	80001e0 <memchr>
 8004450:	9b04      	ldr	r3, [sp, #16]
 8004452:	b9d0      	cbnz	r0, 800448a <_svfiprintf_r+0xda>
 8004454:	06d9      	lsls	r1, r3, #27
 8004456:	bf44      	itt	mi
 8004458:	2220      	movmi	r2, #32
 800445a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800445e:	071a      	lsls	r2, r3, #28
 8004460:	bf44      	itt	mi
 8004462:	222b      	movmi	r2, #43	; 0x2b
 8004464:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004468:	782a      	ldrb	r2, [r5, #0]
 800446a:	2a2a      	cmp	r2, #42	; 0x2a
 800446c:	d015      	beq.n	800449a <_svfiprintf_r+0xea>
 800446e:	9a07      	ldr	r2, [sp, #28]
 8004470:	462f      	mov	r7, r5
 8004472:	2000      	movs	r0, #0
 8004474:	250a      	movs	r5, #10
 8004476:	4639      	mov	r1, r7
 8004478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800447c:	3b30      	subs	r3, #48	; 0x30
 800447e:	2b09      	cmp	r3, #9
 8004480:	d94d      	bls.n	800451e <_svfiprintf_r+0x16e>
 8004482:	b1b8      	cbz	r0, 80044b4 <_svfiprintf_r+0x104>
 8004484:	e00f      	b.n	80044a6 <_svfiprintf_r+0xf6>
 8004486:	462f      	mov	r7, r5
 8004488:	e7b8      	b.n	80043fc <_svfiprintf_r+0x4c>
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <_svfiprintf_r+0x1dc>)
 800448c:	1a80      	subs	r0, r0, r2
 800448e:	fa0b f000 	lsl.w	r0, fp, r0
 8004492:	4318      	orrs	r0, r3
 8004494:	9004      	str	r0, [sp, #16]
 8004496:	463d      	mov	r5, r7
 8004498:	e7d3      	b.n	8004442 <_svfiprintf_r+0x92>
 800449a:	9a03      	ldr	r2, [sp, #12]
 800449c:	1d11      	adds	r1, r2, #4
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	9103      	str	r1, [sp, #12]
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	db01      	blt.n	80044aa <_svfiprintf_r+0xfa>
 80044a6:	9207      	str	r2, [sp, #28]
 80044a8:	e004      	b.n	80044b4 <_svfiprintf_r+0x104>
 80044aa:	4252      	negs	r2, r2
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	9207      	str	r2, [sp, #28]
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	783b      	ldrb	r3, [r7, #0]
 80044b6:	2b2e      	cmp	r3, #46	; 0x2e
 80044b8:	d10c      	bne.n	80044d4 <_svfiprintf_r+0x124>
 80044ba:	787b      	ldrb	r3, [r7, #1]
 80044bc:	2b2a      	cmp	r3, #42	; 0x2a
 80044be:	d133      	bne.n	8004528 <_svfiprintf_r+0x178>
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	9203      	str	r2, [sp, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfb8      	it	lt
 80044cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80044d0:	3702      	adds	r7, #2
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	4d2e      	ldr	r5, [pc, #184]	; (8004590 <_svfiprintf_r+0x1e0>)
 80044d6:	7839      	ldrb	r1, [r7, #0]
 80044d8:	2203      	movs	r2, #3
 80044da:	4628      	mov	r0, r5
 80044dc:	f7fb fe80 	bl	80001e0 <memchr>
 80044e0:	b138      	cbz	r0, 80044f2 <_svfiprintf_r+0x142>
 80044e2:	2340      	movs	r3, #64	; 0x40
 80044e4:	1b40      	subs	r0, r0, r5
 80044e6:	fa03 f000 	lsl.w	r0, r3, r0
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	4303      	orrs	r3, r0
 80044ee:	3701      	adds	r7, #1
 80044f0:	9304      	str	r3, [sp, #16]
 80044f2:	7839      	ldrb	r1, [r7, #0]
 80044f4:	4827      	ldr	r0, [pc, #156]	; (8004594 <_svfiprintf_r+0x1e4>)
 80044f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044fa:	2206      	movs	r2, #6
 80044fc:	1c7e      	adds	r6, r7, #1
 80044fe:	f7fb fe6f 	bl	80001e0 <memchr>
 8004502:	2800      	cmp	r0, #0
 8004504:	d038      	beq.n	8004578 <_svfiprintf_r+0x1c8>
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <_svfiprintf_r+0x1e8>)
 8004508:	bb13      	cbnz	r3, 8004550 <_svfiprintf_r+0x1a0>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	3307      	adds	r3, #7
 800450e:	f023 0307 	bic.w	r3, r3, #7
 8004512:	3308      	adds	r3, #8
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004518:	444b      	add	r3, r9
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	e76d      	b.n	80043fa <_svfiprintf_r+0x4a>
 800451e:	fb05 3202 	mla	r2, r5, r2, r3
 8004522:	2001      	movs	r0, #1
 8004524:	460f      	mov	r7, r1
 8004526:	e7a6      	b.n	8004476 <_svfiprintf_r+0xc6>
 8004528:	2300      	movs	r3, #0
 800452a:	3701      	adds	r7, #1
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	4619      	mov	r1, r3
 8004530:	250a      	movs	r5, #10
 8004532:	4638      	mov	r0, r7
 8004534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004538:	3a30      	subs	r2, #48	; 0x30
 800453a:	2a09      	cmp	r2, #9
 800453c:	d903      	bls.n	8004546 <_svfiprintf_r+0x196>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0c8      	beq.n	80044d4 <_svfiprintf_r+0x124>
 8004542:	9105      	str	r1, [sp, #20]
 8004544:	e7c6      	b.n	80044d4 <_svfiprintf_r+0x124>
 8004546:	fb05 2101 	mla	r1, r5, r1, r2
 800454a:	2301      	movs	r3, #1
 800454c:	4607      	mov	r7, r0
 800454e:	e7f0      	b.n	8004532 <_svfiprintf_r+0x182>
 8004550:	ab03      	add	r3, sp, #12
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4622      	mov	r2, r4
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <_svfiprintf_r+0x1ec>)
 8004558:	a904      	add	r1, sp, #16
 800455a:	4640      	mov	r0, r8
 800455c:	f3af 8000 	nop.w
 8004560:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004564:	4681      	mov	r9, r0
 8004566:	d1d6      	bne.n	8004516 <_svfiprintf_r+0x166>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	065b      	lsls	r3, r3, #25
 800456c:	f53f af35 	bmi.w	80043da <_svfiprintf_r+0x2a>
 8004570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004572:	b01d      	add	sp, #116	; 0x74
 8004574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004578:	ab03      	add	r3, sp, #12
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4622      	mov	r2, r4
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <_svfiprintf_r+0x1ec>)
 8004580:	a904      	add	r1, sp, #16
 8004582:	4640      	mov	r0, r8
 8004584:	f000 f882 	bl	800468c <_printf_i>
 8004588:	e7ea      	b.n	8004560 <_svfiprintf_r+0x1b0>
 800458a:	bf00      	nop
 800458c:	08004c38 	.word	0x08004c38
 8004590:	08004c3e 	.word	0x08004c3e
 8004594:	08004c42 	.word	0x08004c42
 8004598:	00000000 	.word	0x00000000
 800459c:	080042fd 	.word	0x080042fd

080045a0 <_printf_common>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4691      	mov	r9, r2
 80045a6:	461f      	mov	r7, r3
 80045a8:	688a      	ldr	r2, [r1, #8]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bfb8      	it	lt
 80045b4:	4613      	movlt	r3, r2
 80045b6:	f8c9 3000 	str.w	r3, [r9]
 80045ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045be:	4606      	mov	r6, r0
 80045c0:	460c      	mov	r4, r1
 80045c2:	b112      	cbz	r2, 80045ca <_printf_common+0x2a>
 80045c4:	3301      	adds	r3, #1
 80045c6:	f8c9 3000 	str.w	r3, [r9]
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	0699      	lsls	r1, r3, #26
 80045ce:	bf42      	ittt	mi
 80045d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045d4:	3302      	addmi	r3, #2
 80045d6:	f8c9 3000 	strmi.w	r3, [r9]
 80045da:	6825      	ldr	r5, [r4, #0]
 80045dc:	f015 0506 	ands.w	r5, r5, #6
 80045e0:	d107      	bne.n	80045f2 <_printf_common+0x52>
 80045e2:	f104 0a19 	add.w	sl, r4, #25
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	f8d9 2000 	ldr.w	r2, [r9]
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	42ab      	cmp	r3, r5
 80045f0:	dc28      	bgt.n	8004644 <_printf_common+0xa4>
 80045f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	3300      	adds	r3, #0
 80045fa:	bf18      	it	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	0692      	lsls	r2, r2, #26
 8004600:	d42d      	bmi.n	800465e <_printf_common+0xbe>
 8004602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004606:	4639      	mov	r1, r7
 8004608:	4630      	mov	r0, r6
 800460a:	47c0      	blx	r8
 800460c:	3001      	adds	r0, #1
 800460e:	d020      	beq.n	8004652 <_printf_common+0xb2>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	68e5      	ldr	r5, [r4, #12]
 8004614:	f8d9 2000 	ldr.w	r2, [r9]
 8004618:	f003 0306 	and.w	r3, r3, #6
 800461c:	2b04      	cmp	r3, #4
 800461e:	bf08      	it	eq
 8004620:	1aad      	subeq	r5, r5, r2
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	bf0c      	ite	eq
 8004628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800462c:	2500      	movne	r5, #0
 800462e:	4293      	cmp	r3, r2
 8004630:	bfc4      	itt	gt
 8004632:	1a9b      	subgt	r3, r3, r2
 8004634:	18ed      	addgt	r5, r5, r3
 8004636:	f04f 0900 	mov.w	r9, #0
 800463a:	341a      	adds	r4, #26
 800463c:	454d      	cmp	r5, r9
 800463e:	d11a      	bne.n	8004676 <_printf_common+0xd6>
 8004640:	2000      	movs	r0, #0
 8004642:	e008      	b.n	8004656 <_printf_common+0xb6>
 8004644:	2301      	movs	r3, #1
 8004646:	4652      	mov	r2, sl
 8004648:	4639      	mov	r1, r7
 800464a:	4630      	mov	r0, r6
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d103      	bne.n	800465a <_printf_common+0xba>
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465a:	3501      	adds	r5, #1
 800465c:	e7c3      	b.n	80045e6 <_printf_common+0x46>
 800465e:	18e1      	adds	r1, r4, r3
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	2030      	movs	r0, #48	; 0x30
 8004664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004668:	4422      	add	r2, r4
 800466a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800466e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004672:	3302      	adds	r3, #2
 8004674:	e7c5      	b.n	8004602 <_printf_common+0x62>
 8004676:	2301      	movs	r3, #1
 8004678:	4622      	mov	r2, r4
 800467a:	4639      	mov	r1, r7
 800467c:	4630      	mov	r0, r6
 800467e:	47c0      	blx	r8
 8004680:	3001      	adds	r0, #1
 8004682:	d0e6      	beq.n	8004652 <_printf_common+0xb2>
 8004684:	f109 0901 	add.w	r9, r9, #1
 8004688:	e7d8      	b.n	800463c <_printf_common+0x9c>
	...

0800468c <_printf_i>:
 800468c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004690:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004694:	460c      	mov	r4, r1
 8004696:	7e09      	ldrb	r1, [r1, #24]
 8004698:	b085      	sub	sp, #20
 800469a:	296e      	cmp	r1, #110	; 0x6e
 800469c:	4617      	mov	r7, r2
 800469e:	4606      	mov	r6, r0
 80046a0:	4698      	mov	r8, r3
 80046a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046a4:	f000 80b3 	beq.w	800480e <_printf_i+0x182>
 80046a8:	d822      	bhi.n	80046f0 <_printf_i+0x64>
 80046aa:	2963      	cmp	r1, #99	; 0x63
 80046ac:	d036      	beq.n	800471c <_printf_i+0x90>
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x3a>
 80046b0:	2900      	cmp	r1, #0
 80046b2:	f000 80b9 	beq.w	8004828 <_printf_i+0x19c>
 80046b6:	2958      	cmp	r1, #88	; 0x58
 80046b8:	f000 8083 	beq.w	80047c2 <_printf_i+0x136>
 80046bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046c4:	e032      	b.n	800472c <_printf_i+0xa0>
 80046c6:	2964      	cmp	r1, #100	; 0x64
 80046c8:	d001      	beq.n	80046ce <_printf_i+0x42>
 80046ca:	2969      	cmp	r1, #105	; 0x69
 80046cc:	d1f6      	bne.n	80046bc <_printf_i+0x30>
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	0605      	lsls	r5, r0, #24
 80046d4:	f103 0104 	add.w	r1, r3, #4
 80046d8:	d52a      	bpl.n	8004730 <_printf_i+0xa4>
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da03      	bge.n	80046ea <_printf_i+0x5e>
 80046e2:	222d      	movs	r2, #45	; 0x2d
 80046e4:	425b      	negs	r3, r3
 80046e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046ea:	486f      	ldr	r0, [pc, #444]	; (80048a8 <_printf_i+0x21c>)
 80046ec:	220a      	movs	r2, #10
 80046ee:	e039      	b.n	8004764 <_printf_i+0xd8>
 80046f0:	2973      	cmp	r1, #115	; 0x73
 80046f2:	f000 809d 	beq.w	8004830 <_printf_i+0x1a4>
 80046f6:	d808      	bhi.n	800470a <_printf_i+0x7e>
 80046f8:	296f      	cmp	r1, #111	; 0x6f
 80046fa:	d020      	beq.n	800473e <_printf_i+0xb2>
 80046fc:	2970      	cmp	r1, #112	; 0x70
 80046fe:	d1dd      	bne.n	80046bc <_printf_i+0x30>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	e003      	b.n	8004712 <_printf_i+0x86>
 800470a:	2975      	cmp	r1, #117	; 0x75
 800470c:	d017      	beq.n	800473e <_printf_i+0xb2>
 800470e:	2978      	cmp	r1, #120	; 0x78
 8004710:	d1d4      	bne.n	80046bc <_printf_i+0x30>
 8004712:	2378      	movs	r3, #120	; 0x78
 8004714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004718:	4864      	ldr	r0, [pc, #400]	; (80048ac <_printf_i+0x220>)
 800471a:	e055      	b.n	80047c8 <_printf_i+0x13c>
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	1d19      	adds	r1, r3, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6011      	str	r1, [r2, #0]
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800472c:	2301      	movs	r3, #1
 800472e:	e08c      	b.n	800484a <_printf_i+0x1be>
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6011      	str	r1, [r2, #0]
 8004734:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004738:	bf18      	it	ne
 800473a:	b21b      	sxthne	r3, r3
 800473c:	e7cf      	b.n	80046de <_printf_i+0x52>
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1d18      	adds	r0, r3, #4
 8004744:	6010      	str	r0, [r2, #0]
 8004746:	0628      	lsls	r0, r5, #24
 8004748:	d501      	bpl.n	800474e <_printf_i+0xc2>
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	e002      	b.n	8004754 <_printf_i+0xc8>
 800474e:	0668      	lsls	r0, r5, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0xbe>
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	4854      	ldr	r0, [pc, #336]	; (80048a8 <_printf_i+0x21c>)
 8004756:	296f      	cmp	r1, #111	; 0x6f
 8004758:	bf14      	ite	ne
 800475a:	220a      	movne	r2, #10
 800475c:	2208      	moveq	r2, #8
 800475e:	2100      	movs	r1, #0
 8004760:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004764:	6865      	ldr	r5, [r4, #4]
 8004766:	60a5      	str	r5, [r4, #8]
 8004768:	2d00      	cmp	r5, #0
 800476a:	f2c0 8095 	blt.w	8004898 <_printf_i+0x20c>
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	f021 0104 	bic.w	r1, r1, #4
 8004774:	6021      	str	r1, [r4, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d13d      	bne.n	80047f6 <_printf_i+0x16a>
 800477a:	2d00      	cmp	r5, #0
 800477c:	f040 808e 	bne.w	800489c <_printf_i+0x210>
 8004780:	4665      	mov	r5, ip
 8004782:	2a08      	cmp	r2, #8
 8004784:	d10b      	bne.n	800479e <_printf_i+0x112>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d508      	bpl.n	800479e <_printf_i+0x112>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	bfde      	ittt	le
 8004794:	2330      	movle	r3, #48	; 0x30
 8004796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800479a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800479e:	ebac 0305 	sub.w	r3, ip, r5
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	f8cd 8000 	str.w	r8, [sp]
 80047a8:	463b      	mov	r3, r7
 80047aa:	aa03      	add	r2, sp, #12
 80047ac:	4621      	mov	r1, r4
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7ff fef6 	bl	80045a0 <_printf_common>
 80047b4:	3001      	adds	r0, #1
 80047b6:	d14d      	bne.n	8004854 <_printf_i+0x1c8>
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	b005      	add	sp, #20
 80047be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047c2:	4839      	ldr	r0, [pc, #228]	; (80048a8 <_printf_i+0x21c>)
 80047c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047c8:	6813      	ldr	r3, [r2, #0]
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	1d1d      	adds	r5, r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6015      	str	r5, [r2, #0]
 80047d2:	060a      	lsls	r2, r1, #24
 80047d4:	d50b      	bpl.n	80047ee <_printf_i+0x162>
 80047d6:	07ca      	lsls	r2, r1, #31
 80047d8:	bf44      	itt	mi
 80047da:	f041 0120 	orrmi.w	r1, r1, #32
 80047de:	6021      	strmi	r1, [r4, #0]
 80047e0:	b91b      	cbnz	r3, 80047ea <_printf_i+0x15e>
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	f022 0220 	bic.w	r2, r2, #32
 80047e8:	6022      	str	r2, [r4, #0]
 80047ea:	2210      	movs	r2, #16
 80047ec:	e7b7      	b.n	800475e <_printf_i+0xd2>
 80047ee:	064d      	lsls	r5, r1, #25
 80047f0:	bf48      	it	mi
 80047f2:	b29b      	uxthmi	r3, r3
 80047f4:	e7ef      	b.n	80047d6 <_printf_i+0x14a>
 80047f6:	4665      	mov	r5, ip
 80047f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80047fc:	fb02 3311 	mls	r3, r2, r1, r3
 8004800:	5cc3      	ldrb	r3, [r0, r3]
 8004802:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004806:	460b      	mov	r3, r1
 8004808:	2900      	cmp	r1, #0
 800480a:	d1f5      	bne.n	80047f8 <_printf_i+0x16c>
 800480c:	e7b9      	b.n	8004782 <_printf_i+0xf6>
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	6825      	ldr	r5, [r4, #0]
 8004812:	6961      	ldr	r1, [r4, #20]
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	6010      	str	r0, [r2, #0]
 8004818:	0628      	lsls	r0, r5, #24
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	d501      	bpl.n	8004822 <_printf_i+0x196>
 800481e:	6019      	str	r1, [r3, #0]
 8004820:	e002      	b.n	8004828 <_printf_i+0x19c>
 8004822:	066a      	lsls	r2, r5, #25
 8004824:	d5fb      	bpl.n	800481e <_printf_i+0x192>
 8004826:	8019      	strh	r1, [r3, #0]
 8004828:	2300      	movs	r3, #0
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	4665      	mov	r5, ip
 800482e:	e7b9      	b.n	80047a4 <_printf_i+0x118>
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	1d19      	adds	r1, r3, #4
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	681d      	ldr	r5, [r3, #0]
 8004838:	6862      	ldr	r2, [r4, #4]
 800483a:	2100      	movs	r1, #0
 800483c:	4628      	mov	r0, r5
 800483e:	f7fb fccf 	bl	80001e0 <memchr>
 8004842:	b108      	cbz	r0, 8004848 <_printf_i+0x1bc>
 8004844:	1b40      	subs	r0, r0, r5
 8004846:	6060      	str	r0, [r4, #4]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	2300      	movs	r3, #0
 800484e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004852:	e7a7      	b.n	80047a4 <_printf_i+0x118>
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	462a      	mov	r2, r5
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d0aa      	beq.n	80047b8 <_printf_i+0x12c>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	079b      	lsls	r3, r3, #30
 8004866:	d413      	bmi.n	8004890 <_printf_i+0x204>
 8004868:	68e0      	ldr	r0, [r4, #12]
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	4298      	cmp	r0, r3
 800486e:	bfb8      	it	lt
 8004870:	4618      	movlt	r0, r3
 8004872:	e7a3      	b.n	80047bc <_printf_i+0x130>
 8004874:	2301      	movs	r3, #1
 8004876:	464a      	mov	r2, r9
 8004878:	4639      	mov	r1, r7
 800487a:	4630      	mov	r0, r6
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d09a      	beq.n	80047b8 <_printf_i+0x12c>
 8004882:	3501      	adds	r5, #1
 8004884:	68e3      	ldr	r3, [r4, #12]
 8004886:	9a03      	ldr	r2, [sp, #12]
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	42ab      	cmp	r3, r5
 800488c:	dcf2      	bgt.n	8004874 <_printf_i+0x1e8>
 800488e:	e7eb      	b.n	8004868 <_printf_i+0x1dc>
 8004890:	2500      	movs	r5, #0
 8004892:	f104 0919 	add.w	r9, r4, #25
 8004896:	e7f5      	b.n	8004884 <_printf_i+0x1f8>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ac      	bne.n	80047f6 <_printf_i+0x16a>
 800489c:	7803      	ldrb	r3, [r0, #0]
 800489e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a6:	e76c      	b.n	8004782 <_printf_i+0xf6>
 80048a8:	08004c49 	.word	0x08004c49
 80048ac:	08004c5a 	.word	0x08004c5a

080048b0 <memcpy>:
 80048b0:	b510      	push	{r4, lr}
 80048b2:	1e43      	subs	r3, r0, #1
 80048b4:	440a      	add	r2, r1
 80048b6:	4291      	cmp	r1, r2
 80048b8:	d100      	bne.n	80048bc <memcpy+0xc>
 80048ba:	bd10      	pop	{r4, pc}
 80048bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c4:	e7f7      	b.n	80048b6 <memcpy+0x6>

080048c6 <memmove>:
 80048c6:	4288      	cmp	r0, r1
 80048c8:	b510      	push	{r4, lr}
 80048ca:	eb01 0302 	add.w	r3, r1, r2
 80048ce:	d807      	bhi.n	80048e0 <memmove+0x1a>
 80048d0:	1e42      	subs	r2, r0, #1
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d00a      	beq.n	80048ec <memmove+0x26>
 80048d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048de:	e7f8      	b.n	80048d2 <memmove+0xc>
 80048e0:	4283      	cmp	r3, r0
 80048e2:	d9f5      	bls.n	80048d0 <memmove+0xa>
 80048e4:	1881      	adds	r1, r0, r2
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	42d3      	cmn	r3, r2
 80048ea:	d100      	bne.n	80048ee <memmove+0x28>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048f6:	e7f7      	b.n	80048e8 <memmove+0x22>

080048f8 <_free_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d045      	beq.n	800498c <_free_r+0x94>
 8004900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004904:	1f0c      	subs	r4, r1, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfb8      	it	lt
 800490a:	18e4      	addlt	r4, r4, r3
 800490c:	f000 f8d2 	bl	8004ab4 <__malloc_lock>
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <_free_r+0x98>)
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	4610      	mov	r0, r2
 8004916:	b933      	cbnz	r3, 8004926 <_free_r+0x2e>
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	6014      	str	r4, [r2, #0]
 800491c:	4628      	mov	r0, r5
 800491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004922:	f000 b8c8 	b.w	8004ab6 <__malloc_unlock>
 8004926:	42a3      	cmp	r3, r4
 8004928:	d90c      	bls.n	8004944 <_free_r+0x4c>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	1862      	adds	r2, r4, r1
 800492e:	4293      	cmp	r3, r2
 8004930:	bf04      	itt	eq
 8004932:	681a      	ldreq	r2, [r3, #0]
 8004934:	685b      	ldreq	r3, [r3, #4]
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	bf04      	itt	eq
 800493a:	1852      	addeq	r2, r2, r1
 800493c:	6022      	streq	r2, [r4, #0]
 800493e:	6004      	str	r4, [r0, #0]
 8004940:	e7ec      	b.n	800491c <_free_r+0x24>
 8004942:	4613      	mov	r3, r2
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	b10a      	cbz	r2, 800494c <_free_r+0x54>
 8004948:	42a2      	cmp	r2, r4
 800494a:	d9fa      	bls.n	8004942 <_free_r+0x4a>
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	1858      	adds	r0, r3, r1
 8004950:	42a0      	cmp	r0, r4
 8004952:	d10b      	bne.n	800496c <_free_r+0x74>
 8004954:	6820      	ldr	r0, [r4, #0]
 8004956:	4401      	add	r1, r0
 8004958:	1858      	adds	r0, r3, r1
 800495a:	4282      	cmp	r2, r0
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	d1dd      	bne.n	800491c <_free_r+0x24>
 8004960:	6810      	ldr	r0, [r2, #0]
 8004962:	6852      	ldr	r2, [r2, #4]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	4401      	add	r1, r0
 8004968:	6019      	str	r1, [r3, #0]
 800496a:	e7d7      	b.n	800491c <_free_r+0x24>
 800496c:	d902      	bls.n	8004974 <_free_r+0x7c>
 800496e:	230c      	movs	r3, #12
 8004970:	602b      	str	r3, [r5, #0]
 8004972:	e7d3      	b.n	800491c <_free_r+0x24>
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	1821      	adds	r1, r4, r0
 8004978:	428a      	cmp	r2, r1
 800497a:	bf04      	itt	eq
 800497c:	6811      	ldreq	r1, [r2, #0]
 800497e:	6852      	ldreq	r2, [r2, #4]
 8004980:	6062      	str	r2, [r4, #4]
 8004982:	bf04      	itt	eq
 8004984:	1809      	addeq	r1, r1, r0
 8004986:	6021      	streq	r1, [r4, #0]
 8004988:	605c      	str	r4, [r3, #4]
 800498a:	e7c7      	b.n	800491c <_free_r+0x24>
 800498c:	bd38      	pop	{r3, r4, r5, pc}
 800498e:	bf00      	nop
 8004990:	20000094 	.word	0x20000094

08004994 <_malloc_r>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	1ccd      	adds	r5, r1, #3
 8004998:	f025 0503 	bic.w	r5, r5, #3
 800499c:	3508      	adds	r5, #8
 800499e:	2d0c      	cmp	r5, #12
 80049a0:	bf38      	it	cc
 80049a2:	250c      	movcc	r5, #12
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	4606      	mov	r6, r0
 80049a8:	db01      	blt.n	80049ae <_malloc_r+0x1a>
 80049aa:	42a9      	cmp	r1, r5
 80049ac:	d903      	bls.n	80049b6 <_malloc_r+0x22>
 80049ae:	230c      	movs	r3, #12
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	2000      	movs	r0, #0
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
 80049b6:	f000 f87d 	bl	8004ab4 <__malloc_lock>
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <_malloc_r+0xac>)
 80049bc:	6814      	ldr	r4, [r2, #0]
 80049be:	4621      	mov	r1, r4
 80049c0:	b991      	cbnz	r1, 80049e8 <_malloc_r+0x54>
 80049c2:	4c20      	ldr	r4, [pc, #128]	; (8004a44 <_malloc_r+0xb0>)
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	b91b      	cbnz	r3, 80049d0 <_malloc_r+0x3c>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f863 	bl	8004a94 <_sbrk_r>
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	4629      	mov	r1, r5
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f85e 	bl	8004a94 <_sbrk_r>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d124      	bne.n	8004a26 <_malloc_r+0x92>
 80049dc:	230c      	movs	r3, #12
 80049de:	6033      	str	r3, [r6, #0]
 80049e0:	4630      	mov	r0, r6
 80049e2:	f000 f868 	bl	8004ab6 <__malloc_unlock>
 80049e6:	e7e4      	b.n	80049b2 <_malloc_r+0x1e>
 80049e8:	680b      	ldr	r3, [r1, #0]
 80049ea:	1b5b      	subs	r3, r3, r5
 80049ec:	d418      	bmi.n	8004a20 <_malloc_r+0x8c>
 80049ee:	2b0b      	cmp	r3, #11
 80049f0:	d90f      	bls.n	8004a12 <_malloc_r+0x7e>
 80049f2:	600b      	str	r3, [r1, #0]
 80049f4:	50cd      	str	r5, [r1, r3]
 80049f6:	18cc      	adds	r4, r1, r3
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f85c 	bl	8004ab6 <__malloc_unlock>
 80049fe:	f104 000b 	add.w	r0, r4, #11
 8004a02:	1d23      	adds	r3, r4, #4
 8004a04:	f020 0007 	bic.w	r0, r0, #7
 8004a08:	1ac3      	subs	r3, r0, r3
 8004a0a:	d0d3      	beq.n	80049b4 <_malloc_r+0x20>
 8004a0c:	425a      	negs	r2, r3
 8004a0e:	50e2      	str	r2, [r4, r3]
 8004a10:	e7d0      	b.n	80049b4 <_malloc_r+0x20>
 8004a12:	428c      	cmp	r4, r1
 8004a14:	684b      	ldr	r3, [r1, #4]
 8004a16:	bf16      	itet	ne
 8004a18:	6063      	strne	r3, [r4, #4]
 8004a1a:	6013      	streq	r3, [r2, #0]
 8004a1c:	460c      	movne	r4, r1
 8004a1e:	e7eb      	b.n	80049f8 <_malloc_r+0x64>
 8004a20:	460c      	mov	r4, r1
 8004a22:	6849      	ldr	r1, [r1, #4]
 8004a24:	e7cc      	b.n	80049c0 <_malloc_r+0x2c>
 8004a26:	1cc4      	adds	r4, r0, #3
 8004a28:	f024 0403 	bic.w	r4, r4, #3
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d005      	beq.n	8004a3c <_malloc_r+0xa8>
 8004a30:	1a21      	subs	r1, r4, r0
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 f82e 	bl	8004a94 <_sbrk_r>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0cf      	beq.n	80049dc <_malloc_r+0x48>
 8004a3c:	6025      	str	r5, [r4, #0]
 8004a3e:	e7db      	b.n	80049f8 <_malloc_r+0x64>
 8004a40:	20000094 	.word	0x20000094
 8004a44:	20000098 	.word	0x20000098

08004a48 <_realloc_r>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	460e      	mov	r6, r1
 8004a50:	b921      	cbnz	r1, 8004a5c <_realloc_r+0x14>
 8004a52:	4611      	mov	r1, r2
 8004a54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a58:	f7ff bf9c 	b.w	8004994 <_malloc_r>
 8004a5c:	b922      	cbnz	r2, 8004a68 <_realloc_r+0x20>
 8004a5e:	f7ff ff4b 	bl	80048f8 <_free_r>
 8004a62:	4625      	mov	r5, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	f000 f826 	bl	8004ab8 <_malloc_usable_size_r>
 8004a6c:	42a0      	cmp	r0, r4
 8004a6e:	d20f      	bcs.n	8004a90 <_realloc_r+0x48>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4638      	mov	r0, r7
 8004a74:	f7ff ff8e 	bl	8004994 <_malloc_r>
 8004a78:	4605      	mov	r5, r0
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d0f2      	beq.n	8004a64 <_realloc_r+0x1c>
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4622      	mov	r2, r4
 8004a82:	f7ff ff15 	bl	80048b0 <memcpy>
 8004a86:	4631      	mov	r1, r6
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f7ff ff35 	bl	80048f8 <_free_r>
 8004a8e:	e7e9      	b.n	8004a64 <_realloc_r+0x1c>
 8004a90:	4635      	mov	r5, r6
 8004a92:	e7e7      	b.n	8004a64 <_realloc_r+0x1c>

08004a94 <_sbrk_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4c06      	ldr	r4, [pc, #24]	; (8004ab0 <_sbrk_r+0x1c>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	f7fc fb62 	bl	8001168 <_sbrk>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_sbrk_r+0x1a>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_sbrk_r+0x1a>
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	200001ec 	.word	0x200001ec

08004ab4 <__malloc_lock>:
 8004ab4:	4770      	bx	lr

08004ab6 <__malloc_unlock>:
 8004ab6:	4770      	bx	lr

08004ab8 <_malloc_usable_size_r>:
 8004ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004abc:	1f18      	subs	r0, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bfbc      	itt	lt
 8004ac2:	580b      	ldrlt	r3, [r1, r0]
 8004ac4:	18c0      	addlt	r0, r0, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_init>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_fini>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr
