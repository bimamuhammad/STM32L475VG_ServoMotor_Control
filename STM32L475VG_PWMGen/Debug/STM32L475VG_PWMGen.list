
STM32L475VG_PWMGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db0  08002db0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002dc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002dc4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015bd  00000000  00000000  0002ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025067  00000000  00000000  0002d750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a2a  00000000  00000000  000527b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8efa  00000000  00000000  0005b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001440db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  00144158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d58 	.word	0x08002d58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d58 	.word	0x08002d58

080001c8 <set_led>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//set value for led
void set_led(uint32_t lght)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR1 = lght; //LED
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <set_led+0x24>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR3 = lght; //Servo MOto
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <set_led+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	20000028 	.word	0x20000028

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fa6c 	bl	80006d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f835 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f905 	bl	800040c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000202:	f000 f881 	bl	8000308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	4816      	ldr	r0, [pc, #88]	; (8000264 <main+0x74>)
 800020a:	f001 fc81 	bl	8001b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800020e:	2108      	movs	r1, #8
 8000210:	4814      	ldr	r0, [pc, #80]	; (8000264 <main+0x74>)
 8000212:	f001 fc7d 	bl	8001b10 <HAL_TIM_PWM_Start>
  int i = 1000;
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	 //HAL_Delay(250);//Delay
	  	 while(i<10000)
 800021c:	e009      	b.n	8000232 <main+0x42>
	  	 {
	  		 set_led(i);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	f7ff ffd1 	bl	80001c8 <set_led>
	  		 i=i+50;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	3332      	adds	r3, #50	; 0x32
 800022a:	607b      	str	r3, [r7, #4]
	  		 HAL_Delay(10);//Delay
 800022c:	200a      	movs	r0, #10
 800022e:	f000 fac5 	bl	80007bc <HAL_Delay>
	  	 while(i<10000)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f242 720f 	movw	r2, #9999	; 0x270f
 8000238:	4293      	cmp	r3, r2
 800023a:	ddf0      	ble.n	800021e <main+0x2e>
	  	 }
	  	while(i>=1000)
 800023c:	e009      	b.n	8000252 <main+0x62>
			 {
				 set_led(i);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4618      	mov	r0, r3
 8000242:	f7ff ffc1 	bl	80001c8 <set_led>
				 i=i-50;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3b32      	subs	r3, #50	; 0x32
 800024a:	607b      	str	r3, [r7, #4]
				 HAL_Delay(10);//Delay
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fab5 	bl	80007bc <HAL_Delay>
	  	while(i>=1000)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000258:	daf1      	bge.n	800023e <main+0x4e>
			 }
	  	i = 1000;
 800025a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800025e:	607b      	str	r3, [r7, #4]
	  	 while(i<10000)
 8000260:	e7e7      	b.n	8000232 <main+0x42>
 8000262:	bf00      	nop
 8000264:	20000028 	.word	0x20000028

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b096      	sub	sp, #88	; 0x58
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	2244      	movs	r2, #68	; 0x44
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fd66 	bl	8002d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	2303      	movs	r3, #3
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800029c:	2302      	movs	r3, #2
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 80002a0:	2350      	movs	r3, #80	; 0x50
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a4:	2307      	movs	r3, #7
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002ac:	2304      	movs	r3, #4
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fdc1 	bl	8000e3c <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002c0:	f000 f8ec 	bl	800049c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80002d4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002da:	463b      	mov	r3, r7
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 f992 	bl	8001608 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002ea:	f000 f8d7 	bl	800049c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f2:	f000 fd4d 	bl	8000d90 <HAL_PWREx_ControlVoltageScaling>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002fc:	f000 f8ce 	bl	800049c <Error_Handler>
  }
}
 8000300:	bf00      	nop
 8000302:	3758      	adds	r7, #88	; 0x58
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08e      	sub	sp, #56	; 0x38
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033a:	4b32      	ldr	r3, [pc, #200]	; (8000404 <MX_TIM2_Init+0xfc>)
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_TIM2_Init+0xfc>)
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_TIM2_Init+0xfc>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000 -1 ;
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_TIM2_Init+0xfc>)
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <MX_TIM2_Init+0x100>)
 8000352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_TIM2_Init+0xfc>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_TIM2_Init+0xfc>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000360:	4828      	ldr	r0, [pc, #160]	; (8000404 <MX_TIM2_Init+0xfc>)
 8000362:	f001 fb1d 	bl	80019a0 <HAL_TIM_Base_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800036c:	f000 f896 	bl	800049c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4619      	mov	r1, r3
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <MX_TIM2_Init+0xfc>)
 800037e:	f001 fefd 	bl	800217c <HAL_TIM_ConfigClockSource>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000388:	f000 f888 	bl	800049c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800038c:	481d      	ldr	r0, [pc, #116]	; (8000404 <MX_TIM2_Init+0xfc>)
 800038e:	f001 fb5e 	bl	8001a4e <HAL_TIM_PWM_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000398:	f000 f880 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	4619      	mov	r1, r3
 80003aa:	4816      	ldr	r0, [pc, #88]	; (8000404 <MX_TIM2_Init+0xfc>)
 80003ac:	f002 fc02 	bl	8002bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003b6:	f000 f871 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ba:	2360      	movs	r3, #96	; 0x60
 80003bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	4619      	mov	r1, r3
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_TIM2_Init+0xfc>)
 80003d2:	f001 fdc3 	bl	8001f5c <HAL_TIM_PWM_ConfigChannel>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003dc:	f000 f85e 	bl	800049c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003e0:	463b      	mov	r3, r7
 80003e2:	2208      	movs	r2, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <MX_TIM2_Init+0xfc>)
 80003e8:	f001 fdb8 	bl	8001f5c <HAL_TIM_PWM_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80003f2:	f000 f853 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f6:	4803      	ldr	r0, [pc, #12]	; (8000404 <MX_TIM2_Init+0xfc>)
 80003f8:	f000 f8a0 	bl	800053c <HAL_TIM_MspPostInit>

}
 80003fc:	bf00      	nop
 80003fe:	3738      	adds	r7, #56	; 0x38
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000028 	.word	0x20000028
 8000408:	0001387f 	.word	0x0001387f

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000422:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <MX_GPIO_Init+0x88>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <MX_GPIO_Init+0x88>)
 8000428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_GPIO_Init+0x88>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_GPIO_Init+0x88>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_GPIO_Init+0x88>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_GPIO_Init+0x88>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_GPIO_Init+0x88>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <MX_GPIO_Init+0x88>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <MX_GPIO_Init+0x88>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800046a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800046e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800047c:	2301      	movs	r3, #1
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000480:	f107 030c 	add.w	r3, r7, #12
 8000484:	4619      	mov	r1, r3
 8000486:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_GPIO_Init+0x8c>)
 8000488:	f000 facc 	bl	8000a24 <HAL_GPIO_Init>

}
 800048c:	bf00      	nop
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	48000400 	.word	0x48000400

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6613      	str	r3, [r2, #96]	; 0x60
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	6593      	str	r3, [r2, #88]	; 0x58
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000504:	d113      	bne.n	800052e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6593      	str	r3, [r2, #88]	; 0x58
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	201c      	movs	r0, #28
 8000524:	f000 fa47 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000528:	201c      	movs	r0, #28
 800052a:	f000 fa60 	bl	80009ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800055c:	d11c      	bne.n	8000598 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <HAL_TIM_MspPostInit+0x64>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <HAL_TIM_MspPostInit+0x64>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <HAL_TIM_MspPostInit+0x64>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8000576:	2324      	movs	r3, #36	; 0x24
 8000578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000586:	2301      	movs	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f000 fa46 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f8c0 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <TIM2_IRQHandler+0x10>)
 8000606:	f001 fb89 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000028 	.word	0x20000028

08000614 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <SystemInit+0x64>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <SystemInit+0x64>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <SystemInit+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <SystemInit+0x68>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SystemInit+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <SystemInit+0x68>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <SystemInit+0x68>)
 8000640:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000644:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000648:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SystemInit+0x68>)
 800064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000650:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <SystemInit+0x68>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <SystemInit+0x68>)
 8000658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <SystemInit+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SystemInit+0x64>)
 8000666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066a:	609a      	str	r2, [r3, #8]
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	40021000 	.word	0x40021000

08000680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000684:	f7ff ffc6 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800069a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
	ldr	r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LoopForever+0x16>)
	cmp	r2, r3
 80006aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ae:	f002 fb27 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006b2:	f7ff fd9d 	bl	80001f0 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80006bc:	08002db8 	.word	0x08002db8
	ldr	r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006c4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006cc:	20000078 	.word	0x20000078

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>

080006d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f95f 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f80e 	bl	8000704 <HAL_InitTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	e001      	b.n	80006f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f4:	f7ff feda 	bl	80004ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_InitTick+0x6c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d023      	beq.n	8000760 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x70>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x6c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f96b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d809      	bhi.n	8000754 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f935 	bl	80009b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_InitTick+0x74>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e007      	b.n	8000764 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e004      	b.n	8000764 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	20000000 	.word	0x20000000
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000074 	.word	0x20000074

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000074 	.word	0x20000074

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffde 	bl	80007a4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff8e 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff29 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff3e 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff8e 	bl	80008f4 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5d 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff31 	bl	8000864 <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e17f      	b.n	8000d34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 8171 	beq.w	8000d2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d00b      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b12      	cmp	r3, #18
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d118      	bne.n	8000b0c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f003 0201 	and.w	r2, r3, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x128>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b12      	cmp	r3, #18
 8000b4a:	d123      	bne.n	8000b94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	08da      	lsrs	r2, r3, #3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3208      	adds	r2, #8
 8000b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	220f      	movs	r2, #15
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	6939      	ldr	r1, [r7, #16]
 8000b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0203 	and.w	r2, r3, #3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80ac 	beq.w	8000d2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <HAL_GPIO_Init+0x32c>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <HAL_GPIO_Init+0x32c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_GPIO_Init+0x32c>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bee:	4a59      	ldr	r2, [pc, #356]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c18:	d025      	beq.n	8000c66 <HAL_GPIO_Init+0x242>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4e      	ldr	r2, [pc, #312]	; (8000d58 <HAL_GPIO_Init+0x334>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d01f      	beq.n	8000c62 <HAL_GPIO_Init+0x23e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4d      	ldr	r2, [pc, #308]	; (8000d5c <HAL_GPIO_Init+0x338>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d019      	beq.n	8000c5e <HAL_GPIO_Init+0x23a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4c      	ldr	r2, [pc, #304]	; (8000d60 <HAL_GPIO_Init+0x33c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0x236>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <HAL_GPIO_Init+0x340>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d00d      	beq.n	8000c56 <HAL_GPIO_Init+0x232>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4a      	ldr	r2, [pc, #296]	; (8000d68 <HAL_GPIO_Init+0x344>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d007      	beq.n	8000c52 <HAL_GPIO_Init+0x22e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a49      	ldr	r2, [pc, #292]	; (8000d6c <HAL_GPIO_Init+0x348>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_GPIO_Init+0x22a>
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	e00c      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c4e:	2307      	movs	r3, #7
 8000c50:	e00a      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c52:	2305      	movs	r3, #5
 8000c54:	e008      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c56:	2304      	movs	r3, #4
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x244>
 8000c66:	2300      	movs	r3, #0
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	f002 0203 	and.w	r2, r2, #3
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	4093      	lsls	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c78:	4936      	ldr	r1, [pc, #216]	; (8000d54 <HAL_GPIO_Init+0x330>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000caa:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_GPIO_Init+0x34c>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f47f ae78 	bne.w	8000a34 <HAL_GPIO_Init+0x10>
  }
}
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000c00 	.word	0x48000c00
 8000d64:	48001000 	.word	0x48001000
 8000d68:	48001400 	.word	0x48001400
 8000d6c:	48001800 	.word	0x48001800
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40007000 	.word	0x40007000

08000d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9e:	d130      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dac:	d038      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2232      	movs	r2, #50	; 0x32
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0c9b      	lsrs	r3, r3, #18
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd4:	e002      	b.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de8:	d102      	bne.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d110      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e00f      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0e:	d007      	beq.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40007000 	.word	0x40007000
 8000e34:	20000000 	.word	0x20000000
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e3d4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e58:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80e4 	beq.w	8001038 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_RCC_OscConfig+0x4a>
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b0c      	cmp	r3, #12
 8000e7a:	f040 808b 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f040 8087 	bne.w	8000f94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	4b93      	ldr	r3, [pc, #588]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x62>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e3ac      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x7c>
 8000eae:	4b89      	ldr	r3, [pc, #548]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb6:	e005      	b.n	8000ec4 <HAL_RCC_OscConfig+0x88>
 8000eb8:	4b86      	ldr	r3, [pc, #536]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d223      	bcs.n	8000f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fd07 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e38d      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000edc:	4b7d      	ldr	r3, [pc, #500]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a7c      	ldr	r2, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4977      	ldr	r1, [pc, #476]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efa:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4972      	ldr	r1, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e025      	b.n	8000f5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a6f      	ldr	r2, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	496a      	ldr	r1, [pc, #424]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2e:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	4965      	ldr	r1, [pc, #404]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fcc7 	bl	80018e0 <RCC_SetFlashLatencyFromMSIRange>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e34d      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f5c:	f000 fc36 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 8000f60:	4601      	mov	r1, r0
 8000f62:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4a5a      	ldr	r2, [pc, #360]	; (80010d8 <HAL_RCC_OscConfig+0x29c>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa21 f303 	lsr.w	r3, r1, r3
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_RCC_OscConfig+0x2a0>)
 8000f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_RCC_OscConfig+0x2a4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbbf 	bl	8000704 <HAL_InitTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d052      	beq.n	8001036 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	e331      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d032      	beq.n	8001002 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fbfc 	bl	80007a4 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fbf8 	bl	80007a4 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e31a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	493b      	ldr	r1, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
 8001000:	e01a      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100e:	f7ff fbc9 	bl	80007a4 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001016:	f7ff fbc5 	bl	80007a4 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e2e7      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f0      	bne.n	8001016 <HAL_RCC_OscConfig+0x1da>
 8001034:	e000      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001036:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d074      	beq.n	800112e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x21a>
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d064      	beq.n	800112c <HAL_RCC_OscConfig+0x2f0>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d160      	bne.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e2c4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x24a>
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e01d      	b.n	80010c2 <HAL_RCC_OscConfig+0x286>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x26e>
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 8001096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x286>
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_RCC_OscConfig+0x298>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb6b 	bl	80007a4 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d0:	e011      	b.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	08002d70 	.word	0x08002d70
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fb5e 	bl	80007a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e280      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	4baf      	ldr	r3, [pc, #700]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x2a8>
 8001102:	e014      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fb4e 	bl	80007a4 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fb4a 	bl	80007a4 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	; 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e26c      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	4ba5      	ldr	r3, [pc, #660]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x2d0>
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d060      	beq.n	80011fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x310>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	d119      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d116      	bne.n	800117a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	4b99      	ldr	r3, [pc, #612]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x328>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e249      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b93      	ldr	r3, [pc, #588]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	4990      	ldr	r1, [pc, #576]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001178:	e040      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d023      	beq.n	80011ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a8b      	ldr	r2, [pc, #556]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fb09 	bl	80007a4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fb05 	bl	80007a4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e227      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a8:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	497c      	ldr	r1, [pc, #496]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e018      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a79      	ldr	r2, [pc, #484]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fae5 	bl	80007a4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fae1 	bl	80007a4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e203      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f0:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d03c      	beq.n	8001282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	4a67      	ldr	r2, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fac0 	bl	80007a4 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fabc 	bl	80007a4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1de      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123a:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ef      	beq.n	8001228 <HAL_RCC_OscConfig+0x3ec>
 8001248:	e01b      	b.n	8001282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001250:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125a:	f7ff faa3 	bl	80007a4 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fa9f 	bl	80007a4 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e1c1      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1ef      	bne.n	8001262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80a6 	beq.w	80013dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10d      	bne.n	80012bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6593      	str	r3, [r2, #88]	; 0x58
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d118      	bne.n	80012fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fa66 	bl	80007a4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff fa62 	bl	80007a4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e184      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_RCC_OscConfig+0x57c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_RCC_OscConfig+0x4d8>
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001312:	e024      	b.n	800135e <HAL_RCC_OscConfig+0x522>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d110      	bne.n	800133e <HAL_RCC_OscConfig+0x502>
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	e00f      	b.n	800135e <HAL_RCC_OscConfig+0x522>
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fa1d 	bl	80007a4 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fa19 	bl	80007a4 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e139      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x578>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ed      	beq.n	800136e <HAL_RCC_OscConfig+0x532>
 8001392:	e01a      	b.n	80013ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fa06 	bl	80007a4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800139a:	e00f      	b.n	80013bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fa02 	bl	80007a4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d906      	bls.n	80013bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e122      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	4b90      	ldr	r3, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e8      	bne.n	800139c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d0:	4b8b      	ldr	r3, [pc, #556]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a8a      	ldr	r2, [pc, #552]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8108 	beq.w	80015f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f040 80d0 	bne.w	8001590 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013f0:	4b83      	ldr	r3, [pc, #524]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	429a      	cmp	r2, r3
 8001402:	d130      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	3b01      	subs	r3, #1
 8001410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d127      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d11f      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001430:	2a07      	cmp	r2, #7
 8001432:	bf14      	ite	ne
 8001434:	2201      	movne	r2, #1
 8001436:	2200      	moveq	r2, #0
 8001438:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800143a:	4293      	cmp	r3, r2
 800143c:	d113      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d06e      	beq.n	8001544 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d069      	beq.n	8001540 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800146c:	4b64      	ldr	r3, [pc, #400]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b7      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001494:	f7ff f986 	bl	80007a4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f982 	bl	80007a4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0a4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b51      	ldr	r3, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x7c8>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ca:	3a01      	subs	r2, #1
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d4:	0212      	lsls	r2, r2, #8
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	3a01      	subs	r2, #1
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e8:	0852      	lsrs	r2, r2, #1
 80014ea:	3a01      	subs	r2, #1
 80014ec:	0652      	lsls	r2, r2, #25
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014f4:	0912      	lsrs	r2, r2, #4
 80014f6:	0452      	lsls	r2, r2, #17
 80014f8:	430a      	orrs	r2, r1
 80014fa:	4941      	ldr	r1, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800150c:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001518:	f7ff f944 	bl	80007a4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff f940 	bl	80007a4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e062      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153e:	e05a      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e059      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d152      	bne.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001568:	f7ff f91c 	bl	80007a4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f918 	bl	80007a4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e03a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x734>
 800158e:	e032      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d02d      	beq.n	80015f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 800159c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff f8eb 	bl	80007a4 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff f8e7 	bl	80007a4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e009      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x7c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x796>
 80015f0:	e001      	b.n	80015f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	f99d808c 	.word	0xf99d808c

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0c8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d910      	bls.n	800164c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0207 	bic.w	r2, r3, #7
 8001632:	4961      	ldr	r1, [pc, #388]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b0      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d04c      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d121      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e09e      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d107      	bne.n	8001688 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d115      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e092      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e086      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e07e      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 0203 	bic.w	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	493f      	ldr	r1, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c2:	f7ff f86f 	bl	80007a4 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff f86b 	bl	80007a4 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e066      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 020c 	and.w	r2, r3, #12
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d1eb      	bne.n	80016ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	492c      	ldr	r1, [pc, #176]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d210      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	4924      	ldr	r1, [pc, #144]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e036      	b.n	80017ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4918      	ldr	r1, [pc, #96]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4910      	ldr	r1, [pc, #64]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177e:	f000 f825 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 8001782:	4601      	mov	r1, r0
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	fa21 f303 	lsr.w	r3, r1, r3
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe ffae 	bl	8000704 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ac:	7afb      	ldrb	r3, [r7, #11]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08002d70 	.word	0x08002d70
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x34>
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d121      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d11e      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e005      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10d      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d102      	bne.n	800184a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	e004      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d101      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001852:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d133      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d002      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0xa4>
 800186a:	2b03      	cmp	r3, #3
 800186c:	d003      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0xaa>
 800186e:	e005      	b.n	800187c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001872:	617b      	str	r3, [r7, #20]
      break;
 8001874:	e005      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001878:	617b      	str	r3, [r7, #20]
      break;
 800187a:	e002      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	617b      	str	r3, [r7, #20]
      break;
 8001880:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	3301      	adds	r3, #1
 800188e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	fb02 f203 	mul.w	r2, r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0e5b      	lsrs	r3, r3, #25
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	3301      	adds	r3, #1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018c2:	69bb      	ldr	r3, [r7, #24]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3724      	adds	r7, #36	; 0x24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08002d80 	.word	0x08002d80
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	007a1200 	.word	0x007a1200

080018e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018f8:	f7ff fa3c 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 80018fc:	6178      	str	r0, [r7, #20]
 80018fe:	e014      	b.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4a24      	ldr	r2, [pc, #144]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6593      	str	r3, [r2, #88]	; 0x58
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001918:	f7ff fa2c 	bl	8000d74 <HAL_PWREx_GetVoltageRange>
 800191c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001930:	d10b      	bne.n	800194a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b80      	cmp	r3, #128	; 0x80
 8001936:	d919      	bls.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2ba0      	cmp	r3, #160	; 0xa0
 800193c:	d902      	bls.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800193e:	2302      	movs	r3, #2
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e013      	b.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001944:	2301      	movs	r3, #1
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e010      	b.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d902      	bls.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001950:	2303      	movs	r3, #3
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e00a      	b.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b80      	cmp	r3, #128	; 0x80
 800195a:	d102      	bne.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	e004      	b.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b70      	cmp	r3, #112	; 0x70
 8001966:	d101      	bne.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001968:	2301      	movs	r3, #1
 800196a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 0207 	bic.w	r2, r3, #7
 8001974:	4909      	ldr	r1, [pc, #36]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e049      	b.n	8001a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fd94 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fcb8 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e049      	b.n	8001af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d106      	bne.n	8001a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f841 	bl	8001afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	f000 fc61 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_TIM_PWM_Start+0x24>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e03c      	b.n	8001bae <HAL_TIM_PWM_Start+0x9e>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d109      	bne.n	8001b4e <HAL_TIM_PWM_Start+0x3e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	e02f      	b.n	8001bae <HAL_TIM_PWM_Start+0x9e>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d109      	bne.n	8001b68 <HAL_TIM_PWM_Start+0x58>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e022      	b.n	8001bae <HAL_TIM_PWM_Start+0x9e>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d109      	bne.n	8001b82 <HAL_TIM_PWM_Start+0x72>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e015      	b.n	8001bae <HAL_TIM_PWM_Start+0x9e>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d109      	bne.n	8001b9c <HAL_TIM_PWM_Start+0x8c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e008      	b.n	8001bae <HAL_TIM_PWM_Start+0x9e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e09c      	b.n	8001cf0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_TIM_PWM_Start+0xb6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc4:	e023      	b.n	8001c0e <HAL_TIM_PWM_Start+0xfe>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d104      	bne.n	8001bd6 <HAL_TIM_PWM_Start+0xc6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	e01b      	b.n	8001c0e <HAL_TIM_PWM_Start+0xfe>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d104      	bne.n	8001be6 <HAL_TIM_PWM_Start+0xd6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be4:	e013      	b.n	8001c0e <HAL_TIM_PWM_Start+0xfe>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0xe6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bf4:	e00b      	b.n	8001c0e <HAL_TIM_PWM_Start+0xfe>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d104      	bne.n	8001c06 <HAL_TIM_PWM_Start+0xf6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	e003      	b.n	8001c0e <HAL_TIM_PWM_Start+0xfe>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 ffa6 	bl	8002b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <HAL_TIM_PWM_Start+0x1e8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_TIM_PWM_Start+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_TIM_PWM_Start+0x1ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_TIM_PWM_Start+0x13e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_TIM_PWM_Start+0x1f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_TIM_PWM_Start+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_TIM_PWM_Start+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_TIM_PWM_Start+0x13e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_TIM_PWM_Start+0x1f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_TIM_PWM_Start+0x142>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_TIM_PWM_Start+0x144>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <HAL_TIM_PWM_Start+0x1e8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01d      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d018      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_TIM_PWM_Start+0x1fc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_TIM_PWM_Start+0x200>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00e      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_PWM_Start+0x204>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_TIM_PWM_Start+0x1ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d004      	beq.n	8001cae <HAL_TIM_PWM_Start+0x19e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_TIM_PWM_Start+0x1f0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d115      	bne.n	8001cda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_TIM_PWM_Start+0x208>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b06      	cmp	r3, #6
 8001cbe:	d015      	beq.n	8001cec <HAL_TIM_PWM_Start+0x1dc>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d011      	beq.n	8001cec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	e008      	b.n	8001cec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e000      	b.n	8001cee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40013400 	.word	0x40013400
 8001d00:	40014000 	.word	0x40014000
 8001d04:	40014400 	.word	0x40014400
 8001d08:	40014800 	.word	0x40014800
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	00010007 	.word	0x00010007

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0202 	mvn.w	r2, #2
 8001d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fad9 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 facb 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fadc 	bl	800232a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 faaf 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 faa1 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fab2 	bl	800232a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fa85 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa77 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa88 	bl	800232a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa5b 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa4d 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fa5e 	bl	800232a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa27 	bl	80022ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 ff06 	bl	8002cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eda:	d10e      	bne.n	8001efa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d107      	bne.n	8001efa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fef9 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d10e      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa0c 	bl	800233e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d10e      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0220 	mvn.w	r2, #32
 8001f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 feb9 	bl	8002cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0fd      	b.n	8002172 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b14      	cmp	r3, #20
 8001f82:	f200 80f0 	bhi.w	8002166 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001fe1 	.word	0x08001fe1
 8001f90:	08002167 	.word	0x08002167
 8001f94:	08002167 	.word	0x08002167
 8001f98:	08002167 	.word	0x08002167
 8001f9c:	08002021 	.word	0x08002021
 8001fa0:	08002167 	.word	0x08002167
 8001fa4:	08002167 	.word	0x08002167
 8001fa8:	08002167 	.word	0x08002167
 8001fac:	08002063 	.word	0x08002063
 8001fb0:	08002167 	.word	0x08002167
 8001fb4:	08002167 	.word	0x08002167
 8001fb8:	08002167 	.word	0x08002167
 8001fbc:	080020a3 	.word	0x080020a3
 8001fc0:	08002167 	.word	0x08002167
 8001fc4:	08002167 	.word	0x08002167
 8001fc8:	08002167 	.word	0x08002167
 8001fcc:	080020e5 	.word	0x080020e5
 8001fd0:	08002167 	.word	0x08002167
 8001fd4:	08002167 	.word	0x08002167
 8001fd8:	08002167 	.word	0x08002167
 8001fdc:	08002125 	.word	0x08002125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fa4e 	bl	8002488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0208 	orr.w	r2, r2, #8
 8001ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0204 	bic.w	r2, r2, #4
 800200a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6999      	ldr	r1, [r3, #24]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	619a      	str	r2, [r3, #24]
      break;
 800201e:	e0a3      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fabe 	bl	80025a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6999      	ldr	r1, [r3, #24]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	021a      	lsls	r2, r3, #8
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	619a      	str	r2, [r3, #24]
      break;
 8002060:	e082      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fb27 	bl	80026bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0208 	orr.w	r2, r2, #8
 800207c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69d9      	ldr	r1, [r3, #28]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
      break;
 80020a0:	e062      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fb8f 	bl	80027cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69d9      	ldr	r1, [r3, #28]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	021a      	lsls	r2, r3, #8
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	61da      	str	r2, [r3, #28]
      break;
 80020e2:	e041      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fbd8 	bl	80028a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0208 	orr.w	r2, r2, #8
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0204 	bic.w	r2, r2, #4
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002122:	e021      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fc1c 	bl	8002968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	021a      	lsls	r2, r3, #8
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002164:	e000      	b.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002166:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop

0800217c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_TIM_ConfigClockSource+0x18>
 8002190:	2302      	movs	r3, #2
 8002192:	e0a8      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x16a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d067      	beq.n	80022a0 <HAL_TIM_ConfigClockSource+0x124>
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d80b      	bhi.n	80021ec <HAL_TIM_ConfigClockSource+0x70>
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d073      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0x144>
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d802      	bhi.n	80021e2 <HAL_TIM_ConfigClockSource+0x66>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d06f      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021e0:	e078      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d06c      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0x144>
 80021e6:	2b30      	cmp	r3, #48	; 0x30
 80021e8:	d06a      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80021ea:	e073      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021ec:	2b70      	cmp	r3, #112	; 0x70
 80021ee:	d00d      	beq.n	800220c <HAL_TIM_ConfigClockSource+0x90>
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d804      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x82>
 80021f4:	2b50      	cmp	r3, #80	; 0x50
 80021f6:	d033      	beq.n	8002260 <HAL_TIM_ConfigClockSource+0xe4>
 80021f8:	2b60      	cmp	r3, #96	; 0x60
 80021fa:	d041      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80021fc:	e06a      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002202:	d066      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x156>
 8002204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002208:	d017      	beq.n	800223a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800220a:	e063      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f000 fc84 	bl	8002b28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800222e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]
      break;
 8002238:	e04c      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f000 fc6d 	bl	8002b28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225c:	609a      	str	r2, [r3, #8]
      break;
 800225e:	e039      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	461a      	mov	r2, r3
 800226e:	f000 fbe1 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2150      	movs	r1, #80	; 0x50
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fc3a 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 800227e:	e029      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	461a      	mov	r2, r3
 800228e:	f000 fc00 	bl	8002a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2160      	movs	r1, #96	; 0x60
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fc2a 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 800229e:	e019      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f000 fbc1 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fc1a 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80022be:	e009      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fc11 	bl	8002af2 <TIM_ITRx_SetConfig>
        break;
 80022d0:	e000      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80022d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a40      	ldr	r2, [pc, #256]	; (8002468 <TIM_Base_SetConfig+0x114>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d00f      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <TIM_Base_SetConfig+0x118>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00b      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <TIM_Base_SetConfig+0x11c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <TIM_Base_SetConfig+0x120>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <TIM_Base_SetConfig+0x124>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <TIM_Base_SetConfig+0x114>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d01b      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2c      	ldr	r2, [pc, #176]	; (800246c <TIM_Base_SetConfig+0x118>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d017      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <TIM_Base_SetConfig+0x11c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <TIM_Base_SetConfig+0x120>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00f      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a29      	ldr	r2, [pc, #164]	; (8002478 <TIM_Base_SetConfig+0x124>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <TIM_Base_SetConfig+0x128>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a27      	ldr	r2, [pc, #156]	; (8002480 <TIM_Base_SetConfig+0x12c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_Base_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <TIM_Base_SetConfig+0x130>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d108      	bne.n	8002400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <TIM_Base_SetConfig+0x114>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00f      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <TIM_Base_SetConfig+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00b      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a11      	ldr	r2, [pc, #68]	; (800247c <TIM_Base_SetConfig+0x128>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <TIM_Base_SetConfig+0x12c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0xf8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <TIM_Base_SetConfig+0x130>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40013400 	.word	0x40013400
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800

08002488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 0302 	bic.w	r3, r3, #2
 80024d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <TIM_OC1_SetConfig+0x10c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00f      	beq.n	8002508 <TIM_OC1_SetConfig+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <TIM_OC1_SetConfig+0x110>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00b      	beq.n	8002508 <TIM_OC1_SetConfig+0x80>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <TIM_OC1_SetConfig+0x114>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d007      	beq.n	8002508 <TIM_OC1_SetConfig+0x80>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_OC1_SetConfig+0x118>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <TIM_OC1_SetConfig+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a28      	ldr	r2, [pc, #160]	; (80025a4 <TIM_OC1_SetConfig+0x11c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10c      	bne.n	8002522 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0308 	bic.w	r3, r3, #8
 800250e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <TIM_OC1_SetConfig+0x10c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <TIM_OC1_SetConfig+0xc2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <TIM_OC1_SetConfig+0x110>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_OC1_SetConfig+0xc2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <TIM_OC1_SetConfig+0x114>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_OC1_SetConfig+0xc2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <TIM_OC1_SetConfig+0x118>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_OC1_SetConfig+0xc2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <TIM_OC1_SetConfig+0x11c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d111      	bne.n	800256e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	621a      	str	r2, [r3, #32]
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40013400 	.word	0x40013400
 800259c:	40014000 	.word	0x40014000
 80025a0:	40014400 	.word	0x40014400
 80025a4:	40014800 	.word	0x40014800

080025a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f023 0210 	bic.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0320 	bic.w	r3, r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <TIM_OC2_SetConfig+0x100>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_OC2_SetConfig+0x6c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <TIM_OC2_SetConfig+0x104>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10d      	bne.n	8002630 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800262e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <TIM_OC2_SetConfig+0x100>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00f      	beq.n	8002658 <TIM_OC2_SetConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <TIM_OC2_SetConfig+0x104>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_OC2_SetConfig+0xb0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <TIM_OC2_SetConfig+0x108>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_OC2_SetConfig+0xb0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <TIM_OC2_SetConfig+0x10c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_OC2_SetConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <TIM_OC2_SetConfig+0x110>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d113      	bne.n	8002680 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40013400 	.word	0x40013400
 80026b0:	40014000 	.word	0x40014000
 80026b4:	40014400 	.word	0x40014400
 80026b8:	40014800 	.word	0x40014800

080026bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <TIM_OC3_SetConfig+0xfc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC3_SetConfig+0x6a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <TIM_OC3_SetConfig+0x100>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10d      	bne.n	8002742 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <TIM_OC3_SetConfig+0xfc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00f      	beq.n	800276a <TIM_OC3_SetConfig+0xae>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <TIM_OC3_SetConfig+0x100>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_OC3_SetConfig+0xae>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_OC3_SetConfig+0x104>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_OC3_SetConfig+0xae>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <TIM_OC3_SetConfig+0x108>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_OC3_SetConfig+0xae>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <TIM_OC3_SetConfig+0x10c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	621a      	str	r2, [r3, #32]
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40013400 	.word	0x40013400
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800

080027cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <TIM_OC4_SetConfig+0xc0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00f      	beq.n	8002850 <TIM_OC4_SetConfig+0x84>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <TIM_OC4_SetConfig+0xc4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00b      	beq.n	8002850 <TIM_OC4_SetConfig+0x84>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <TIM_OC4_SetConfig+0xc8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <TIM_OC4_SetConfig+0x84>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <TIM_OC4_SetConfig+0xcc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <TIM_OC4_SetConfig+0x84>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <TIM_OC4_SetConfig+0xd0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d109      	bne.n	8002864 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40013400 	.word	0x40013400
 8002894:	40014000 	.word	0x40014000
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800

080028a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <TIM_OC5_SetConfig+0xb4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00f      	beq.n	800291a <TIM_OC5_SetConfig+0x7a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <TIM_OC5_SetConfig+0xb8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00b      	beq.n	800291a <TIM_OC5_SetConfig+0x7a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <TIM_OC5_SetConfig+0xbc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <TIM_OC5_SetConfig+0x7a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <TIM_OC5_SetConfig+0xc0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <TIM_OC5_SetConfig+0x7a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <TIM_OC5_SetConfig+0xc4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d109      	bne.n	800292e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40013400 	.word	0x40013400
 800295c:	40014000 	.word	0x40014000
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800

08002968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	051b      	lsls	r3, r3, #20
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <TIM_OC6_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <TIM_OC6_SetConfig+0x7c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <TIM_OC6_SetConfig+0xbc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <TIM_OC6_SetConfig+0x7c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <TIM_OC6_SetConfig+0xc0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <TIM_OC6_SetConfig+0x7c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <TIM_OC6_SetConfig+0xc4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_OC6_SetConfig+0x7c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <TIM_OC6_SetConfig+0xc8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d109      	bne.n	80029f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	029b      	lsls	r3, r3, #10
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40013400 	.word	0x40013400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800

08002a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 030a 	bic.w	r3, r3, #10
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0210 	bic.w	r2, r3, #16
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f043 0307 	orr.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e068      	b.n	8002c9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d108      	bne.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d018      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10c      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40014000 	.word	0x40014000

08002cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4e0d      	ldr	r6, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1ba4      	subs	r4, r4, r6
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	42a5      	cmp	r5, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4e0b      	ldr	r6, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 f820 	bl	8002d58 <_init>
 8002d18:	1ba4      	subs	r4, r4, r6
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	42a5      	cmp	r5, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d28:	4798      	blx	r3
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d32:	4798      	blx	r3
 8002d34:	3501      	adds	r5, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002db0 	.word	0x08002db0
 8002d3c:	08002db0 	.word	0x08002db0
 8002d40:	08002db0 	.word	0x08002db0
 8002d44:	08002db4 	.word	0x08002db4

08002d48 <memset>:
 8002d48:	4402      	add	r2, r0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <memset+0xa>
 8002d50:	4770      	bx	lr
 8002d52:	f803 1b01 	strb.w	r1, [r3], #1
 8002d56:	e7f9      	b.n	8002d4c <memset+0x4>

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
